{
    "0": {
        "topic": "Algorithms",
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "referenceAnswer": "In the worst case, the time complexity of QuickSort is O(n\u00b2), where n is the number of elements in the array. This occurs when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "feedback": "1. **Final Score of the Student's Answer:** 50\n2. **Positive Feedback:** The student correctly mentioned that QuickSort divides the list into two halves, which is a key aspect of the algorithm's operation.\n3. **Deduction Reason:**\n   - Relevance (5 points deducted): The answer should have specifically addressed the worst-case time complexity, which the student did not do clearly.\n   - Accuracy (15 points deducted): The student incorrectly stated that the worst-case time complexity is O(n log n), while the correct value is O(n\u00b2)."
    },
    "1": {
        "topic": "Data Structures",
        "question": "Explain how a hash table works.",
        "referenceAnswer": "A hash table stores key-value pairs. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "feedback": "1. **Final Score of the Student's Answer:** 50\n2. **Positive Feedback:** The student correctly identifies that a hash table uses keys for indexing, which shows an understanding of the basic concept.\n3. **Deduction Reason:**\n   - Relevance (5 points deducted): The answer does not explain how a hash function is used to compute the index, which is a crucial part of how a hash table works.\n   - Accuracy (10 points deducted): The statement \"just an array that stores data\" oversimplifies the structure and functionality of a hash table, as it implies it's similar to a simple array, while\u5ffd\u7565\u4e86hash function\u548ccollision resolution\u7684\u91cd\u8981\u4f5c\u7528\u3002\n   - Completeness (10 points deducted): The answer omits the mention of collision resolution, which is an essential aspect of hash table design.\n   - Clarity (10 points deducted): The response could be clearer and more concise, specifically in explaining the role of the hash function and the handling of collisions."
    },
    "2": {
        "topic": "System Design",
        "question": "Describe the basic components of a distributed system.",
        "referenceAnswer": "A distributed system consists of multiple software components located on different networked computers, which communicate and coordinate their actions by passing messages. The components interact with each other in order to achieve a common goal. Key components include servers, clients, and the communication infrastructure.",
        "studentAnswer": "Distributed systems are just multiple computers connected to a server that manages them.",
        "feedback": "1. **Final Score of the Student's Answer:** 60\n2. **Positive Feedback:** The student correctly identifies that a distributed system involves multiple computers. They also mention the presence of a server, which is a key component.\n3. **Deduction Reason:**\n\t* Relevance (5 points deducted): The answer does not fully address all parts of the question, as it doesn't mention clients or the communication infrastructure, which are essential components of a distributed system.\n\t* Accuracy (5 points deducted): The statement \"manages them\" oversimplifies the role of the server in a distributed system, which is more complex than just managing the other computers.\n\t* Completeness (10 points deducted): The answer is incomplete as it lacks mention of clients and the communication infrastructure, which play crucial roles in coordinating actions among the system components.\n\t* Clarity (5 points deducted): The answer could be clearer by providing a more detailed explanation of how these components work together."
    },
    "3": {
        "topic": "Software Engineering",
        "question": "What is refactoring in software development?",
        "referenceAnswer": "Refactoring is the process of restructuring existing computer code\u2014changing the factoring\u2014without changing its external behavior. It is done to improve nonfunctional attributes of the software, such as readability, reduced complexity, or improving maintainability and scalability.",
        "studentAnswer": "Refactoring is when you write new functions to add more features to the software.",
        "feedback": "1. **Final Score of the Student's Answer:** 30\n2. **Positive Feedback:** The student correctly identifies that refactoring involves changes to the code, but acknowledges it without mentioning the key aspect of maintaining external behavior.\n3. **Deduction Reason:**\n\t* Relevance (deduction of 15 points): The answer does not mention that refactoring does not change the external behavior of the software, which is a fundamental characteristic.\n\t* Accuracy (deduction of 10 points): The student describes refactoring as writing new functions to add more features, which is not an accurate definition; refactoring is about restructuring existing code, not necessarily adding new features.\n\t* Completeness (deduction of 5 points): The answer does not address the benefits or goals of refactoring, such as improving readability, maintainability, or scalability."
    }
}