{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *False* (The student's answer states the average-case time complexity of QuickSort, which is O(n log n). QuickSort's worst-case time complexity is O(n^2), as mentioned in the reference answer.)\n\n<Point2:2> *True* (While not explicitly mentioned, the student's understanding of the worst-case scenario for QuickSort is correct, where unbalanced partitions lead to a linear search behavior, resulting in O(n^2) time complexity.)\n\nTotal score: 2 / 5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "**Question:** Explain how a hash table works.\n- **Full Mark:** 5\n- **Reference Answer:** <Point1:2> A hash table is a data structure used to implement an associative array abstract data type, providing efficient data retrieval<Point1:2>. It consists of <Point2:2> two parts: the array, which stores the key-value pairs in the form of a list of buckets, and the hash function, which assigns a unique index to each key<Point2:2>. <Point3:1>By using a hash function, the table can quickly determine the bucket or index where the key-value pair should be stored or retrieved<Point3:1>. In the event of a collision, when two different keys hash to the same index, collision resolution techniques are employed to handle the conflict, typically by chaining or open addressing<Point3:1>.\n- **Student Answer:** A hash table is just an array that stores data and uses keys for indexing to quickly find and retrieve values.\n\n**Feedback:**\n<Point1:2> *True* (The student's answer mentions the purpose of a hash table, which is to provide efficient data retrieval through key-value pairs.)\n\n<Point2:2> *True* (The student's answer correctly identifies the two main parts of a hash table: the array (buckets) and the hash function.)\n\n<Point3:1> *True* (The student's answer correctly mentions the benefit of using a hash function for quick data retrieval and briefly touches on collision resolution, although it could be more detailed.)\n\nTotal score: 4 / 5"
    }
}