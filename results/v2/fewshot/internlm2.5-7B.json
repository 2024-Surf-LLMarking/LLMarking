{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *False* (The student's answer mentions O(n log n), which is the average case complexity, not the worst case.)\n\n<Point2:2> *False* (The student's answer does not mention the specific condition that leads to the worst-case complexity.)\n\nTotal score: 0 / 5\n\n**Explanation:**\n- The student's answer is incorrect because it provides the average case complexity rather than the worst case. Even though QuickSort sometimes has O(n log n) complexity, this is not the worst-case scenario, which is O(n^2).\n- The answer also does not mention the condition where the worst-case complexity arises, which is when the pivot chosen consistently partitions the list into a length of n-1 and 1, leading to unbalanced partitions that increase complexity exponentially."
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "(Point1:2) *True* (The student's answer correctly mentions that a hash table stores key-value pairs and uses keys for indexing.)\n\n(Point2:2) *True* (The student's answer correctly mentions the use of a hash function to compute an index into an array.)\n\n(Point3:1) *False* (The student's answer does not mention the ideal goal of the hash function assigning each key to a unique bucket or the concept of collision resolution.)"
    }
}