{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *True* (The student is correct in stating that QuickSort has a worst-case time complexity of O(n^2), as this was explicitly mentioned in the reference answer.)\n\n<Point2:2> *True* (The student correctly identifies the condition that leads to the worst-case time complexity, which is the unbalanced partitions due to consistently selecting the smallest or largest element as the pivot.)\n\nTotal score: 5 / 5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "**Feedback:**\n\n<Point1:2> *False* (The answer provided by the student does not cover all points of the hash table. A hash table is typically an array of buckets or \u201cslots,\u201d where each bucket stores a key-value pair.)\n\n<Point2:2> *True* (A hash function is indeed used to compute the index into the array of buckets or slots, which allows for quick retrieval of the value associated with a key.)\n\n<Point3:1> *False* (Collision resolution is a part of hash tables where two or more keys are mapped to the same bucket. The student omits this as an important concept of hash tables.)\n\nTotal score: 1 / 5"
    }
}