{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3>*False* (The student did not correctly identify the worst-case time complexity of QuickSort. The correct worst-case time complexity is O(n^2), not O(n log n).)\n\n<Point2:2>*False* (The student's explanation of the worst case is incorrect. The worst case does not occur due to the division into two halves but rather when the pivot choices lead to highly unbalanced partitions, such as when the pivot is consistently the smallest or largest element.)\n\nTotal score: 0 / 5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:0> *False* (The student's answer does not explain the concept of key-value pairs, which is a fundamental aspect of how a hash table operates.)\n\n<Point2:1> *Partial* (The student mentions the array and indexing aspects of a hash table but does not explain the use of a hash function, which is crucial for understanding how keys are mapped to values.)\n\n<Point3:0> *False* (The student does not address the concept of collision resolution, which is an essential aspect of hash table design and functionality.)\n\nTotal score: 1 / 5"
    }
}