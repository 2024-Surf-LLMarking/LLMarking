{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point:2> The student's answer partially addresses the question as it mentions the time complexity of QuickSort but correctly states O(n log n) instead of the worst-case scenario specified in the reference answer. However, the student should also address the condition that leads to the worst-case time complexity to fully complete the answer.\n\n<Induction>\nIn the student's answer, it was stated that QuickSort has a time complexity of O(n log n) in the worst case. This is partially correct because the time complexity of QuickSort is indeed O(n log n) in the average case. However, the student should also mention the condition that leads to the worst-case time complexity.\n\n<Deduction>\nThe student failed to mention the worst-case time complexity of QuickSort, which is O(n^2). While the student correctly stated the average-case time complexity, they did not fully answer the question by not addressing the conditions under which the worst-case time complexity occurs.\n\nTotal score: 4/5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point:2>Induction: This part of the answer is partially correct but lacks detail. You should include a brief mention of how the hash function works and its importance in connecting the key to the index in the array.\n<Point:0>Deduction: You did not mention the use of collision resolution techniques, which is a key aspect of hash table functionality. Additionally, your explanation could be more in-depth.\nTotal score: 1/5"
    }
}