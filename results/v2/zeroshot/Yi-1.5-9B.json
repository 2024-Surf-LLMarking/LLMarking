{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1 :3 >False<Point1 :3 > (The student's answer incorrectly states that QuickSort has a time complexity of O(n log n) in the worst case. The correct worst-case time complexity is O(n^2).)\n<Point2 :2 >False<Point2 :2 > (The student does not mention that the worst case occurs when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.)\n\nTotal score: 0 / 5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1 :2 > *True* (The student correctly describes that a hash table is an array used to store data with keys for indexing)\n\n<Point2 :2 > *False* (The student does not mention the hash function or the concept of \"buckets\" or \"slots\" into which the data is stored, which is crucial to understanding how a hash table works)\n\n<Point3 :1 > *False* (The student does not mention the concept of \"collision resolution,\" which is an important aspect of how hash tables handle situations where multiple keys may hash to the same bucket)\n\nTotal score: 1 / 5"
    }
}