{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point:3> <Deduction>...The student's answer incorrectly states the worst-case time complexity of QuickSort as O(n log n) instead of O(n^2). The explanation also lacks detail about why the worst case happens (specifically, when the pivot selection leads to unbalanced partitions).<Point:2> <Deduction>...The student fails to mention that in the worst case, the partitioning process results in one subarray being empty and the other containing all but one element, leading to quadratic behavior.<Point:0> <Deduction>...There is no induction since the student's answer does not satisfy any of the points.\n\nTotal score: 3/5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2>Induction</Point1>...The student correctly identified that a hash table stores key-value pairs, which aligns with the first point of the reference answer. The explanation is concise and relevant to the topic.\n\n<Point2:2>Deduction</Point2>...However, the student's response lacks detail about how the hash function computes an index into an array of buckets and the role of collision resolution in hash tables. These are crucial components as per the second point of the reference answer.\n\n<Point3:1>Deduction</Point3>...Similarly, the student did not mention the ideal scenario where each key ideally maps to a unique bucket, nor did they include the importance of collision resolution strategies, which are highlighted in the third point of the reference answer.\n\nTotal score: (2+2)/5 = 4/5"
    }
}