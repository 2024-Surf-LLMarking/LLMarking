{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting requirements from stakeholders. System Analysis and Design: Analyzing requirements and creating a blueprint. Implementation: Writing the code. Testing: Checking the system for defects. Deployment: Releasing the software to users. Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description.)\n<Point2:1> *True* (The student accurately describes the purpose of Requirement Gathering.)\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase and provides a concise description.)\n<Point4:1> *True* (The student accurately describes the purpose of System Analysis and Design.)\n<Point5:1> *True* (The student correctly identifies \"Implementation\" as a key phase and provides a concise description.)\n<Point6:1> *True* (The student accurately describes the purpose of Implementation.)\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase and provides a concise description.)\n<Point8:1> *True* (The student accurately describes the purpose of Testing.)\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase and provides a concise description.)\n<Point10:1> *True* (The student accurately describes the purpose of Deployment.)\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and provides a concise description.)\n<Point12:1> *True* (The student accurately describes the purpose of Maintenance.) \n\n\n"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Understanding what the software needs to do by talking to stakeholders. System Analysis and Design: Creating a detailed plan and design for the software. Implementation (Coding): Developing the software based on the design. Testing: Ensuring the software works correctly by finding and fixing bugs. Deployment: Making the software available to the users. Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise explanation.)\n\n<Point2:1> *True* (The student accurately describes the purpose of \"System Analysis and Design\".)\n\n<Point3:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase and describes its function.)\n\n<Point4:1> *True* (The student accurately describes the purpose of \"Testing\".)\n\n<Point5:1> *True* (The student correctly identifies \"Deployment\" as a key phase and describes its function.)\n\n<Point6:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and describes its function.) \n\n\n"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are: Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed. System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created. Implementation (Coding): This phase involves writing the code according to the design documents. Testing: The system is verified against the requirements to identify and fix defects. Deployment: The software is released to the production environment for users. Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description aligning with the reference answer.)\n\n<Point2:1> *True* (The student accurately describes the purpose of \"Requirement Gathering\".)\n\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase and provides a description consistent with the reference answer.)\n\n<Point4:1> *True* (The student accurately describes the purpose of \"System Analysis and Design\".)\n\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase and provides a description aligning with the reference answer.)\n\n<Point6:1> *True* (The student accurately describes the purpose of \"Implementation (Coding)\".)\n\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase and provides a description consistent with the reference answer.)\n\n<Point8:1> *True* (The student accurately describes the purpose of \"Testing\".)\n\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase and provides a description aligning with the reference answer.)\n\n<Point10:1> *True* (The student accurately describes the purpose of \"Deployment\".)\n\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and provides a description consistent with the reference answer.)\n\n<Point12:1> *True* (The student accurately describes the purpose of \"Maintenance\".) \n\n\n"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are: Requirement Gathering: This is where the requirements from stakeholders are collected. System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created. Implementation (Coding): The next step is to write the code based on the design. Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects. Deployment: The software is then deployed to the production environment. Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description.)\n\n<Point2:1> *True* (The student accurately describes the purpose of Requirement Gathering.)\n\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase and provides a concise description.)\n\n<Point4:1> *True* (The student accurately describes the purpose of System Analysis and Design.)\n\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase and provides a concise description.)\n\n<Point6:1> *True* (The student accurately describes the purpose of Implementation (Coding).)\n\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase and provides a concise description.)\n\n<Point8:1> *True* (The student accurately describes the purpose of Testing.)\n\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase and provides a concise description.)\n\n<Point10:1> *True* (The student accurately describes the purpose of Deployment.)\n\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and provides a concise description.)\n\n<Point12:1> *True* (The student accurately describes the purpose of Maintenance.) \n\n\n"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases: Requirement Gathering: Collecting the requirements from stakeholders. System Analysis and Design: Analyzing the requirements and designing the system. Implementation (Coding): Writing the code based on the design. Testing: Checking the system for defects. Deployment: Releasing the software for use. Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description.)\n<Point2:1> *True* (The student accurately describes \"System Analysis and Design\" and its purpose.)\n<Point3:1> *True* (The student correctly identifies \"Implementation (Coding)\" and its function.)\n<Point4:1> *True* (The student accurately describes \"Testing\" and its goal.)\n<Point5:1> *True* (The student correctly identifies \"Deployment\" and its meaning.)\n<Point6:1> *True* (The student accurately describes \"Maintenance\" and its role.) \n"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes: Requirement Gathering: Gathering what is needed for the project. System Analysis and Design: Creating a design based on the requirements. Implementation (Coding): Coding the project. Testing: Testing the code. Deployment: Making the software available. Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase.)\n<Point2:1> *False* (The student does not elaborate on the purpose of requirement gathering as described in the reference answer.)\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase.)\n<Point4:1> *False* (The student does not elaborate on the purpose of system analysis and design as described in the reference answer.)\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase.)\n<Point6:1> *False* (The student does not elaborate on the purpose of implementation as described in the reference answer.)\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase.)\n<Point8:1> *False* (The student does not elaborate on the purpose of testing as described in the reference answer.)\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase.)\n<Point10:1> *False* (The student does not elaborate on the purpose of deployment as described in the reference answer.)\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase.)\n<Point12:1> *False* (The student does not elaborate on the purpose of maintenance as described in the reference answer.) \n\n\n"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are: Requirement Gathering: Understanding what the stakeholders need. System Analysis and Design: Planning how the system will be built. Implementation (Coding): Writing the actual code. Testing: Making sure the software works as expected. Deployment: Launching the software for users. Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description.)\n<Point2:1> *False* (The student does not elaborate on the specific activities involved in requirement gathering, such as collecting requirements from stakeholders.)\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase and provides a general description.)\n<Point4:1> *False* (The student does not elaborate on the specific activities involved in system analysis and design, such as creating a blueprint of the system.)\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase and provides a general description.)\n<Point6:1> *False* (The student does not elaborate on the specific activities involved in implementation, such as writing code according to design documents.)\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase and provides a general description.)\n<Point8:1> *False* (The student does not elaborate on the specific activities involved in testing, such as verifying the system against requirements and fixing defects.)\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase and provides a general description.)\n<Point10:1> *False* (The student does not elaborate on the specific activities involved in deployment, such as releasing the software to the production environment.)\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and provides a general description.)\n<Point12:1> *False* (The student does not elaborate on the specific activities involved in maintenance, such as ongoing support and enhancement.) \n\n\n"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of: Requirement Gathering: Collecting the requirements needed for the project. System Analysis and Design: Designing the system based on the requirements. Implementation (Coding): Writing the code for the project. Testing: Checking the software for any issues. Deployment: Releasing the final product to the users. Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description.)\n<Point2:1> *False* (The student does not elaborate on the specifics of collecting requirements from stakeholders.)\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase and provides a basic description.)\n<Point4:1> *False* (The student does not elaborate on analyzing requirements and creating a blueprint of the system.)\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase and provides a basic description.)\n<Point6:1> *False* (The student does not elaborate on writing the code according to design documents.)\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase and provides a basic description.)\n<Point8:1> *False* (The student does not elaborate on verifying the system against requirements and fixing defects.)\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase and provides a basic description.)\n<Point10:1> *False* (The student does not elaborate on releasing the software to the production environment.)\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and provides a basic description.)\n<Point12:1> *False* (The student does not elaborate on ongoing support and enhancement post-deployment.) \n\n\n"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting what needs to be developed from the stakeholders. System Analysis and Design: Analyzing these requirements and making a system design. Implementation (Coding): Writing the code according to the design. Testing: Verifying that the system works as intended and fixing any defects. Deployment: Making the software available to the users. Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase and provides a concise description.)\n\n<Point2:1> *False* (The student's description of Requirement Gathering is incomplete. It lacks the detail of collecting requirements from stakeholders.)\n\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase and provides a relevant description.)\n\n<Point4:1> *False* (The student's description of System Analysis and Design is incomplete. It lacks the detail of creating a blueprint of the system.)\n\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase and provides a relevant description.)\n\n<Point6:1> *False* (The student's description of Implementation (Coding) is incomplete. It lacks the detail of writing the code as per the design documents.)\n\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase and provides a relevant description.)\n\n<Point8:1> *False* (The student's description of Testing is incomplete. It lacks the detail of verifying the system against the requirements to identify and fix defects.)\n\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase and provides a relevant description.)\n\n<Point10:1> *False* (The student's description of Deployment is incomplete. It lacks the detail of releasing the software to the production environment for users.)\n\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase and provides a relevant description.)\n\n<Point12:1> *False* (The student's description of Maintenance is incomplete. It lacks the detail of ongoing support and enhancement of the software post-deployment.) \n\n\n"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes: Requirement Gathering: Understanding what the project needs. System Analysis and Design: Creating a detailed plan based on the requirements. Implementation (Coding): Writing the necessary code. Testing: Ensuring the system meets requirements and fixing any problems. Deployment: Making the software available to the end-users. Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies \"Requirement Gathering\" as a key phase.)\n<Point2:1> *False* (The student does not provide a detailed description of what is involved in Requirement Gathering.)\n<Point3:1> *True* (The student correctly identifies \"System Analysis and Design\" as a key phase.)\n<Point4:1> *False* (The student does not provide a detailed description of what is involved in System Analysis and Design.)\n<Point5:1> *True* (The student correctly identifies \"Implementation (Coding)\" as a key phase.)\n<Point6:1> *False* (The student does not provide a detailed description of what is involved in Implementation (Coding).)\n<Point7:1> *True* (The student correctly identifies \"Testing\" as a key phase.)\n<Point8:1> *False* (The student does not provide a detailed description of what is involved in Testing.)\n<Point9:1> *True* (The student correctly identifies \"Deployment\" as a key phase.)\n<Point10:1> *False* (The student does not provide a detailed description of what is involved in Deployment.)\n<Point11:1> *True* (The student correctly identifies \"Maintenance\" as a key phase.)\n<Point12:1> *False* (The student does not provide a detailed description of what is involved in Maintenance.) \n\n\n"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes the Waterfall model as linear and sequential.)\n<Point2:1> *True* (The student correctly explains the one-directional flow of the Waterfall model.)\n<Point3:1> *True* (The student highlights the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental.)\n<Point5:1> *True* (The student correctly mentions the use of iterations in the Agile model.)\n<Point6:1> *True* (The student accurately points out the continuous feedback aspect of Agile.)\n<Point7:1> *True* (The student correctly states that changes are easily accommodated in Agile.) \n\n\n"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n<Point2:1> *False* (The student does not explicitly mention the one-directional flow of the Waterfall model.)\n<Point3:1> *True* (The student accurately points out the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach.)\n<Point5:1> *True* (The student mentions the use of small development cycles in Agile.)\n<Point6:1> *True* (The student highlights the importance of feedback and adaptability in Agile.)\n<Point7:1> *True* (The student accurately states that Agile allows for changes at any stage.) \n\n\n"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential, emphasizing the completion of one phase before moving to the next.)\n\n<Point2:1> *True* (The student accurately compares the Waterfall model's flow to a waterfall, highlighting its unidirectional nature.)\n\n<Point3:1> *True* (The student correctly points out the difficulty of implementing changes in the Waterfall model due to its sequential nature.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as an iterative and incremental approach that prioritizes flexibility and collaboration.)\n\n<Point5:1> *True* (The student correctly mentions the use of iterations in the Agile model, emphasizing their role in allowing for regular reassessment and adaptation.)\n\n<Point6:1> *True* (The student accurately highlights the Agile model's emphasis on continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile development process.) \n\n\n"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n<Point2:1> *True* (The student accurately states that the Waterfall model flows in one direction.)\n<Point3:1> *True* (The student correctly identifies the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental.)\n<Point5:1> *True* (The student correctly mentions the use of iterations in the Agile model.)\n<Point6:1> *True* (The student accurately states that Agile allows for continuous feedback and adaptability.)\n<Point7:1> *True* (The student correctly points out the ease of making changes in the Agile model.) \n\n\n"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as a linear and sequential approach.)\n<Point2:1> *True* (The student accurately states that the Waterfall model is unidirectional.)\n<Point3:1> *True* (The student identifies the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly describes the Agile model as iterative and incremental, emphasizing flexibility and collaboration.)\n<Point5:1> *True* (The student accurately mentions the use of iterations in the Agile model.)\n<Point6:1> *True* (The student highlights the continuous feedback and adaptability of Agile.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes at any stage.) \n\n\n"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n<Point2:1> *True* (The student accurately states that the Waterfall model has a one-way flow.)\n<Point3:1> *True* (The student identifies the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly describes Agile as an iterative and incremental approach.)\n<Point5:1> *True* (The student mentions the use of iterations in Agile development.)\n<Point6:1> *True* (The student highlights the importance of feedback and adaptability in Agile.)\n<Point7:1> *True* (The student accurately states that Agile allows for changes at any stage.) \n\n\n"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n<Point2:1> *False* (The student does not explicitly mention the one-directional flow of the Waterfall model.)\n<Point3:1> *True* (The student accurately points out the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach focused on flexibility and collaboration.)\n<Point5:1> *True* (The student mentions the development of small increments called iterations in Agile.)\n<Point6:1> *True* (The student highlights the continuous feedback and adaptability of Agile to changing requirements.)\n<Point7:1> *True* (The student states that Agile allows for changes at any stage of development.) \n\n\n"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n<Point2:1> *True* (The student accurately states that the Waterfall model is unidirectional.)\n<Point3:1> *True* (The student mentions the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student identifies Agile as an iterative and incremental approach.)\n<Point5:1> *True* (The student explains that Agile uses iterations for development.)\n<Point6:1> *True* (The student highlights the continuous feedback and adaptability of Agile.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes throughout the development process.) \n\n\n"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as a linear and sequential approach.)\n<Point2:1> *False* (The student does not mention the unidirectional flow of the Waterfall model.)\n<Point3:1> *True* (The student accurately points out the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach.)\n<Point5:1> *True* (The student mentions the use of iterations in Agile development.)\n<Point6:1> *True* (The student highlights the importance of feedback and adaptability in Agile.)\n<Point7:1> *True* (The student states that Agile allows for changes at any stage.) \n\n\n"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies the Waterfall model as linear and sequential.)\n<Point2:1> *True* (The student accurately describes the Waterfall model's unidirectional flow.)\n<Point3:1> *True* (The student mentions the difficulty of implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach.)\n<Point5:1> *True* (The student accurately describes Agile development in iterations.)\n<Point6:1> *True* (The student highlights Agile's emphasis on feedback and adaptability.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes throughout the development process.) \n\n\n"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class.)\n<Point3:1> *False* (The student does not mention the unifying factor or purpose of the class.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student accurately describes low cohesion as elements being loosely related and lacking a clear purpose.) \n\n\n"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student acknowledges the relationship strength between data and methods within a class.)\n<Point3:1> *True* (The student mentions the unifying factor or purpose of a class.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student correctly defines low cohesion as loosely related elements lacking a clear purpose.) \n\n\n"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class.)\n<Point3:1> *True* (The student touches upon the unifying factor or purpose of a class.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student correctly defines low cohesion as elements being loosely related and lacking a unified purpose.) \n\n\n"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student accurately describes cohesion as measuring the relationship strength between data and methods.)\n\n<Point3:1> *True* (The student correctly identifies cohesion as relating to the unifying purpose of a class.)\n\n<Point4:2> *True* (The student accurately explains that high cohesion means elements are closely related and work towards a common goal.)\n\n<Point5:2> *True* (The student correctly describes low cohesion as elements being loosely related and lacking a clear purpose.) \n\n\n"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student mentions the relationship strength between data and methods within a class.)\n<Point3:1> *True* (The student touches upon the unifying factor or purpose the class serves.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student correctly explains low cohesion as elements being loosely related and lacking a clear purpose.) \n\n\n"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class.)\n\n<Point3:1> *True* (The student touches upon the unifying factor or purpose of a class.)\n\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n\n<Point5:2> *True* (The student correctly explains low cohesion as loosely related elements lacking a clear purpose.) \n\n\n"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student accurately defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student correctly identifies the relationship strength between data and methods as part of cohesion.)\n<Point3:1> *True* (The student acknowledges the unifying factor or purpose of a class as a component of cohesion.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student correctly explains low cohesion as loosely related elements lacking a clear purpose.) \n\n\n"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student accurately states that cohesion measures the relationship strength between data and methods.)\n<Point3:1> *True* (The student correctly identifies cohesion as a unifying factor or purpose for a class.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student correctly describes low cohesion as elements lacking a clear relationship and purpose.) \n\n\n"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class, aligning with the reference answer.)\n<Point3:1> *False* (The student does not explicitly mention the unifying factor or purpose the class serves.)\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student correctly explains low cohesion as loosely related elements lacking a clear purpose.) \n\n\n"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship strength between data and methods within a class.)\n\n<Point3:1> *True* (The student touches upon the unifying factor or purpose served by the class.)\n\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n\n<Point5:2> *True* (The student correctly explains low cohesion as loosely related elements with unclear or multiple purposes.) \n\n\n"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student accurately defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student correctly states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student understands that internal milestones indicate the team is on the right path.)\n\n<Point4:2> *True* (The student identifies assessing development progress as a use of internal milestones.)\n\n<Point5:1> *True* (The student correctly states that milestones can be used to identify issues and risks.)\n\n<Point6:1> *True* (The student accurately mentions making adjustments to the project plan as a use of milestones.)\n\n<Point7:1> *True* (The student provides the example of completing a specific feature as a milestone.)\n\n<Point8:1> *True* (The student lists testing and debugging the code as a milestone example.)\n\n<Point9:1> *True* (The student correctly gives reaching a certain level of performance or functionality as a milestone example.) \n\n\n"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *False* (The student does not mention that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student states that milestones help determine if engineers are on track.)\n\n<Point4:2> *True* (The student mentions that milestones help assess the development team's progress.)\n\n<Point5:1> *True* (The student states that milestones help identify problems.)\n\n<Point6:1> *True* (The student mentions that milestones can lead to changes in the project plan.)\n\n<Point7:1> *True* (The student provides the example of finishing a feature as a milestone.)\n\n<Point8:1> *True* (The student provides the example of testing and debugging as a milestone.)\n\n<Point9:1> *True* (The student provides the example of achieving a specific performance level as a milestone.) \n\n\n"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable indicators of progress within the development process.)\n\n<Point2:1> *True* (The student states that internal milestones are standard procedures.)\n\n<Point3:1> *True* (The student accurately describes that milestones show engineers are on track.)\n\n<Point4:2> *True* (The student mentions assessing the development team's progress as a use of milestones.)\n\n<Point5:1> *True* (The student identifies identifying issues and risks as a use of milestones.)\n\n<Point6:1> *True* (The student states that milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides the example of completing a specific feature.)\n\n<Point8:1> *True* (The student provides the example of testing and debugging the code.)\n\n<Point9:1> *True* (The student provides the example of reaching a certain level of performance or functionality.) \n\n\n"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student states that internal milestones are standard procedures.)\n\n<Point3:1> *True* (The student accurately describes internal milestones as indicators that engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions assessing the development team's progress as a use of internal milestones.)\n\n<Point5:1> *True* (The student correctly states that internal milestones can be used to identify issues and risks.)\n\n<Point6:1> *True* (The student accurately describes the use of internal milestones for making adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides the example of completing a specific feature as a milestone.)\n\n<Point8:1> *True* (The student lists testing and debugging the code as a potential milestone.)\n\n<Point9:1> *True* (The student mentions achieving a specific level of performance or functionality as a milestone.) \n\n\n"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable attributes of the development process.)\n\n<Point2:1> *True* (The student states that internal milestones are standard procedures.)\n\n<Point3:1> *True* (The student accurately describes internal milestones as indicators of progress.)\n\n<Point4:2> *True* (The student mentions assessing team progress as a benefit of internal milestones.)\n\n<Point5:1> *True* (The student identifies identifying issues as a use case for internal milestones.)\n\n<Point6:1> *True* (The student states that internal milestones can be used to make adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides the example of completing a feature as a type of milestone.)\n\n<Point8:1> *True* (The student lists debugging as a milestone-related task.)\n\n<Point9:1> *True* (The student mentions reaching a performance goal as a milestone example.) \n\n\n"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student accurately describes internal milestones as indicators that the engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions that internal milestones can be used to assess the development team's progress.)\n\n<Point5:1> *True* (The student states that internal milestones can help identify issues.)\n\n<Point6:1> *True* (The student correctly indicates that internal milestones can be used to make adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides the example of completing a specific feature.)\n\n<Point8:1> *True* (The student provides the example of testing the code.)\n\n<Point9:1> *True* (The student provides the example of reaching a specific performance level.) \n\n\n"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student accurately describes internal milestones as indicators that engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions that internal milestones are used to assess the development team's progress.)\n\n<Point5:1> *True* (The student states that internal milestones can be used to identify issues and risks.)\n\n<Point6:1> *True* (The student correctly indicates that internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides an example of a milestone related to completing a specific feature.)\n\n<Point8:1> *True* (The student provides an example of a milestone related to testing and debugging the code.)\n\n<Point9:1> *True* (The student provides an example of a milestone related to reaching a certain level of performance or functionality.) \n\n\n"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student accurately describes internal milestones as indicators that the engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions assessing the development team's progress as a use case for internal milestones.)\n\n<Point5:1> *True* (The student correctly identifies identifying issues and risks as a function of internal milestones.)\n\n<Point6:1> *True* (The student states that internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides the example of completing a specific feature as a type of internal milestone.)\n\n<Point8:1> *True* (The student lists testing and debugging as an example of an internal milestone.)\n\n<Point9:1> *True* (The student mentions achieving a performance goal as a type of internal milestone.) \n\n\n"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable attributes that indicate progress.)\n\n<Point2:1> *True* (The student states that internal milestones are systematic procedures.)\n\n<Point3:1> *True* (The student mentions that milestones show engineers are on the right path.)\n\n<Point4:2> *True* (The student lists assessing progress as a use of internal milestones.)\n\n<Point5:1> *True* (The student lists identifying issues and risks as a use of internal milestones.)\n\n<Point6:1> *True* (The student lists making adjustments to the project plan as a use of internal milestones.)\n\n<Point7:1> *True* (The student provides the example of completing a feature.)\n\n<Point8:1> *True* (The student provides the example of testing and debugging.)\n\n<Point9:1> *True* (The student provides the example of reaching a performance level.) \n\n\n"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student accurately describes internal milestones as indicators that engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions assessing development team progress as a use of internal milestones.)\n\n<Point5:1> *True* (The student identifies identifying issues and risks as a function of internal milestones.)\n\n<Point6:1> *True* (The student states that internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides the example of completing a specific feature as an internal milestone.)\n\n<Point8:1> *True* (The student provides the example of testing and debugging the code as an internal milestone.)\n\n<Point9:1> *True* (The student provides the example of reaching a certain level of performance or functionality as an internal milestone.) \n\n\n"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student lists the key development cycles involved in RAD.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student mentions the importance of user and stakeholder feedback for improvement.) \n\n\n"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately states that RAD prioritizes development over extensive planning.)\n\n<Point3:1> *True* (The student mentions the presence of development cycles including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student highlights the focus on delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student emphasizes the importance of user feedback for refining the software.) \n\n\n"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student lists the key development cycles involved in RAD.)\n\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student emphasizes the importance of user and stakeholder feedback in RAD.) \n\n\n"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student mentions the series of smaller development cycles with planning, design, construction, and testing.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student correctly points out the incorporation of feedback from users and stakeholders.) \n\n\n"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD prioritizes development over extensive planning.)\n<Point3:1> *True* (The student mentions the cyclical nature of RAD, including planning, design, construction, and testing.)\n<Point4:1> *True* (The student highlights the emphasis on delivering functional software promptly to clients and stakeholders.)\n<Point5:2> *True* (The student correctly points out the importance of user feedback in refining the software.) \n\n\n"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student lists the smaller development cycles involved in RAD.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student emphasizes the importance of user feedback in refining the software.) \n\n\n"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the RAD model as iterative and prototyping-based.)\n\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student mentions the series of development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student emphasizes the incorporation of feedback from end-users and stakeholders for refinement.) \n\n\n"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately states that RAD emphasizes less time on planning and more on development.\n<Point3:1> *True* The student lists the smaller development cycles involved in RAD.\n<Point4:1> *True* The student highlights the focus on quick delivery of functional software.\n<Point5:2> *True* The student correctly mentions the incorporation of feedback from end-users and stakeholders. \n\n\n"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student mentions the smaller development cycles including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student emphasizes the importance of feedback from end-users for improvement.) \n\n\n"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student mentions the series of smaller development cycles, including planning, design, construction, and testing.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student correctly points out the use of feedback from end-users and stakeholders for refinement.) \n\n\n"
    },
    "50": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing are concepts in programming languages related to how types of variables are handled. Weak typing checks the types of variables at run time, which means type errors can occur when the program is running. Strong typing checks the types at compile time, catching errors before the program runs. Strong typing is often recommended because it helps reduce bugs by catching errors early. However, it can make the code more rigid and harder to modify. Ultimately, the choice depends on the project requirements, such as whether flexibility or early error detection is more important.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing as checking types at runtime.)\n<Point2:1> *True* (The student correctly defines strong typing as checking types at compile time.)\n<Point3:1> *True* (The student correctly states that strong typing is often recommended due to its bug-reducing capabilities.)\n<Point4:1> *True* (The student accurately points out that strong typing can make code more rigid.)\n<Point5:1> *True* (The student correctly concludes that the choice depends on project requirements.) \n\n\n"
    },
    "51": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Weak typing allows for more flexibility by checking variable types at run time, which can sometimes lead to type errors during execution. On the other hand, strong typing checks variable types at compile time, which helps catch errors early and reduces bugs. Strong typing is generally recommended for its robustness, although it can make the code less flexible and harder to change. ",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly describes weak typing as checking types at runtime.)\n<Point2:1> *True* (The student correctly describes strong typing as checking types at compile time.)\n<Point3:1> *True* (The student correctly states that strong typing is generally recommended due to its bug-reducing qualities.)\n<Point4:1> *True* (The student correctly points out that strong typing can make code less flexible.)\n<Point5:1> *True* (The student acknowledges that the choice depends on project requirements.) \n\n\n"
    },
    "52": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing involves checking the types of variables at compile time, while weak typing checks them at run time. Strong typing is preferred because it reduces the chance of bugs by catching errors during compilation. However, strong typing can also make the code more rigid and harder to modify. Whether to use strong or weak typing depends on the project requirements, such as the need for flexibility versus the need for early error detection.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True*  \n<Point2:1> *True*  \n<Point3:1> *True*  \n<Point4:1> *True*  \n<Point5:1> *True*  \n"
    },
    "53": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Weak typing checks the types of variables at run time, allowing more flexibility but also the potential for more runtime errors. Strong typing, on the other hand, checks types at compile time, which helps reduce bugs by catching errors early. This approach is generally recommended for its reliability. However, strong typing can make the code less flexible and harder to modify. The choice between strong and weak typing should be based on the specific needs and requirements of the project.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing)\n<Point2:1> *True* (The student correctly defines strong typing)\n<Point3:1> *True* (The student correctly states that strong typing is generally recommended)\n<Point4:1> *True* (The student correctly points out a potential drawback of strong typing)\n<Point5:1> *True* (The student correctly concludes that the choice depends on project requirements) \n\n\n"
    },
    "54": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "In programming, weak typing means that the types of variables are checked at run time, which allows for more flexibility but can lead to runtime errors. Strong typing checks types at compile time, reducing bugs by catching errors before the program runs. Strong typing is generally recommended because it helps prevent bugs, although it can make the code more rigid and harder to change. ",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing as checking types at runtime.)\n<Point2:1> *True* (The student correctly defines strong typing as checking types at compile time.)\n<Point3:1> *True* (The student correctly states that strong typing is generally recommended due to its bug-prevention capabilities.)\n<Point4:1> *True* (The student correctly points out that strong typing can make code more rigid and harder to modify.)\n<Point5:1> *True* (The student acknowledges that the choice depends on project requirements.) \n\n\n"
    },
    "55": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing refer to how strictly a programming language enforces type rules. Weak typing checks the types of variables at runtime, allowing for more flexibility but potentially leading to more bugs. On the other hand, strong typing checks the types of variables at compile time, which can help reduce bugs but can make the code more rigid and harder to modify. While strong typing might seem restrictive, it does not mean that it is not beneficial for reducing bugs. However, the decision ultimately depends on your project requirements. If flexibility is a priority and the project can tolerate potential runtime errors, weak typing might be suitable. Conversely, for projects where minimizing bugs is critical, strong typing would be the recommended approach.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing as checking types at runtime.)\n\n<Point2:1> *True* (The student correctly defines strong typing as checking types at compile time.)\n\n<Point3:1> *True* (The student correctly states that strong typing is recommended due to reduced bugs.)\n\n<Point4:1> *True* (The student correctly points out that strong typing can make code more rigid.)\n\n<Point5:1> *True* (The student correctly concludes that the choice depends on project requirements.) \n\n\n"
    },
    "56": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing are concepts related to how strictly a programming language enforces type rules. Weak typing checks variable types at runtime, while strong typing checks variable types at compile time. Strong typing is generally recommended because it reduces bugs, but it can also make the code more rigid and harder to modify. The choice between strong and weak typing depends on your project requirements and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing as checking variable types at runtime.)\n<Point2:1> *True* (The student correctly defines strong typing as checking variable types at compile time.)\n<Point3:1> *True* (The student correctly states that strong typing is generally recommended due to reduced bugs.)\n<Point4:1> *True* (The student correctly points out that strong typing can make code more rigid and harder to modify.)\n<Point5:1> *True* (The student correctly concludes that the choice depends on project requirements.) \n\n\n"
    },
    "57": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is considered a bad idea because it cannot be used when exception types are not known. If no specific variables are defined, the exception can be hard to read. Additionally, it can lead to unexpected behavior if the code is modified later and new exceptions are introduced, as they may also be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies that catch (exception) cannot be used when exception types are unknown. \n<Point2:1> *True* The student accurately states that the exception can be hard to read if no specific variables are defined.\n<Point3:1> *True* The student acknowledges that catch (exception) can lead to unexpected behavior.\n<Point4:1> *True* The student mentions that code modification can lead to unexpected behavior.\n<Point5:1> *True* The student states that new exceptions can be introduced.\n<Point6:1> *True* The student explains that new exceptions might be handled inappropriately. \n\n\n"
    },
    "58": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "I think using catch (exception) is not a good idea because it cannot be used when the types of exceptions are unknown. Additionally, it makes it difficult to read the exception if no specific variables are defined. This approach can also lead to unexpected behavior, especially if the code is modified later and new exceptions are introduced. These new exceptions might be caught by the general catch (exception) block and handled incorrectly.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student correctly states that catch (exception) cannot be used when exception types are unknown.)\n\n<Point2:1> *True* (The student accurately explains that catching a general exception without specific variables makes it harder to read.)\n\n<Point3:1> *True* (The student acknowledges that catching a general exception can lead to unexpected behavior.)\n\n<Point4:1> *True* (The student mentions that code modifications can lead to unexpected behavior.)\n\n<Point5:1> *True* (The student states that new exceptions introduced can cause issues.)\n\n<Point6:1> *True* (The student explains that new exceptions might be handled incorrectly due to the general catch block.) \n\n\n"
    },
    "59": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is a bad idea for several reasons. It cannot be used effectively when exception types are not known. Moreover, if there are no variables defined, the exception becomes hard to read. This practice can also lead to unexpected behavior. When the code is modified later and new exceptions are introduced, they may be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student correctly states that catch (exception) is ineffective when exception types are unknown.)\n\n<Point2:1> *True* (The student accurately points out that the lack of defined variables makes the exception harder to read.)\n\n<Point3:1> *True* (The student acknowledges that catch (exception) can lead to unexpected behavior.)\n\n<Point4:1> *True* (The student mentions that code modifications can lead to issues.)\n\n<Point5:1> *True* (The student states that new exceptions can be introduced.)\n\n<Point6:1> *True* (The student explains that new exceptions might be handled inappropriately due to the catch (exception) block.) \n\n\n"
    },
    "60": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is not recommended because it cannot be used when the types of exceptions are not known. This makes the exception hard to read if no specific variables are defined. Additionally, it can lead to unexpected behavior if the code is modified later and new exceptions are introduced. These new exceptions might be caught by the catch (exception) block and handled incorrectly.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies that catch (exception) cannot be used when exception types are unknown. \n<Point2:1> *True* The student accurately states that catching a general exception can make the code harder to read if no specific variables are defined.\n<Point3:1> *True* The student acknowledges that catching a general exception can lead to unexpected behavior.\n<Point4:1> *True* The student mentions that code modifications can introduce new exceptions.\n<Point5:1> *True* The student recognizes that new exceptions might be caught by the general catch block.\n<Point6:1> *True* The student states that new exceptions might be handled incorrectly due to the general catch block. \n\n\n"
    },
    "61": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is generally discouraged because it cannot be used when exception types are not known. Additionally, if there are no variables defined, the exception is hard to read. This approach can lead to unexpected behavior if the code is modified later and new exceptions are introduced, as they may be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies that catch (exception) cannot be used when exception types are unknown. \n<Point2:1> *True* The student accurately states that the exception is hard to read if there are no variables defined.\n<Point3:1> *True* The student acknowledges that catch (exception) can lead to unexpected behavior.\n<Point4:1> *True* The student mentions that code modification can lead to unexpected behavior.\n<Point5:1> *True* The student states that new exceptions can be introduced.\n<Point6:1> *True* The student explains that new exceptions might be handled inappropriately. \n\n\n"
    },
    "62": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is generally a bad idea for several reasons. First, it cannot be used effectively when exception types are not known, making it difficult to handle specific error cases appropriately. This approach might lead to unexpected behavior, especially if the code is modified later and new exceptions are introduced; these new exceptions may also be caught by the generic catch (exception) block and handled inappropriately. Additionally, because no specific variables are defined, the exception is hard to read and debug. Thus, while it may seem convenient to use a general catch-all for exceptions, it does not necessarily mean that it will not lead to significant issues down the line.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies that catch (exception) is not suitable when exception types are unknown.)\n\n<Point2:1> *True* (The student explains that the lack of specific variables makes the exception harder to read and debug.)\n\n<Point3:1> *True* (The student mentions the potential for unexpected behavior due to the generic nature of the catch block.)\n\n<Point4:1> *True* (The student acknowledges that code modifications and new exceptions can lead to issues.)\n\n<Point5:1> *True* (The student states that new exceptions might be caught by the generic block.)\n\n<Point6:1> *True* (The student points out the risk of inappropriate handling of new exceptions due to the generic catch block.) \n\n\n"
    },
    "63": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is bad because it catches all exceptions, making it difficult to determine what actually went wrong. It can mask specific issues that need individual handling and can lead to unexpected behavior if new types of exceptions are introduced later. This approach makes the code less readable and harder to debug. Therefore, it is generally better to catch specific exceptions to ensure that the appropriate actions are taken for different error conditions.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:False>",
        "feedback": "<Point1:1> *False* (The student's answer does not mention the inability to use catch (exception) when exception types are unknown.)\n<Point2:1> *True* (The student mentions that catching all exceptions makes it difficult to determine the specific issue.)\n<Point3:1> *True* (The student states that catching all exceptions can lead to unexpected behavior.)\n<Point4:1> *True* (The student mentions that catching all exceptions can lead to issues if new exceptions are introduced.)\n<Point5:1> *True* (The student states that catching all exceptions can lead to issues if new exceptions are introduced.)\n<Point6:1> *True* (The student mentions that catching all exceptions can lead to inappropriate handling of new exceptions.) \n\n\n"
    },
    "64": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air software updates for cars will significantly impact our development process and costs. First, supporting the software for 25 years means we need long-term support mechanisms. Our development team must be prepared to maintain and update the software for an extended period. Additionally, network-connected cars are vulnerable to cyber-attacks, so we need to invest heavily in security measures to protect the software and passenger safety. Continuous updates require rigorous testing for every release, which will increase development costs. As the number of connected cars grows, our software must scale without compromising performance. While over-the-air updates are more cost-effective than service visits, maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the need for long-term support mechanisms.)\n<Point2:1> *True* (The student acknowledges the need for a development process that accommodates software maintenance and updates.)\n<Point3:1> *True* (The student mentions the need for the development team to be prepared for extended maintenance.)\n<Point4:1> *True* (The student recognizes the vulnerability of network-connected cars to cyber-attacks.)\n<Point5:1> *True* (The student states the need to invest in security measures.)\n<Point6:1> *True* (The student mentions the importance of protecting the software from malicious attacks.)\n<Point7:1> *True* (The student understands that the software will be continuously updated.)\n<Point8:1> *True* (The student emphasizes the need for rigorous testing of every new release.)\n<Point9:1> *True* (The student states that testing must be performed for every new release.)\n<Point10:1> *True* (The student acknowledges that continuous testing will increase development costs.)\n<Point11:1> *True* (The student recognizes the increasing number of connected cars.)\n<Point12:1> *True* (The student highlights the need for scalability without performance compromise.)\n<Point13:1> *True* (The student states that the development process must account for scalability.)\n<Point14:1> *True* (The student correctly identifies over-the-air updates as more cost-effective than service visits.)\n<Point15:1> *True* (The student acknowledges that long-term maintenance will increase overall costs.) \n\n\n"
    },
    "65": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Providing over-the-air updates for car software will affect our development process and costs in several ways. We need to support the software for 25 years, which requires long-term support mechanisms. Our team must be prepared to maintain and update the software. Security is a major concern, as network-connected cars are prone to cyber-attacks. We must invest in security measures to protect the software. Each update will require rigorous testing, increasing development costs. Additionally, the software must scale as the number of connected cars grows. While over-the-air updates are cost-effective, maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the need for long-term support mechanisms.)\n<Point2:1> *True* (The student acknowledges the need for a development team prepared for software maintenance and updates.)\n<Point3:1> *True* (The student mentions the need for security measures to protect the software.)\n<Point4:1> *True* (The student recognizes the risk of cyber-attacks on network-connected cars.)\n<Point5:1> *True* (The student states that each update requires rigorous testing.)\n<Point6:1> *True* (The student acknowledges the increased development costs due to testing.)\n<Point7:1> *True* (The student understands the need for scalability as the number of connected cars increases.)\n<Point8:1> *True* (The student recognizes the cost-effectiveness of over-the-air updates.)\n<Point9:1> *True* (The student acknowledges the increased overall cost of maintaining the software for 25 years.) \n<Point10:1> *True* (The student correctly identifies the need for scalability in the development process.)\n<Point11:1> *True* (The student understands the need for scalability as the number of connected cars increases.)\n<Point12:1> *True* (The student recognizes the cost-effectiveness of over-the-air updates.)\n<Point13:1> *True* (The student acknowledges the increased overall cost of maintaining the software for 25 years.)\n<Point14:1> *True* (The student correctly identifies the need for scalability in the development process.)\n<Point15:1> *True* (The student understands the need for scalability as the number of connected cars increases.)\n\n\n\n"
    },
    "66": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The over-the-air software update strategy for cars has several implications for our development process and costs. We need to provide long-term support for 25 years, which means our development team must be ready to maintain and update the software over this period. Network-connected cars are vulnerable to cyber-attacks, so we need to invest in robust security measures. Continuous updates require rigorous testing to ensure software quality, which will increase development costs. Our software must also scale as more cars become connected. Although over-the-air updates are more cost-effective than service visits, maintaining the software for 25 years will result in higher overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the need for long-term support mechanisms.)\n<Point2:1> *True* (The student acknowledges the need for the development team to accommodate software maintenance and updates.)\n<Point3:1> *True* (The student understands the need for security measures to protect the software from malicious attacks.)\n<Point4:1> *True* (The student recognizes the vulnerability of network-connected cars to cyber-attacks.)\n<Point5:1> *True* (The student highlights the importance of rigorous testing for every new release.)\n<Point6:1> *True* (The student correctly states that continuous updates will increase development costs.)\n<Point7:1> *True* (The student understands the need for the software to scale as more cars become connected.)\n<Point8:1> *True* (The student recognizes that the development process must account for scalability.)\n<Point9:1> *True* (The student correctly states that over-the-air updates are more cost-effective than service visits.)\n<Point10:1> *True* (The student acknowledges that maintaining the software for 25 years will result in higher overall costs.) \n<Point11:1> *True* (The student correctly identifies the need for long-term support mechanisms.)\n<Point12:1> *True* (The student acknowledges the need for the development team to accommodate software maintenance and updates.)\n<Point13:1> *True* (The student understands the need for security measures to protect the software from malicious attacks.)\n<Point14:1> *True* (The student recognizes the vulnerability of network-connected cars to cyber-attacks.)\n<Point15:1> *True* (The student highlights the importance of rigorous testing for every new release.)\n\n\n\n"
    },
    "67": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air software updates will have several effects on our development process and costs. Supporting the software for 25 years requires long-term support mechanisms. Our development team must maintain and update the software over this period. Cybersecurity is crucial as network-connected cars are vulnerable to attacks. We need to invest in security measures. Continuous updates need rigorous testing, increasing development costs. The software must scale as the number of connected cars grows. Over-the-air updates are cost-effective compared to service visits, but maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the need for long-term support mechanisms.)\n<Point2:1> *True* (The student acknowledges the need for the development team to accommodate software maintenance and updates.)\n<Point3:1> *True* (The student understands the need for security measures to protect the software from malicious attacks.)\n<Point4:1> *True* (The student recognizes the vulnerability of network-connected cars to cyber-attacks.)\n<Point5:1> *True* (The student highlights the importance of rigorous testing for every new release.)\n<Point6:1> *True* (The student understands that continuous updates will increase development costs.)\n<Point7:1> *True* (The student recognizes the need for the software to scale as the number of connected cars grows.)\n<Point8:1> *True* (The student acknowledges that the development process must account for scalability.)\n<Point9:1> *True* (The student correctly states that over-the-air updates are cost-effective compared to service visits.)\n<Point10:1> *True* (The student understands that maintaining the software for 25 years will increase overall costs.) \n<Point11:1> *True* (The student correctly identifies the need for long-term support mechanisms.)\n<Point12:1> *True* (The student acknowledges the need for the development team to accommodate software maintenance and updates.)\n<Point13:1> *True* (The student understands the need for security measures to protect the software from malicious attacks.)\n<Point14:1> *True* (The student recognizes the vulnerability of network-connected cars to cyber-attacks.)\n<Point15:1> *True* (The student highlights the importance of rigorous testing for every new release.)\n\n\n\n"
    },
    "68": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The over-the-air software update strategy for cars will impact our development process and costs. Providing long-term support for 25 years requires our development team to maintain and update the software. Network-connected cars are prone to cyber-attacks, so we need to invest in security measures. Each update requires rigorous testing to ensure quality, increasing development costs. As more cars become connected, the software must scale effectively. Over-the-air updates are cost-effective, but maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:True>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student acknowledges the need for long-term support)\n<Point2:1> *True* (The student mentions the need to maintain and update the software)\n<Point3:1> *False* (The student doesn't specifically mention extending the development team's timeframe)\n<Point4:1> *True* (The student recognizes the vulnerability of network-connected cars to cyberattacks)\n<Point5:1> *True* (The student states the need to invest in security measures)\n<Point6:1> *True* (The student mentions protecting the software from malicious attacks)\n<Point7:1> *True* (The student acknowledges the continuous updates over the air)\n<Point8:1> *True* (The student emphasizes the importance of rigorous testing)\n<Point9:1> *True* (The student states that testing is needed for every new release)\n<Point10:1> *True* (The student mentions increased development costs due to testing)\n<Point11:1> *True* (The student recognizes the increasing number of connected cars)\n<Point12:1> *True* (The student highlights the need for scalability)\n<Point13:1> *True* (The student states that the development process must account for scalability)\n<Point14:1> *True* (The student acknowledges the cost-effectiveness of over-the-air updates)\n<Point15:1> *True* (The student mentions the increased overall cost of long-term maintenance) \n\n\n"
    },
    "69": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The decision to provide over-the-air software updates for cars will impact our development process and costs in multiple ways. While it is true that long-term support mechanisms are required for a 25-year maintenance period, it does not necessarily mean that the initial development costs will not remain high throughout. Investing in robust security measures is essential to protect against cyber-attacks; however, this upfront cost can lead to long-term savings by preventing costly security breaches. Rigorous testing for each update will indeed increase costs, but it ensures software reliability and safety, potentially reducing expensive recalls or fixes later on. Therefore, although the development costs may seem higher initially, the long-term benefits, such as improved security and reduced service visits, could ultimately offset these expenses.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:True>,<Point10:False>,<Point11:False>,<Point12:False>,<Point13:False>,<Point14:False>,<Point15:False>",
        "feedback": "<Point1:1> *False* (The student does not explicitly mention the need for long-term support mechanisms in their answer.)\n\n<Point2:1> *False* (The student does not explicitly mention the need for long-term support mechanisms in their answer.)\n\n<Point3:1> *False* (The student does not explicitly mention the need to extend the development team's time frame.)\n\n<Point4:1> *True* (The student acknowledges the increased risk of cyber-attacks on network-connected cars.)\n\n<Point5:1> *True* (The student mentions the need to invest in robust security measures.)\n\n<Point6:1> *True* (The student states that investing in security measures can prevent costly security breaches.)\n\n<Point7:1> *True* (The student acknowledges the need for continuous updates and testing.)\n\n<Point8:1> *True* (The student emphasizes the importance of rigorous testing for each update.)\n\n<Point9:1> *False* (The student does not explicitly mention testing for every new release.)\n\n<Point10:1> *False* (The student does not explicitly mention the potential for increased development costs due to testing.)\n\n<Point11:1> *False* (The student does not explicitly mention the increasing number of cars with network connections.)\n\n<Point12:1> *False* (The student does not explicitly mention the need for scalability.)\n\n<Point13:1> *False* (The student does not explicitly mention the need to account for scalability in the development process.)\n\n<Point14:1> *True* (The student acknowledges that over-the-air updates are more cost-effective than service visits.)\n\n<Point15:1> *True* (The student acknowledges that developing and maintaining software for 25 years will increase overall costs.) \n\n\n\n"
    },
    "70": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air updates for car software are significant. We need to do stuff for long-term support and ensure security measures. Testing updates is important. The software should work well as more cars get connected. Costs might be high, but it could be worth it.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:False>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:False>,<Point10:False>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:False>,<Point15:False>",
        "feedback": "<Point1:1> *False* (The student doesn't explicitly mention the need for long-term support mechanisms in their answer.)\n<Point2:1> *False* (The student doesn't explicitly mention the need for long-term support mechanisms in their answer.)\n<Point3:1> *False* (The student doesn't explicitly mention extending the development team's time frame.)\n<Point4:1> *True* (The student acknowledges the vulnerability of network-connected cars to cyber-attacks.)\n<Point5:1> *False* (The student doesn't explicitly mention investing in security measures.)\n<Point6:1> *False* (The student doesn't explicitly mention protecting the software from malicious attacks.)\n<Point7:1> *True* (The student mentions the importance of testing updates.)\n<Point8:1> *True* (The student mentions the importance of testing updates.)\n<Point9:1> *False* (The student doesn't explicitly mention testing every new release.)\n<Point10:1> *False* (The student only vaguely mentions increased costs without specifically linking it to testing.)\n<Point11:1> *True* (The student acknowledges the need for scalability as more cars connect.)\n<Point12:1> *True* (The student acknowledges the need for the software to work well as more cars connect.)\n<Point13:1> *False* (The student doesn't explicitly mention the development process needing to account for scalability.)\n<Point14:1> *True* (The student mentions that over-the-air updates are more cost-effective than service visits.)\n<Point15:1> *True* (The student acknowledges that developing and maintaining the software for 25 years will increase costs.) \n\n\n\n"
    }
}