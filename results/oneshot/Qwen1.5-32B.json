{
    "0": {
        "topic": "Algorithms",
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "referenceAnswer": "In the worst case, the time complexity of QuickSort is O(n\u00b2), where n is the number of elements in the array. This occurs when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "feedback": "1. **Final Score of the Student's Answer:** 0 - 25 - 25 - 0 = 50\n2. **Positive Feedback:** The student correctly mentions that QuickSort involves dividing the list into two halves, which is a fundamental aspect of the algorithm.\n3. **Deduction Reason:** Accuracy (25 points deducted) - The student incorrectly states that the worst-case time complexity is O(n log n), while the correct value is O(n\u00b2).\n4. **Deduction Reason:** Completeness (25 points deducted) - The answer fails to mention the condition under which the worst-case complexity occurs (i.e., consistent selection of the smallest or largest element as the pivot)."
    },
    "1": {
        "topic": "Data Structures",
        "question": "Explain how a hash table works.",
        "referenceAnswer": "A hash table stores key-value pairs. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 10 - 20 - 15 = 55\n2. **Positive Feedback:** The student correctly identifies that a hash table is an array used for storing data and employs keys for indexing. This shows an understanding of the basic concept.\n3. **Deduction Reason:** Accuracy (10 points deducted) - The student's answer omits the crucial aspect of a hash function being used to compute the index, which is a fundamental part of how a hash table operates.\n4. **Deduction Reason:** Completeness (20 points deducted) - The answer does not mention the use of a hash function or the concept of buckets/slots, which are essential components of a hash table's design.\n5. **Deduction Reason:** Completeness (15 points deducted) - The student fails to address collision resolution, which is a critical aspect of how hash tables handle situations when multiple keys map to the same index."
    },
    "2": {
        "topic": "System Design",
        "question": "Describe the basic components of a distributed system.",
        "referenceAnswer": "A distributed system consists of multiple software components located on different networked computers, which communicate and coordinate their actions by passing messages. The components interact with each other in order to achieve a common goal. Key components include servers, clients, and the communication infrastructure.",
        "studentAnswer": "Distributed systems are just multiple computers connected to a server that manages them.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 10 - 25 - 10 = 55\n2. **Positive Feedback:** The student correctly recognizes that a distributed system involves multiple computers connected together. There is an understanding that there is some central management aspect.\n3. **Deduction Reason:** Relevance (10 points deducted) - The answer doesn't mention the individual components like servers, clients, and the communication infrastructure, which are essential elements of a distributed system.\n4. **Deduction Reason:** Accuracy (25 points deducted) - The statement \"manages them\" implies a centralized control, whereas a distributed system typically has decentralized coordination and communication among the components.\n5. **Deduction Reason:** Completeness (10 points deducted) - The answer omits the concept of message passing and how components communicate and coordinate their actions, which is a fundamental aspect of distributed systems."
    },
    "3": {
        "topic": "Software Engineering",
        "question": "What is refactoring in software development?",
        "referenceAnswer": "Refactoring is the process of restructuring existing computer code\u2014changing the factoring\u2014without changing its external behavior. It is done to improve nonfunctional attributes of the software, such as readability, reduced complexity, or improving maintainability and scalability.",
        "studentAnswer": "Refactoring is when you write new functions to add more features to the software.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 25 - 0 - 25 = 50\n2. **Positive Feedback:** The student understands that refactoring involves modifying the code, which is a correct observation, even though the focus is not entirely accurate.\n3. **Deduction Reason:** Relevance (25 points deducted) - The student's answer does not convey the main purpose of refactoring, which is to improve the internal structure of the code without affecting its external behavior. Instead, it focuses on adding new functions for more features, which is a different concept called \"extending functionality.\"\n4. **Deduction Reason:** Clarity (25 points deducted) - The answer could better explain the goal of refactoring, such as enhancing readability or maintainability, rather than describing it as simply writing new functions for additional features."
    }
}