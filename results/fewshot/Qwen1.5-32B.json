{
    "0": {
        "topic": "Algorithms",
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "referenceAnswer": "In the worst case, the time complexity of QuickSort is O(n\u00b2), where n is the number of elements in the array. This occurs when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 25 - 25 - 25 = 25\n2. **Positive Feedback:** The student correctly mentions that QuickSort involves dividing the list into two halves, which is a fundamental aspect of the algorithm.\n3. **Deduction Reason:** Accuracy (25 points deducted) - The reference answer states that the worst-case time complexity is O(n\u00b2), while the student answer incorrectly gives it as O(n log n).\n4. **Deduction Reason:** Completeness (25 points deducted) - The student's answer does not mention the condition under which the worst-case complexity occurs (i.e., consistent selection of the smallest or largest element as the pivot).\n5. **Deduction Reason:** Clarity (25 points deducted) - The explanation would be clearer if it specified that the average and best-case complexities are O(n log n), and then accurately described the worst-case scenario."
    },
    "1": {
        "topic": "Data Structures",
        "question": "Explain how a hash table works.",
        "referenceAnswer": "A hash table stores key-value pairs. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 15 - 25 - 15 - 25 = 20\n2. **Positive Feedback:** The student correctly recognizes that a hash table is an array-like structure that uses keys for indexing.\n3. **Deduction Reason:** Relevance (15 points deducted) - The answer does not explain the core concept of a hash function and its role in mapping keys to array indices.\n4. **Deduction Reason:** Accuracy (25 points deducted) - The statement \"just an array that stores data\" oversimplifies the functionality of a hash table and does not convey the importance of the hash function and collisions resolution.\n5. **Deduction Reason:** Completeness (15 points deducted) - The answer omits the discussion of collision resolution strategies, which is a fundamental aspect of how hash tables work.\n6. **Deduction Reason:** Clarity (25 points deducted) - The explanation is incomplete and lacks clarity, leaving out important details that are necessary for a full understanding of how a hash table operates."
    },
    "2": {
        "topic": "System Design",
        "question": "Describe the basic components of a distributed system.",
        "referenceAnswer": "A distributed system consists of multiple software components located on different networked computers, which communicate and coordinate their actions by passing messages. The components interact with each other in order to achieve a common goal. Key components include servers, clients, and the communication infrastructure.",
        "studentAnswer": "Distributed systems are just multiple computers connected to a server that manages them.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 10 - 25 - 10 - 5 = 50\n2. **Positive Feedback:** The student recognizes that distributed systems involve multiple computers connected together.\n3. **Deduction Reason:** Relevance (10 points deducted) - The answer does not fully address all components of a distributed system, missing the mention of software components and client participation.\n4. **Deduction Reason:** Accuracy (25 points deducted) - The statement suggests that there's only one central server managing the entire system, which is an oversimplification as distributed systems can have multiple servers and different architectures.\n5. **Deduction Reason:** Completeness (10 points deducted) - The answer omits the communication infrastructure, which is a crucial aspect of how components in a distributed system interact.\n6. **Deduction Reason:** Clarity (5 points deducted) - The explanation could be clearer by specifying that the computers in a distributed system run software components that communicate with each other."
    },
    "3": {
        "topic": "Software Engineering",
        "question": "What is refactoring in software development?",
        "referenceAnswer": "Refactoring is the process of restructuring existing computer code\u2014changing the factoring\u2014without changing its external behavior. It is done to improve nonfunctional attributes of the software, such as readability, reduced complexity, or improving maintainability and scalability.",
        "studentAnswer": "Refactoring is when you write new functions to add more features to the software.",
        "feedback": "1. **Final Score of the Student's Answer:** 100 - 25 - 25 - 25 - 25 = 0\n2. **Positive Feedback:** The student understands that refactoring involves changes to the code, although the context is incorrect.\n3. **Deduction Reason:** Relevance (25 points deducted) - The answer does not accurately describe refactoring as a process focused on restructuring existing code rather than adding new functions.\n4. **Deduction Reason:** Accuracy (25 points deducted) - The student incorrectly states that refactoring is about adding new features through new functions, rather than maintaining external behavior.\n5. **Deduction Reason:** Completeness (25 points deducted) - The answer omits the key aspects of refactoring, such as improving nonfunctional attributes, readability, maintainability, and scalability.\n6. **Deduction Reason:** Clarity (25 points deducted) - The explanation conflates refactoring with feature addition, leading to confusion about the actual purpose and goals of refactoring."
    }
}