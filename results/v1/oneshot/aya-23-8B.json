{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *True* (The student correctly identified the worst-case time complexity of QuickSort, which is O(n^2).)\n\n<Point2:2> *True* (The student understands that unbalanced partitions contribute to the higher time complexity in the worst case.)\n\nYour understanding of QuickSort's time complexity is accurate, but it's important to recognize that the worst-case scenario is when the pivot elements create unbalanced partitions, resulting in a time complexity of O(n^2). Well done!"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions the basic structure of a hash table: storing key-value pairs.)\n\n<Point2:2> *True* (The student's answer correctly describes the hashing process and how it computes indices for efficient data retrieval.)\n\n<Point3:1> *True* (The student's answer mentions collision resolution, which is an important aspect of hash table design, even if they didn't elaborate on specific methods.)\n\nOverall, the student's answer is concise and covers the key points about how hash tables work, earning a full mark."
    }
}