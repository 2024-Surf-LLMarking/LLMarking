{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *False* (The student's answer incorrectly states that the worst-case time complexity is O(n log n), whereas the actual worst-case time complexity is O(n^2).)\n\n<Point2:2> *False* (The student's answer does not mention that the worst case occurs when the pivot elements are consistently the smallest or largest element, or when the array is already sorted.)\n\n...\n\n**Feedback completed. Given the grading criteria, the feedback for the student's answer to the question \"What is the time complexity of the QuickSort algorithm in the worst case?\" is:**\n\n<Point1:3> *False* (The student's answer incorrectly states that the worst-case time complexity is O(n log n), whereas the actual worst-case time complexity is O(n^2).)\n\n<Point2:2> *False* (The student's answer does not mention that the worst case occurs when the pivot elements are consistently the smallest or largest element, or when the array is already sorted.)"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2> *False* (The student's answer is partially correct. It mentions that a hash table is an array and uses keys for indexing, but it does not mention storing key-value pairs, which is a key aspect of a hash table as defined by the reference answer.)\n\n<Point2:2> *False* (The student's answer omits the crucial detail that a hash table uses a hash function to compute an index into an array of buckets or slots.)\n\n<Point3:1> *False* (The student's answer correctly mentions the use of keys and the array-like structure but does not elaborate on the forms of collision resolution that are typically employed in hash table designs.)\n\n**Note:** While the student answer touches on some aspects of how a hash table works, it does not meet the full mark criteria set by the reference answer. Each part of the reference answer, including the key aspects of storing key-value pairs, using a hash function for indexing, and acknowledging the presence of collision resolution, is essential to understanding how a hash table operates. The student's answer lacks detail and completeness in these critical areas, leading to the assessment of all points as false."
    }
}