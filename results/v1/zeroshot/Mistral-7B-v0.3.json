{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point:3> Induction: ...The student correctly states that QuickSort divides the list into two halves, which is a crucial aspect of the algorithm. However, the student erroneously mentions that the time complexity is O(n log n) in the worst case.\n<Point:0> Deduction: ...The student is incorrect about the time complexity in the worst case. The worst-case time complexity for QuickSort is O(n^2), not O(n log n). This happens when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.\nTotal score: 3/5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2> Induction: The student correctly states that a hash table stores key-value pairs.\n<Point2:0> Deduction: The student does not mention the use of a hash function to compute an index into an array of buckets or slots.\n<Point3:0> Deduction: The student does not discuss collision resolution, which is an essential aspect of hash table design.\nTotal score: 1/5 (Correctly identified that hash table stores key-value pairs but missed mentioning the hash function and collision resolution.)"
    }
}