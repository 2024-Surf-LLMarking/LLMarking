{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "Point1:3 The student's answer is incorrect regarding the worst-case time complexity of QuickSort. QuickSort does not have a time complexity of O(n log n) in the worst case; it is O(n^2) when the pivot elements are consistently the smallest or largest element in the array. However, they correctly mentioned that QuickSort divides the list into two halves. (Induction)\n\nPoint2:2 The student incorrectly identified the cause of the worst-case time complexity (O(n^2)). The cause is when the pivot elements are consistently the smallest or largest element in the array, not when the array is divided into two halves. This part of their answer is incorrect. (Deduction)\n\nFeedback:\nPoint1:3 (Induction - correct mention of dividing the list into two halves)\nPoint2:2 (Deduction - incorrect cause for worst-case time complexity)\nTotal score: 5/5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2> The student correctly describes a hash table as an array that stores data with keys for indexing.\n<Point2:0> The student didn't mention the hash function as a crucial component in how a hash table works. They should have explained that the hash function is used to compute an index into an array of buckets or slots, from which the desired value can be found.\n<Point2:1> The student partially addresses the use of an array of buckets, acknowledging the need for a structure to house the data, which is a correct aspect. However, they could have elaborated on the role of the hash function in deciding the location of the data within these buckets.\n<Point3:1> The student recognizes that collisions can occur, indicating understanding of the need for some form of collision resolution. They have touched upon a necessary aspect of hash table operation.\n\nTotal score: 2/5"
    }
}