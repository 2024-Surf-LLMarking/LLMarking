{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "- **The student did not correctly answer the time complexity of the QuickSort algorithm in the worst case.**\n<Point1:mark> *False* (The student incorrectly stated that QuickSort has a time complexity of O(n log n) in the worst case, while the actual worst case is O(n^2). Correct: \"QuickSort has a time complexity of O(n^2) in the worst case...\")\n\n- **The student did not mention or explain the scenario where the Quicksort algorithm has a worse time complexity.**\n<Point2:mark> *False* (The student didn't describe the condition under which QuickSort has a worse case time complexity, which is when the pivot elements are consistently the smallest or largest element. Should explain: \"... This occurs when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.\")\n\n..."
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "Point1: False (The student's answer should mention the use of a hash function and the concept of key-value pairs to score this point.)\nPoint2: False (The explanation lacks detail about how the hash function computes an index and how the desired value is retrieved from the bucket.)\nPoint3: False (The student's mention of collision resolution is not clear or detailed enough.)"
    }
}