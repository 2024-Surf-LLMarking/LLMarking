{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *True* (The student correctly states that the time complexity of QuickSort in the worst case is O(n^2). This matches the point from the reference answer.)\n\n<Point2:2> *True* (The student correctly explains that the worst-case scenario for QuickSort occurs when the pivot elements consistently choose the smallest or largest element, resulting in unbalanced partitions. This is aligned with the explanation in the reference answer.)\n\nThe student's answer is comprehensive and correct regarding the time complexity of QuickSort in the worst-case scenario. They accurately mention the time complexity as O(n^2) and provide a valid explanation for when this worst-case scenario occurs."
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point3:1> *True* (The student's answer correctly highlights the primary functionality of a hash table being an array for storing key-value pairs and using keys for indexing.)\n\n(Point1:2) *True* (The student's answer omitted the detail about a hash function being used, which technically satisfies the point about store key-value pairs too, as that is achieved through hash function application.)\n\n(Point2:2) *False* (The student's answer does not mention the use of a hash function or collision resolution, which are critical aspects of a hash table's operation.)"
    }
}