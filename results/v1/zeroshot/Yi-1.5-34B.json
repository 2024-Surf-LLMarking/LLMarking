{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1 :3> *False* (The student incorrectly states the time complexity of QuickSort in the worst case. It should be O(n^2), not O(n log n).)\n\n<Point2 :2> *False* (The student does not explain the reason for the worst-case scenario, which is when the pivot elements are consistently the smallest or largest element in the array, leading to unbalanced partitions.)"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1 :2> *False* (The student's answer does not fully explain how a hash table works. They did not mention the use of a hash function or how key-value pairs are stored.)\n\n<Point2 :2> *False* (The student's answer lacks detail about how a hash table uses a hash function to compute an index into an array of buckets. They only mentioned that it stores data with keys for indexing, but did not explain the process of indexing or the role of the hash function.)\n\n<Point3 :1> *False* (The student's answer does not address the concept of collision resolution, which is an important aspect of how hash tables operate.)\n\nThe student's answer is a basic, incomplete definition of a hash table. They did not explain the process of using a hash function, how it computes an index, or the concept of collision resolution. Further study is needed to understand how hash tables work."
    }
}