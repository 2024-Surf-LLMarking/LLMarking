{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:mark> *True* (reason: The student correctly identifies that QuickSort has a time complexity of O(n^2) in the worst case, as stated in the reference answer. They also correctly explain the reason behind this, which is that the algorithm consistently divides the list into two halves, leading to unbalanced partitions.)\n\n<Point2:mark> *False* (reason: The student's answer does not correctly identify the time complexity of QuickSort in the worst case. While they mention the O(n log n) time complexity, they do not explain the reason behind this.)"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:mark>*True* (Reason: The student's answer is very close to the reference answer. They correctly explain that a hash table stores key-value pairs and uses a hash function to compute an index into an array of buckets or slots. They also mention the ideal scenario of a unique bucket for each key, which is not always the case. However, they missed mentioning the collision resolution aspect, which is an important aspect of how hash tables work.)\n\n<Point2:mark>*False* (Reason: The student incorrectly states that a hash table is just an array that stores data and uses keys for indexing. While this is true, it is not the complete explanation of how a hash table works. The reference answer explains that a hash table uses a hash function to compute an index into an array of buckets or slots.)\n\n<Point3:1> *True* (Reason: The student mentions that collision resolution is important in hash tables. They correctly state that hash tables need to resolve collisions, which is an important aspect of how hash tables work.)"
    }
}