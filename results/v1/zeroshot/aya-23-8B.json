{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "QuickSort's time complexity:\n- **Induction:** <Point1: 2 marks> The student correctly identified that QuickSort's time complexity in the worst case is O(n^2). They understood that this occurs when the pivot elements are consistently the smallest or largest, leading to unbalanced partitions. This indicates a good grasp of the concept.\n- **Deduction:** <Point2: 0 marks> However, the student incorrectly mentioned that QuickSort divides the list into two halves, which is not the primary reason for the worst-case time complexity. This part of the answer is incorrect.\n\nTotal score: <Point1: 2/5>\n\nThe student demonstrated a solid understanding of the time complexity of QuickSort in the worst case. However, they needed extra clarification on the specific reason for the O(n^2) complexity and the concept of unbalanced partitions."
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "- <Point1:2> Induction: ... (Correct! The student understands that hash tables store key-value pairs.)\n- <Point2:2> Induction: Partial mark. (Almost there! The student gets the basic concept of using a hash function to compute an index, but they could elaborate on how this index is used to retrieve the value.)\n- <Point3:1> Induction: Partial mark. (The student understands the concept of collision resolution, but could provide a more detailed explanation of how hash tables handle collisions.)\n\nTotal score: 3.5/5\n\nThe student has a good understanding of the key concepts behind how hash tables work, but they could provide more depth and detail in their explanation, particularly regarding the handling of collisions and the retrieval process of values from the array of buckets."
    }
}