{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "QuickSort's time complexity in the worst case is <Point1:5>O(n^2)<Point1:5>, not O(n log n). <Point2:4>While QuickSort aims to optimize for the average case, it can degrade to O(n^2) in the worst case due to pivot selection.<Point2:4>\n\nHowever, the student's understanding of the algorithm's basic structure is correct, as\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u30ea\u30b9\u30c8\u3092\u534a\u5206\u306b\u5206\u5272\u3057\u307e\u3059\u3002"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2>True</Point1:2> (You correctly mentioned that a hash table stores key-value pairs, which is the fundamental concept behind its operation.)\n\n<Point2:2>False</Point2:2> (Although you mentioned using an array for indexing, you did not explain how a hash function is applied to compute these indices, which is a key aspect of hash table functionality.)\n\n<Point3:1>False</Point3:1> (You did not mention any collision resolution techniques, which is an important component of hash table design. Collision resolution methods are employed when two different keys\u6620\u5c04\u5230\u76f8\u540c\u7684\u7d22\u5f15\uff0c\u786e\u4fdd\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u6b63\u786e\u5b58\u50a8\u548c\u68c0\u7d22.)"
    }
}