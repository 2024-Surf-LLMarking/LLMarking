{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *False* (Reason: The student's answer is incorrect. The worst-case time complexity of QuickSort is not O(n log n), but O(n^2) as mentioned in the reference answer. The explanation provided by the student does not mention the condition for the worst case, which is when the pivot elements are consistently the smallest or largest, leading to unbalanced partitions.)\n\n<Point2:2> *False* (Reason: The student's answer does not mention the condition for the worst case as mentioned in the reference answer. Although the student's answer is partially correct with the time complexity O(n log n), it is not aligned with the reference answer, which states that the worst-case time complexity is O(n^2).)"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2> *True* (Hash tables store key-value pairs)\nYour student's answer correctly identifies that hash tables store key-value pairs, which is the primary function of a hash table.\n\n<Point2:2> *False* (Your answer does not mention the use of a hash function)\nWhile you mention hash tables use an array for storage, your answer omits the key component of a hash table - the use of a hash function for indexing. This function calculates an index into the array based on the provided key.\n\n<Point3:1> *False* (Your answer does not discuss collisions and resolution methods)\nYour answer fails to mention collision resolution methods, which are indeed part of hash table functionality. Collisions occur when two or more keys map to the same index, and methods like chaining or open addressing are used to resolve them. Your answer should mention these key elements.\n\nOverall, the student's answer is only partially correct. It correctly identifies hash tables as a way to store key-value pairs, but it misses two crucial components: the hash function for indexing and the resolution of collisions. \n\nRemember, in the context of hash tables, the hash function is what maps the key to an index in the array, and collision resolution methods are a critical part of how a hash table handles the inevitable collisions that occur when multiple keys hash to the same value. Incorporating these aspects into the explanation will provide a more comprehensive understanding of how a hash table works."
    }
}