{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point:0> The student's answer does not include the information about the worst-case time complexity of QuickSort. The reference answer contains this information.\n\n<Point:2> The student's answer does not mention the specific factors that can lead to the worst-case scenario. The reference answer specifies that it is caused by unbalanced partitions due to consistently choosing the smallest or largest element as the pivot.\n\n<Point:3> Although the student mentions O(n log n) as the time complexity, this is true in the average case, not the worst case. The reference answer specifies that the worst-case time complexity is O(n^2).\n\nTotal score: 0/5"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point:1>Induction: The student provided a basic explanation of a hash table as an array for storing data using keys. This is partially correct; a hash table is indeed an array. However, the student failed to elaborate on the purpose of the keys in the context of hash table operations and the role of the hash function. The student could have explained how the hash function is used to compute a unique index for a given key. This missed explanation resulted in a 1-point deduction.\n<Point:1>Deduction: The student mentioned that the hash table stores data using keys, but did not explain how this indexing process works. Ideally, each key should lead to a unique bucket, but in reality, there might be collisions that require a separate collision resolution strategy. The student should have explained this.\n<Point:2>Induction: The student didn't mention how the hash function is used to compute the index that will place a value in a unique bucket. If the hash function is well-designed, each key would lead to a unique index, but in reality, multiple keys can sometimes lead to the same index.\n<Point:2>Deduction: The student didn't explain the role of the hash function in computing the index of the bucket into which the value will be placed. This is a key aspect of how a hash table works.\n<Point:3>Induction: The student didn't mention collisions and the necessity for a collision resolution strategy. The student could have discussed that this strategy ensures that multiple keys don't result in the same index.\n<Point:3>Deduction: The student didn't include a discussion of collisions and the potential for multiple keys to result in the same index, a situation that a good hash table design should be able to handle.\n\nTotal score: 1.0/5"
    }
}