{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting requirements from stakeholders. System Analysis and Design: Analyzing requirements and creating a blueprint. Implementation: Writing the code. Testing: Checking the system for defects. Deployment: Releasing the software to users. Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly lists Requirement Gathering as a phase.)\n\n<Point2:1> *True*  (The student's answer correctly describes Requirement Gathering.)\n\n<Point3:1> *True* (The student's answer correctly lists System Analysis and Design as a phase.)\n\n<Point4:1> *True* (The student's answer correctly describes System Analysis and Design.) \n\n<Point5:1> *True*  (The student's answer correctly lists Implementation as a phase.)\n\n<Point6:1> *True* (The student's answer correctly describes Implementation.)\n\n<Point7:1> *True* (The student's answer correctly lists Testing as a phase.)\n\n<Point8:1> *True*  (The student's answer correctly describes Testing.)\n\n<Point9:1> *True* (The student's answer correctly lists Deployment as a phase.)\n\n<Point10:1> *True* (The student's answer correctly describes Deployment.)\n\n<Point11:1> *True* (The student's answer correctly lists Maintenance as a phase.)\n\n<Point12:1> *True* (The student's answer correctly describes Maintenance.) \n"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Understanding what the software needs to do by talking to stakeholders. System Analysis and Design: Creating a detailed plan and design for the software. Implementation (Coding): Developing the software based on the design. Testing: Ensuring the software works correctly by finding and fixing bugs. Deployment: Making the software available to the users. Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly lists \"Requirement Gathering\" as a phase.)\n<Point2:1> *True* ( The student's answer provides a correct description for \"Requirement Gathering\".)\n\n<Point3:1> *True* (The student's answer correctly lists \"System Analysis and Design\" as a phase.) \n\n<Point4:1> *True* (The student's answer provides a correct description for \"System Analysis and Design\".)\n\n<Point5:1> *True* (The student's answer correctly lists \"Implementation (Coding)\" as a phase.)\n\n<Point6:1> *True* (The student's answer provides a correct description for \"Implementation (Coding)\".)\n<Point7:1> *True* (The student's answer correctly lists \"Testing\" as a phase.)\n\n<Point8:1> *True* (The student's answer provides a correct description for \"Testing\".)\n<Point9:1> *True* ( The student's answer correctly lists \"Deployment\" as a phase.)\n\n<Point10:1> *True* (The student's answer provides a correct description for \"Deployment\".)\n\n\n<Point11:1> *True* (The student's answer correctly lists \"Maintenance\" as a phase.)\n\n<Point12:1> *True* (The student's answer provides a correct description for \"Maintenance\".) \n\n\n"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are: Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed. System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created. Implementation (Coding): This phase involves writing the code according to the design documents. Testing: The system is verified against the requirements to identify and fix defects. Deployment: The software is released to the production environment for users. Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly lists Requirement Gathering as a key phase.)\n<Point2:1> *True* (The student's answer correctly explains what Requirement Gathering entails.) \n<Point3:1> *True* (The student's answer correctly lists System Analysis and Design as a key phase.)\n\n<Point4:1> *True*  (The student's answer correctly explains what System Analysis and Design entails.)\n<Point5:1> *True* (The student's answer correctly lists Implementation (Coding) as a key phase.) \n\n<Point6:1> *True* (The student's answer correctly explains what Implementation (Coding) entails.)\n<Point7:1> *True* (The student's answer correctly lists Testing as a key phase.)\n\n<Point8:1> *True* (The student's answer correctly explains what Testing entails.) \n<Point9:1> *True* (The student's answer correctly lists Deployment as a key phase.)\n\n<Point10:1> *True* (The student's answer correctly explains what Deployment entails.)\n<Point11:1> *True* (The student's answer correctly lists Maintenance as a key phase.) \n\n<Point12:1> *True*  (The student's answer correctly explains what Maintenance entails.)"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are: Requirement Gathering: This is where the requirements from stakeholders are collected. System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created. Implementation (Coding): The next step is to write the code based on the design. Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects. Deployment: The software is then deployed to the production environment. Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies Requirement Gathering as a key phase.) \n<Point2:1> *True* (The student's answer correctly describes the purpose of Requirement Gathering.)\n<Point3:1> *True* (The student's answer correctly identifies System Analysis and Design as a key phase.)\n<Point4:1> *True*  (The student's answer correctly describes the purpose of System Analysis and Design.) \n<Point5:1> *True* (The student's answer correctly identifies Implementation (Coding) as a key phase.) \n<Point6:1> *True* (The student's answer correctly describes the purpose of Implementation (Coding).)\n<Point7:1> *True* (The student's answer correctly identifies Testing as a key phase.)\n<Point8:1> *True*  (The student's answer correctly describes the purpose of Testing.) \n<Point9:1> *True* (The student's answer correctly identifies Deployment as a key phase.)\n<Point10:1> *True* (The student's answer correctly describes the purpose of Deployment.)\n<Point11:1> *True* (The student's answer correctly identifies Maintenance as a key phase.) \n<Point12:1> *True* (The student's answer correctly describes the purpose of Maintenance.)"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases: Requirement Gathering: Collecting the requirements from stakeholders. System Analysis and Design: Analyzing the requirements and designing the system. Implementation (Coding): Writing the code based on the design. Testing: Checking the system for defects. Deployment: Releasing the software for use. Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  (The student's answer correctly lists Requirement Gathering as a phase)\n\n<Point2:1> *True* (The student's answer correctly describes Requirement Gathering as collecting requirements from stakeholders.)\n\n<Point3:1> *True* (The student's answer correctly lists System Analysis and Design as a phase.)\n<Point4:1> *True* (The student's answer correctly describes System Analysis and Design as analyzing requirements and designing the system)\n\n<Point5:1> *True* (The student's answer correctly lists Implementation (Coding) as a phase.)\n<Point6:1> *True* (The student's answer correctly describes Implementation as writing code based on the design.)\n\n<Point7:1> *True* (The student's answer correctly lists Testing as a phase.)\n<Point8:1> *True*(The student's answer correctly describes Testing as checking the system for defects.)\n\n<Point9:1> *True* (The student's answer correctly lists Deployment as a phase.)\n<Point10:1> *True* (The student's answer correctly describes Deployment as releasing the software for use)\n\n<Point11:1> *True* (The student's answer correctly lists Maintenance as a phase.) \n<Point12:1> *True*  (The student's answer correctly describes Maintenance as supporting and enhancing the software after deployment.)\n\n\n\n"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes: Requirement Gathering: Gathering what is needed for the project. System Analysis and Design: Creating a design based on the requirements. Implementation (Coding): Coding the project. Testing: Testing the code. Deployment: Making the software available. Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* \n<Point2:1> *True* \n<Point3:1> *True* \n<Point4:1> *True* \n<Point5:1> *True* \n<Point6:1> *True* \n<Point7:1> *True* \n<Point8:1> *True* \n<Point9:1> *True* \n<Point10:1> *True*\n<Point11:1> *True* \n<Point12:1> *True*  \n\n\n\n"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are: Requirement Gathering: Understanding what the stakeholders need. System Analysis and Design: Planning how the system will be built. Implementation (Coding): Writing the actual code. Testing: Making sure the software works as expected. Deployment: Launching the software for users. Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies Requirement Gathering.) \n<Point2:1> *True* (The student correctly explains Requirement Gathering as understanding stakeholder needs.)\n<Point3:1> *True* (The student correctly identifies System Analysis and Design.)\n<Point4:1> *True* (The student correctly explains System Analysis and Design as planning the system build.)\n<Point5:1> *True* (The student correctly identifies Implementation (Coding).)\n<Point6:1> *True* (The student correctly explains Implementation (Coding) as writing the code.)\n<Point7:1> *True* (The student correctly identifies Testing.)\n<Point8:1> *True* (The student correctly explains Testing as ensuring software functionality.)\n<Point9:1> *True*  (The student correctly identifies Deployment.)\n<Point10:1> *True* (The student correctly explains Deployment as launching the software for users.)\n<Point11:1> *True* (The student correctly identifies Maintenance.)\n<Point12:1> *True* (The student correctly explains Maintenance as keeping the software updated and fixing issues.) \n\n\n\n"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of: Requirement Gathering: Collecting the requirements needed for the project. System Analysis and Design: Designing the system based on the requirements. Implementation (Coding): Writing the code for the project. Testing: Checking the software for any issues. Deployment: Releasing the final product to the users. Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly lists Requirement Gathering as a key phase.)\n<Point2:1> *True*  (The student's answer correctly describes Requirement Gathering.)\n<Point3:1> *True* (The student's answer correctly lists System Analysis and Design as a key phase.)\n<Point4:1> *True*  (The student's answer correctly describes System Analysis and Design.)\n<Point5:1> *True* (The student's answer correctly lists Implementation (Coding) as a key phase.)\n<Point6:1> *True* (The student's answer correctly describes Implementation (Coding).)\n\n<Point7:1> *True* (The student's answer correctly lists Testing as a key phase.)\n\n<Point8:1> *True*  (The student's answer correctly describes Testing.)\n<Point9:1> *True* (The student's answer correctly lists Deployment as a key phase.)\n\n<Point10:1> *True*  (The student's answer correctly describes Deployment.)\n<Point11:1> *True* (The student's answer correctly lists Maintenance as a key phase.)\n\n<Point12:1> *True*  (The student's answer correctly describes Maintenance.) \n\n\n\n"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting what needs to be developed from the stakeholders. System Analysis and Design: Analyzing these requirements and making a system design. Implementation (Coding): Writing the code according to the design. Testing: Verifying that the system works as intended and fixing any defects. Deployment: Making the software available to the users. Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly lists Requirement Gathering as a phase.) \n<Point2:1> *True* (The student's answer correctly describes Requirement Gathering as collecting needs from stakeholders)\n\n<Point3:1> *True* (The student's answer correctly lists System Analysis and Design as a phase.)\n<Point4:1> *True* (The student's answer correctly describes System Analysis and Design as analyzing requirements and creating a design.) \n\n<Point5:1> *True* (The student's answer correctly lists Implementation (Coding) as a phase.)\n<Point6:1> *True* (The student's answer correctly describes Implementation as writing code according to the design.)\n\n<Point7:1> *True* (The student's answer correctly lists Testing as a phase.)\n<Point8:1> *True* (The student's answer correctly describes Testing as verifying the system works and fixing defects) \n\n\n<Point9:1> *True* (The student's answer correctly lists Deployment as a phase.)\n<Point10:1> *True* (The student's answer correctly describes Deployment as making software available to users.)\n\n<Point11:1> *True* (The student's answer correctly lists Maintenance as a phase.) \n<Point12:1> *True* (The student's answer correctly describes Maintenance as providing ongoing support and updates.)\n\n\n\n"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes: Requirement Gathering: Understanding what the project needs. System Analysis and Design: Creating a detailed plan based on the requirements. Implementation (Coding): Writing the necessary code. Testing: Ensuring the system meets requirements and fixing any problems. Deployment: Making the software available to the end-users. Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* \n<Point2:1> *True* \n<Point3:1> *True* \n<Point4:1> *True*\n<Point5:1> *True* \n<Point6:1> *True*\n<Point7:1> *True*\n<Point8:1> *True*\n<Point9:1> *True*\n<Point10:1> *True* \n<Point11:1> *True*\n<Point12:1> *True*\n\n"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes Waterfall model as a linear and sequential approach.)\n\n<Point2:1> *True* (The student's answer correctly explains that the Waterfall process flows in one direction without overlapping.)\n\n<Point3:1> *True* (The student's answer correctly explains the difficulty of implementing changes in the Waterfall model.)\n\n<Point4:2> *True* (The student's answer accurately describes Agile as iterative and incremental, focusing on flexibility, collaboration, and customer feedback)\n\n<Point5:1> *True* (The student correctly mentions that development in Agile happens in small increments called iterations.)\n\n<Point6:1> *True* ( The student explains how Agile allows for continuous stakeholder feedback and adaptation to changing requirements.)\n\n<Point7:1>  *True*(The student accurately states that changes can be made at any stage in the Agile process. ) \n"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes Waterfall as linear and sequential.)\n<Point2:1> *True* (The student accurately depicts Waterfall's unidirectional flow without overlapping phases.) \n<Point3:1> *False* (While the student mentions difficulty in making changes, they don\u2019t specify that it involves revisiting previous phases.)\n\n<Point4:2> *True* (The student correctly identifies Agile's iterative and incremental nature and emphasis on flexibility.) \n\n<Point5:1> *True* (The student explains Agile's use of small iterations for development.) \n<Point6:1>*True* (The student highlights the continuous feedback aspect and adaptability in Agile.) \n<Point7:1> *True* (The student accurately states that Agile allows changes at any stage.)"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as a linear and sequential approach.)\n\n<Point2:1> *True*  (The student accurately portrays the unidirectional flow of the Waterfall model.)\n\n<Point3:1> *True* ( The student correctly points out the difficulty in implementing changes in the Waterfall model due to its linearity.) \n\n<Point4:2> *True* (The student accurately identifies Agile as an iterative and incremental approach emphasizing flexibility.)\n\n<Point5:1> *True* (The student correctly mentions the use of iterations in Agile development.)\n\n<Point6:1> *True*(The student highlights the importance of continuous feedback and adaptability to change in Agile.)\n\n<Point7:1> *True* ( The student rightly states that changes can be made throughout the Agile development process.) \n"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes Waterfall as a linear and sequential approach with distinct phases.)\n\n<Point2:1> *True*  (The student's answer accurately portrays the unidirectional flow of the Waterfall model.)\n\n<Point3:1> *True* (The student accurately highlights the difficulty of incorporating changes in the Waterfall model once a phase is complete.)\n\n<Point4:2> *True* ( The student correctly identifies Agile as an iterative and incremental approach emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student's answer correctly mentions the use of iterations in the Agile method.)\n\n<Point6:1> *True*  (The student accurately describes Agile's focus on continuous feedback and adaptation based on stakeholder input.)\n\n<Point7:1> *True*  (The student correctly states that Agile allows for changes at any stage due to its iterative nature.) \n"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.) \n\n<Point2:1> *True* (The student accurately portrays the unidirectional flow of the Waterfall model.)\n\n<Point3:1> *True* (The student rightly highlights the difficulty in implementing changes within the Waterfall model due to its rigid structure.)\n\n\n<Point4:2> *True* (The student correctly identifies the iterative and incremental nature of Agile methodology. ) \n\n<Point5:1> *True*  ( The student mentions iterations, which are key to the Agile approach.)\n\n<Point6:1> *True* (The student accurately highlights continuous feedback and adaptability as core aspects of Agile.)\n\n<Point7:1>*True*  (The student correctly points out the flexibility for changes within Agile due to its iterative nature.) \n"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n<Point2:1> *True* (The student's answer correctly mentions the one-directional flow without overlapping or iteration in the Waterfall model.) \n<Point3:1> *True* (The student's answer highlights the difficulty of implementing changes in the Waterfall model due to its sequential nature.)\n<Point4:2> *True* (The student's answer correctly describes Agile as an iterative and incremental approach that values flexibility.) \n\n<Point5:1> *True* (The student accurately explains the concept of iterations in the Agile model.)\n<Point6:1> *True* (The student highlights the importance of continuous feedback from stakeholders in Agile.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes to be made at any stage of development.) \n\n\n"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the Waterfall model as linear and sequential with phases completed one after another.)\n<Point2:1> *True* (The student's answer correctly mentions the unidirectional flow of the Waterfall model, resembling a waterfall.)\n<Point3:1> *True* (The student's answer accurately states that changes are difficult to implement in the Waterfall model once a phase is completed.)\n<Point4:2> *True*  (The student's answer correctly describes Agile as iterative and incremental, emphasizing flexibility and collaboration.)\n<Point5:1> *True* ( The student's answer mentions iterations as small manageable increments in Agile development.) \n<Point6:1> *True* (The student's answer highlights the continuous feedback aspect of Agile and its ability to adapt to changing requirements.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes at any stage of development due to its flexible nature.) \n\n\n"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the linear and sequential nature of the Waterfall model.)\n<Point2:1> *True* ( The student's answer mentions the one-directional flow without overlapping phases in Waterfall.)\n<Point3:1> *True* (The student accurately points out the difficulty in implementing changes after a phase is completed in Waterfall.)\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach emphasizing flexibility.)\n<Point5:1> *True* (The student mentions iterations as small development cycles in Agile.) \n<Point6:1> *True* ( The student accurately describes the continuous feedback and adaptability to changing requirements in Agile.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes at any stage of the development process.) \n\n\n"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the linear and sequential nature of the Waterfall model.)\n<Point2:1> *True*  (The student accurately portrays the one-directional flow of the Waterfall process.)\n<Point3:1> *True* (The student rightly points out the difficulty in making changes once a phase is completed in the Waterfall model.)\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach emphasizing flexibility, collaboration, and customer feedback.)\n<Point5:1> *True*  (The student accurately mentions the use of iterations in Agile development.)\n<Point6:1> *True* (The student highlights the continuous feedback loop and adaptability to changing requirements in Agile.)\n<Point7:1> *True* (The student correctly states that Agile allows for changes throughout the development process.) \n\n\n"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions Waterfall model is linear and sequential)\n\n<Point2:1> *True* (The student's answer correctly describes the unidirectional flow of Waterfall model)\n\n<Point3:1> *True* (The student's answer correctly states the difficulty in making changes with Waterfall)\n\n<Point4:2> *True*  (The student's answer correctly defines Agile as an iterative and incremental approach) \n\n<Point5:1> *True* (The student's answer mentions iterations as small manageable increments in Agile)\n\n<Point6:1> *True* (The student's answer correctly highlights continuous feedback in Agile)\n\n<Point7:1>  *True* (The student accurately describes the flexibility to incorporate changes at any stage in Agile) \n"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions that cohesion indicates the bond strength between elements in a module.)\n<Point2:1> *True* (The student's answer correctly mentions that it measures the relationship strength between the data of a class and methods.) \n\n<Point3:1> *True* ( The student's answer correctly mentions that  it considers the unifying factor or purpose the class serves. )\n\n<Point4:2> *True* (The student's answer correctly explains high cohesion as elements within a module being closely related and working towards a common goal.)\n<Point5:2> *True* (The student's answer correctly explains low cohesion as elements being loosely related and lacking a clear purpose.) \n\n\n"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly mentions that cohesion refers to the bond strength between elements in a module.)\n<Point2:1> *True* (The student correctly highlights the relationship between data of a class/methods as an aspect of cohesion)\n<Point3:1> *True*(The student accurately identifies the unifying factor or purpose as a part of what cohesion measures).\n\n<Point4:2> *True* (The student accurately explains high cohesion in terms of related elements working towards a common goal.)\n<Point5:2> *True* (The student correctly describes low cohesion as loosely related elements without a clear purpose.) \n\n\n"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions that cohesion refers to the bond strength between elements in a module.)\n<Point2:1> *True* ( The student's answer correctly states that cohesion measures the relationship strength between data of a class/methods. )\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose aspect of cohesion)\n<Point4:2> *True* (The student's answer accurately describes high cohesion as elements within a module being closely related and working towards a common goal.)\n<Point5:2> *True* ( The student's answer correctly explains low cohesion as loosely related elements without a unified purpose. ) \n\n\n\n"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes cohesion as the bond strength between elements in a module.) \n<Point2:1> *True* (The student mentions the relationship strength between data of a class/methods, which is part of the definition.)\n\n<Point3:1> *True* (The student touches upon the unifying factor or purpose of the class when mentioning working together towards a common goal.) \n<Point4:2> *True* (The student accurately describes high cohesion as elements being closely related and working towards a common goal.)\n\n<Point5:2> *True* (The student correctly explains that low cohesion means loosely related elements without a clear unified purpose.)\n\n\n\n"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as a measure of bond strength between elements in a module.) \n\n<Point2:1> *True* (The student's answer correctly mentions that cohesion relates to the relationship strength between data and methods within a class.)\n\n<Point3:1> *True* (The student's answer correctly highlights the unifying factor or purpose served by a class as part of cohesion.) \n\n<Point4:2> *True* (The student's answer accurately explains high cohesion as elements working closely together towards a common goal.)\n\n<Point5:2> *True* (The student's answer correctly describes low cohesion as loosely related elements with unclear or diverse purposes.)  \n"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as a bond strength between elements in a module.) \n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class/module.)\n\n<Point3:1> *True*  (The student's answer refers to the unifying factor or purpose served by the class.)\n\n<Point4:2> *True* (The student accurately explains that high cohesion indicates closely related elements working towards a common goal.)\n\n\n<Point5:2> *True* (The student correctly describes low cohesion as loosely related elements without a clear purpose.) \n"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly mentions the bond strength between elements in a module.)\n<Point2:1> *True* (The student accurately describes the relationship between data of a class/methods.)\n<Point3:1> *True* (The student includes the unifying factor or purpose that a class serves.)\n<Point4:2> *True* (The student correctly explains high cohesion as elements working together towards a common goal.)\n<Point5:2> *True* (The student accurately describes low cohesion as loosely related elements lacking a clear purpose.) \n\n\n"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module)\n\n<Point2:1> *True* (The student mentions the relationship strength between data of a class/methods.)\n\n<Point3:1> *True* (The student acknowledges the unifying factor or purpose a class serves.)\n\n<Point4:2> *True* (The student accurately explains high cohesion with elements working towards a common goal.)\n\n<Point5:2> *True* (The student correctly describes low cohesion as loosely related elements without a clear purpose.) \n"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.) \n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class, reflecting the measure of cohesion.)\n\n<Point3:1> *True* ( The student's answer correctly points out that cohesion considers the unifying factor or purpose a class serves.)\n\n<Point4:2> *True* (The student accurately explains high cohesion as elements working towards a common goal)\n\n<Point5:2> *True*(The student accurately explains low cohesion as loosely related elements lacking a unified purpose.) \n"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer correctly mentions the relationship strength between data of a class/methods.) \n\n<Point3:1> *True* (The student's answer correctly mentions the unifying factor or purpose the class serves.)\n\n<Point4:2> *True* (The student's answer correctly describes high cohesion as elements working together towards a common goal.)\n\n<Point5:2> *True* ( The student's answer correctly describes low cohesion as elements being loosely related and not having a clear unified purpose.) \n\n\n"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True*  (The student's answer correctly states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer correctly explains that internal milestones indicate the team is on the right track.)\n\n<Point4:2> *True* (The student's answer mentions that internal milestones can be used to assess progress.) \n\n<Point5:1> *True* (The student's answer includes identifying issues and risks as a use for internal milestones.)\n\n<Point6:1> *True*  (The student correctly states that internal milestones help make adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides completing a specific feature as an example of an internal milestone.)\n\n<Point8:1> *True* ( The student correctly lists testing and debugging code as an example of an internal milestone.)\n \n<Point9:1> *True* (The student's answer includes reaching a certain level of performance or functionality as a valid example.) \n"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions that internal milestones are measurable and important attributes.) \n\n<Point2:1> *False* (The student's answer does not mention the systematic procedures aspect of internal milestones.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones indicate if engineers are on the right path.)\n\n<Point4:2> *True* (The student's answer mentions that milestones help assess progress.) \n\n<Point5:1> *True* (The student's answer states that milestones help identify problems.)\n\n<Point6:1> *True* (The student's answer mentions making changes to the project plan as a use of milestones.)\n\n<Point7:1> *True* (The student includes completing a feature as an example of a milestone.)\n\n<Point8:1> *True* (The student lists testing and debugging as another example.)\n\n<Point9:1> *True* (The student's answer mentions achieving specific performance levels as a potential milestone.) \n"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer correctly identifies them as standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer states they indicate the team is on track, signifying they are used to gauge progress.) \n\n<Point4:2> *True* ( The student explicitly mentions assessing the development team's progress.)\n\n<Point5:1> *True* (The student mentions identifying issues and risks as a use for internal milestones. )\n\n<Point6:1> *True* (The student states they are used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides completing a specific feature as an example of an internal milestone)\n\n\n<Point8:1> *True* ( The student correctly includes testing and debugging code as an example.)\n\n\n<Point9:1> *True* ( Reaching a certain level of performance or functionality is also given as an example by the student. ) \n"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as standard systematic procedures.) \n\n<Point3:1> *True* (The student's answer mentions that internal milestones indicate engineers are on the right path.)\n\n<Point4:2> *True* ( The student's answer states that internal milestones can be used to assess progress.)\n\n<Point5:1> *True* ( The student's answer  states that internal milestones can help identify issues and risks.)\n\n<Point6:1> *True* (The student's answer mentions adjusting the project plan as a use for internal milestones.)\n\n<Point7:1> *True* (The student's answer includes completing a specific feature as an example of a milestone.)\n \n<Point8:1> *True* (The student's answer includes testing and debugging code as an example of a milestone.)\n\n<Point9:1> *True*(The student's answer includes reaching a certain level of performance or functionality as an example of a milestone.)\n\n"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions that internal milestones are measurable and important attributes of processes.)\n<Point2:1> *True* (The student's answer correctly mentions that internal milestones are standard systematic procedures.)\n<Point3:1> *True* (The student's answer correctly mentions that internal milestones indicate the engineers are on the right path.)\n\n<Point4:2> *True* (The student's answer correctly mentions that internal milestones can be used to assess the development team\u2019s progress.) \n<Point5:1> *True* (The student's answer correctly mentions that internal milestones can be used to identify issues and risks.)\n\n<Point6:1> *True* (The student's answer correctly mentions that internal milestones can be used to make necessary adjustments to the project plan.) \n\n\n<Point7:1> *True* (The student\u2019s answer provides completing a feature as an example, which aligns with the reference answer)\n\n<Point8:1> *True* (The student\u2019s answer provides debugging as an example, which aligns with the reference answer.)\n<Point9:1> *True* (The student\u2019s answer provides reaching a performance goal as an example, which aligns with the reference answer.)"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student identifies internal milestones as standard systematic procedures.)\n\n<Point3:1> *True* (The student recognizes that internal milestones indicate the team's progress in the right direction.)\n\n<Point4:2> *True* (The student mentions the use of milestones for assessing development progress.)\n\n<Point5:1> *True* (The student includes identifying issues and risks as a purpose of internal milestones.)\n\n<Point6:1> *True* (The student correctly states that milestones enable adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides completing a feature as an example of an internal milestone.)\n\n<Point8:1> *True*  ( The student includes testing the code as an example of an internal milestone.)\n\n<Point9:1> *True* (The student mentions reaching a performance level as an example of an internal milestone.) \n"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly mentions that internal milestones are measurable and important attributes of processes.) \n<Point2:1> *False* (The student's answer doesn't explicitly state internal milestones are standard systematic procedures, although the concept is implied)\n<Point3:1> *True* (The student's answer correctly mentions they indicate that engineers are on the right path.)\n<Point4:2> *True* (The student's answer states they are used to evaluate progress.)\n\n<Point5:1> *True* (The student's answer states they are used to identify risks.)\n\n<Point6:1> *True* (The student's answer mentions making necessary changes to the project plan.)\n<Point7:1> *True*  (The student's answer provides completing a feature as an example of internal milestones.)\n<Point8:1> *True* (The student's answer provides debugging the code as an example of internal milestones.)\n<Point9:1> *True* (The student's answer provides achieving a performance level as an example of internal milestones.) \n\n\n"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.) \n<Point2:1> *True* (The student's answer states that these are standard systematic procedures.)\n<Point3:1> *True* (The student's answer mentions they indicate being \"on the right path\".)\n<Point4:2> *True* (The student's answer mentions assessing the development team's progress as a use for milestones.)\n<Point5:1> *True* (The student's answer includes identifying issues and risks as a use for milestones.)\n<Point6:1> *True* ( The student's answer includes making adjustments to the project plan as a use for milestones.)\n\n<Point7:1> *True*( The student's answer mentions completing features as an example of a milestone.)\n\n<Point8:1> *True*(The student's answer mentions testing and debugging as examples of milestones. )\n<Point9:1> *True* (The student's answer mentions reaching performance goals as examples of milestones. ) \n"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines internal milestones as measurable attributes of processes.)\n\n<Point2:1> *False* (The student's answer mentions \"systematic procedures,\" but doesn't explicitly state that they are standard.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones indicate the team is on the right path.)\n\n<Point4:2> *True* (The student's answer correctly mentions assessing progress as a use of milestones.)\n\n<Point5:1> *True* (The student's answer correctly mentions identifying issues and risks as a use of milestones.)\n\n<Point6:1> *True* (The student's answer correctly mentions making necessary adjustments to the project plan as a use of milestones.)\n\n<Point7:1> *True* (The student's answer includes completing a feature as an example of a milestone.)\n\n<Point8:1> *True* (The student's answer includes testing and debugging as examples of milestones.)\n<Point9:1> *True* (The student's answer includes reaching a performance level as an example of a milestone.)"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n<Point2:1> *True* (The student's answer correctly mentions that they are standard systematic procedures.) \n<Point3:1> *True*  (The student's answer correctly states they indicate the engineers are on the right path.)\n<Point4:2> *True* (The student's answer correctly mentions using milestones to assess development progress.)\n<Point5:1> *True* ( The student's answer correctly mentions using milestones to identify issues and risks.)\n<Point6:1> *True* (The student's answer correctly states they are used to make adjustments to the project plan.) \n<Point7:1> *True*  (The student's answer provides completing a feature as an example.)\n<Point8:1> *True* (The student's answer provides testing and debugging as an example.)\n<Point9:1> *True* (The student's answer provides achieving performance level as an example.) \n\n\n"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.) \n\n<Point2:1> *True* (The student's answer correctly states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student's answer accurately describes the series of smaller development cycles within RAD.)\n\n<Point4:1> *True* (The student's answer correctly highlights the focus on quick delivery of functional software in RAD.)\n\n<Point5:2> *True* (The student's answer correctly mentions the incorporation of user and stakeholder feedback for improvement in RAD.) \n\n\n"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student's answer mentions the series of smaller development cycles.)\n\n<Point4:1> *True* (The student's answer accurately describes the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student's answer highlights the importance of user feedback in RAD.) \n"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly mentions the emphasis on less time spent on planning and more on development.)\n\n<Point3:1> *True* (The student's answer lists the series of smaller development cycles.)\n\n<Point4:1> *True* (The student's answer highlights the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer accurately describes the incorporation of user and stakeholder feedback for refinement.) \n\n\n"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student's answer accurately describes the series of development cycles involved in RAD.)\n\n<Point4:1> *True* (The student's answer highlights the focus on quick delivery of functional software.) \n\n<Point5:2> *True* (The student's answer correctly mentions the incorporation of feedback from users and stakeholders.) \n"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student's answer mentions the emphasis on less time in planning phases and more focus on development.) \n<Point3:1> *True* (The student's answer lists the series of smaller development cycles.)\n<Point4:1> *True* ( The student's answer correctly identifies the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student's answer mentions incorporating feedback from end-users and stakeholders.) \n\n\n\n"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student's answer accurately describes the emphasis on reduced planning time and accelerated development.)\n<Point3:1> *True* (The student's answer correctly mentions the series of smaller development cycles involved in RAD.)\n<Point4:1> *True*  (The student's answer highlights the focus on quick delivery of functional software to clients and stakeholders.)\n<Point5:2> *True* (The student's answer acknowledges the importance of incorporating feedback from end-users for refinement.) \n\n\n"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly mentions that RAD prioritizes development time over planning.)\n\n<Point3:1> *True* (The student's answer accurately describes the series of development cycles in RAD.)\n\n<Point4:1> *True*  (The student's answer highlights the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer correctly points out that RAD incorporates feedback from end-users for improvement.) \n"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student's answer accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* ( The student correctly mentions the series of smaller development cycles within RAD.)\n<Point4:1> *True* (The student accurately highlights the focus on quick delivery in RAD.)\n<Point5:2> *True*  (The student's answer correctly indicates that RAD incorporates user feedback for refinement.) \n\n\n"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach) \n\n<Point2:1> *True* (The student's answer correctly states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student accurately mentions the series of smaller development cycles.)\n\n<Point4:1> *True* (The student's answer correctly highlights the focus on quick delivery of functional software.)\n\n<Point5:2> *True*  (The student's answer emphasizes the importance of end-user feedback for refinement.) \n"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly mentions that RAD emphasizes less time on traditional planning and more on development.) \n\n<Point3:1> *True* (The student accurately describes the series of smaller development cycles within RAD.)\n\n<Point4:1> *True*  (The student's answer highlights the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student correctly states that RAD incorporates feedback for refinement.) \n"
    },
    "50": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing are concepts in programming languages related to how types of variables are handled. Weak typing checks the types of variables at run time, which means type errors can occur when the program is running. Strong typing checks the types at compile time, catching errors before the program runs. Strong typing is often recommended because it helps reduce bugs by catching errors early. However, it can make the code more rigid and harder to modify. Ultimately, the choice depends on the project requirements, such as whether flexibility or early error detection is more important.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing.)\n<Point2:1> *True* (The student correctly defines strong typing)\n<Point3:1> *True* (The student correctly states that strong typing is recommended for bug reduction.)\n\n<Point4:1> *True*(The student correctly mentions that strong typing can make code more rigid.)\n<Point5:1>*True*  (The student correctly points out that the choice depends on project requirements.) \n"
    },
    "51": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Weak typing allows for more flexibility by checking variable types at run time, which can sometimes lead to type errors during execution. On the other hand, strong typing checks variable types at compile time, which helps catch errors early and reduces bugs. Strong typing is generally recommended for its robustness, although it can make the code less flexible and harder to change. ",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly describes weak typing as checking types at run time.)\n<Point2:1> *True* (The student's answer correctly describes strong typing as checking types at compile time.)\n<Point3:1> *True* (The student's answer correctly states that strong typing is recommended due to reducing bugs.) \n<Point4:1> *True* (The student's answer correctly mentions the potential rigidity and harder modifications associated with strong typing.)\n<Point5:1> *True* (The student's answer acknowledges that the best choice depends on project requirements.)  \n"
    },
    "52": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing involves checking the types of variables at compile time, while weak typing checks them at run time. Strong typing is preferred because it reduces the chance of bugs by catching errors during compilation. However, strong typing can also make the code more rigid and harder to modify. Whether to use strong or weak typing depends on the project requirements, such as the need for flexibility versus the need for early error detection.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly states that weak typing checks variable types at runtime.)\n\n<Point2:1> *True* (The student's answer correctly states that strong typing checks variable types at compile time.)\n\n<Point3:1> *True* (The student's answer correctly recommends strong typing due to reduced bugs.) \n\n<Point4:1> *True* (The student's answer correctly identifies the downside of strong typing - making code more rigid and harder to modify.)\n\n<Point5:1> *True* (The student's answer correctly concludes that the choice depends on project requirements.) \n"
    },
    "53": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Weak typing checks the types of variables at run time, allowing more flexibility but also the potential for more runtime errors. Strong typing, on the other hand, checks types at compile time, which helps reduce bugs by catching errors early. This approach is generally recommended for its reliability. However, strong typing can make the code less flexible and harder to modify. The choice between strong and weak typing should be based on the specific needs and requirements of the project.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly describes weak typing.)\n\n<Point2:1> *True* (The student's answer correctly describes strong typing.) \n\n<Point3:1> *True* (The student's answer recommends strong typing and provides a reason why.)\n\n<Point4:1> *True* (The student's answer mentions the potential downside of strong typing \u2013 reduced flexibility.)\n\n<Point5:1> *True* (The student acknowledges that the choice depends on project requirements.) \n"
    },
    "54": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "In programming, weak typing means that the types of variables are checked at run time, which allows for more flexibility but can lead to runtime errors. Strong typing checks types at compile time, reducing bugs by catching errors before the program runs. Strong typing is generally recommended because it helps prevent bugs, although it can make the code more rigid and harder to change. ",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly defines weak typing as checking types at runtime.)\n<Point2:1> *True* (The student's answer correctly defines strong typing as checking types at compile time.)\n<Point3:1> *True* (The student's answer correctly recommends strong typing due to its bug reduction benefits.)\n<Point4:1> *True* (The student's answer correctly mentions that strong typing can make code more rigid and harder to modify.)\n<Point5:1> *True* (The student's answer acknowledges that the ultimate choice depends on project requirements.) \n\n\n"
    },
    "55": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing refer to how strictly a programming language enforces type rules. Weak typing checks the types of variables at runtime, allowing for more flexibility but potentially leading to more bugs. On the other hand, strong typing checks the types of variables at compile time, which can help reduce bugs but can make the code more rigid and harder to modify. While strong typing might seem restrictive, it does not mean that it is not beneficial for reducing bugs. However, the decision ultimately depends on your project requirements. If flexibility is a priority and the project can tolerate potential runtime errors, weak typing might be suitable. Conversely, for projects where minimizing bugs is critical, strong typing would be the recommended approach.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly defines weak typing.)\n<Point2:1> *True* (The student's answer correctly defines strong typing.)\n<Point3:1> *True* (The student's answer correctly states the benefit of strong typing.)\n<Point4:1> *True* (The student's answer correctly mentions a drawback of strong typing.)\n<Point5:1> *True*  (The student's answer acknowledges that the choice depends on project requirements.) \n\n\n"
    },
    "56": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing are concepts related to how strictly a programming language enforces type rules. Weak typing checks variable types at runtime, while strong typing checks variable types at compile time. Strong typing is generally recommended because it reduces bugs, but it can also make the code more rigid and harder to modify. The choice between strong and weak typing depends on your project requirements and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly explains that weak typing checks types at runtime.)\n\n<Point2:1> *True* (The student's answer correctly explains that strong typing checks types at compile time.) \n\n<Point3:1> *True* (The student's answer mentions the advantage of strong typing in reducing bugs.)\n\n<Point4:1> *True* (The student's answer acknowledges a potential downside of strong typing - reduced flexibility.)\n\n<Point5:1> *True* (The student's answer correctly states that the choice depends on project requirements.) \n"
    },
    "57": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is considered a bad idea because it cannot be used when exception types are not known. If no specific variables are defined, the exception can be hard to read. Additionally, it can lead to unexpected behavior if the code is modified later and new exceptions are introduced, as they may also be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions that catch(exception) cannot be used when exception types are not known.)\n\n<Point2:1> *True* (The student's answer correctly mentions that exceptions can be hard to read if no specific variables are defined.) \n\n<Point3:1> *True* (The student's answer correctly states that catch(exception) can lead to unexpected behaviour.)\n\n<Point4:1> *True* (The student's answer correctly links the unexpected behavior to code modification.)\n\n<Point5:1> *True* (The student's answer correctly mentions that new exceptions being introduced can be a problem.)\n\n<Point6:1> *True*  (The student's answer correctly states that new exceptions might be caught inappropriately.) \n"
    },
    "58": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "I think using catch (exception) is not a good idea because it cannot be used when the types of exceptions are unknown. Additionally, it makes it difficult to read the exception if no specific variables are defined. This approach can also lead to unexpected behavior, especially if the code is modified later and new exceptions are introduced. These new exceptions might be caught by the general catch (exception) block and handled incorrectly.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions that catch(exception) cannot be used when exception types are unknown.)\n\n<Point2:1> *True* ( The student's answer correctly points out that lack of specific variables makes the exception harder to read.)\n\n<Point3:1> *True* (The student acknowledges that it can lead to unexpected behavior.) \n\n<Point4:1> *True* (The student explains that modification later could introduce issues.)\n\n<Point5:1> *True*  ( The student correctly highlights the issue with introducing new exceptions.)\n\n<Point6:1> *True* ( The student's answer accurately states that new exceptions might be handled incorrectly.) \n\n\n"
    },
    "59": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is a bad idea for several reasons. It cannot be used effectively when exception types are not known. Moreover, if there are no variables defined, the exception becomes hard to read. This practice can also lead to unexpected behavior. When the code is modified later and new exceptions are introduced, they may be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly states that catch(exception) cannot be used when exception types are unknown.) \n<Point2:1> *True* (The student's answer correctly mentions the readability issue when no variables are defined for the exception.)\n<Point3:1> *True*  (The student's answer correctly points out that catch (exception) can lead to unexpected behavior.)\n<Point4:1> *True* (The student's answer includes the point about code modification leading to problems.)\n<Point5:1> *True* ( The student's answer correctly mentions new exceptions being introduced.)\n<Point6:1> *True*  (The student's answer explains that new exceptions might be handled inappropriately.) \n\n\n"
    },
    "60": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is not recommended because it cannot be used when the types of exceptions are not known. This makes the exception hard to read if no specific variables are defined. Additionally, it can lead to unexpected behavior if the code is modified later and new exceptions are introduced. These new exceptions might be caught by the catch (exception) block and handled incorrectly.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions that catch(exception) cannot be used when exception types are unknown.)\n<Point2:1> *True* (The student's answer correctly states that without defined variables, the exception becomes harder to read.)\n<Point3:1> *True* (The student's answer acknowledges that catch(exception) can lead to unexpected behavior.)\n<Point4:1> *True* (The student's answer identifies code modification as a factor contributing to potential issues.)\n<Point5:1> *True* (The student correctly mentions the introduction of new exceptions as a problem.)\n<Point6:1> *True* (The student's answer accurately explains that new exceptions might be caught inappropriately.) \n\n\n"
    },
    "61": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is generally discouraged because it cannot be used when exception types are not known. Additionally, if there are no variables defined, the exception is hard to read. This approach can lead to unexpected behavior if the code is modified later and new exceptions are introduced, as they may be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly states that catch(exception) cannot be used when exception types are not known.) \n<Point2:1> *True* (The student's answer correctly points out the difficulty in reading exceptions without defined variables.)\n<Point3:1> *True* ( The student's answer rightly mentions the potential for unexpected behavior as a drawback.)\n<Point4:1> *True*  (The student's answer acknowledges that code modifications can lead to issues with catch(exception).)\n<Point5:1> *True* (The student's answer correctly highlights the introduction of new exceptions as a contributing factor.)\n\n<Point6:1> *True* ( The student accurately explains that new exceptions might be handled inappropriately by the catch(exception) block.) \n\n\n"
    },
    "62": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is generally a bad idea for several reasons. First, it cannot be used effectively when exception types are not known, making it difficult to handle specific error cases appropriately. This approach might lead to unexpected behavior, especially if the code is modified later and new exceptions are introduced; these new exceptions may also be caught by the generic catch (exception) block and handled inappropriately. Additionally, because no specific variables are defined, the exception is hard to read and debug. Thus, while it may seem convenient to use a general catch-all for exceptions, it does not necessarily mean that it will not lead to significant issues down the line.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* (The student correctly states that using `catch (exception)` is problematic when exception types are unknown.) \n\n<Point2:1> *True* (The student mentions the difficulty of reading and debugging exceptions without specific variables defined.)\n\n<Point3:1> *True* (The student identifies that `catch (exception)` can lead to unexpected behavior as a drawback.)\n  \n<Point4:1> *True* (The student correctly highlights code modification as a factor contributing to unexpected behavior.)\n\n<Point5:1> *True* (The student explains the problem of new exceptions being introduced and caught inappropriately due to `catch (exception)`.)\n\n<Point6:1> *True* ( The student accurately states that new exceptions might be handled inappropriately by the generic catch block.) \n\n\n"
    },
    "63": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is bad because it catches all exceptions, making it difficult to determine what actually went wrong. It can mask specific issues that need individual handling and can lead to unexpected behavior if new types of exceptions are introduced later. This approach makes the code less readable and harder to debug. Therefore, it is generally better to catch specific exceptions to ensure that the appropriate actions are taken for different error conditions.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions that using 'catch (exception)'  doesn't work when exception types are unknown.) \n<Point2:1> *True* (The student's answer points out that without specific variables, the exception information is harder to understand.)\n<Point3:1> *True* (The student correctly states that using a generic catch block can lead to unexpected behavior.)\n<Point4:1> *True* (The student implies that future code changes might introduce new exceptions, supporting the reasoning for point 3.)\n<Point5:1> *True* (The student's answer supports point 4 by explicitly mentioning the introduction of new exception types.)\n<Point6:1> *True* (The student correctly explains that a generic catch block can inappropriately handle newly introduced exceptions.)  \n\n\n"
    },
    "64": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air software updates for cars will significantly impact our development process and costs. First, supporting the software for 25 years means we need long-term support mechanisms. Our development team must be prepared to maintain and update the software for an extended period. Additionally, network-connected cars are vulnerable to cyber-attacks, so we need to invest heavily in security measures to protect the software and passenger safety. Continuous updates require rigorous testing for every release, which will increase development costs. As the number of connected cars grows, our software must scale without compromising performance. While over-the-air updates are more cost-effective than service visits, maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions the need for long-term support mechanisms.)\n\n<Point2:1> *True* (The student's answer implies the need for long-term support mechanisms.) \n\n<Point3:1> *True* (The student's answer mentions the extended time frame required for the development team.)\n\n\n<Point4:1> *True* (The student's answer correctly identifies the vulnerability of network-connected cars to cyberattacks.)\n\n<Point5:1> *True* (The student's answer mentions the need to invest in security measures.)\n \n<Point6:1> *True* (The student's answer mentions protecting the software from attacks.)\n\n<Point7:1> *True* (The student's answer correctly states that updates will be continuous.)\n\n<Point8:1> *True* (The student's answer highlights the need for rigorous testing.)\n\n<Point9:1> *True* (The student's answer mentions testing for every new release.)\n\n<Point10:1> *True*(The student's answer points out that testing will increase development costs. )\n\n<Point11:1> *True*  (The student's answer acknowledges the growth in connected cars.)\n\n<Point12:1>* True*(The student mentions the need for scalability.)\n\n<Point13:1>*True* (The student\u2019s answer implies that the development process must account for scalability.)\n\n\n<Point14:1> *True* (The student's answer correctly states that over-the-air updates are more cost-effective than service visits.)\n\n<Point15:1> *True*( The student acknowledges the increased overall costs due to long-term maintenance.) \n"
    },
    "65": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Providing over-the-air updates for car software will affect our development process and costs in several ways. We need to support the software for 25 years, which requires long-term support mechanisms. Our team must be prepared to maintain and update the software. Security is a major concern, as network-connected cars are prone to cyber-attacks. We must invest in security measures to protect the software. Each update will require rigorous testing, increasing development costs. Additionally, the software must scale as the number of connected cars grows. While over-the-air updates are cost-effective, maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions the need for long-term support mechanisms)\n\n<Point2:1> *True* (The student's answer correctly implies the need for long-term support mechanisms.)\n\n<Point3:1> *True* (The student's answer correctly states that the team must be prepared to maintain and update the software, implying an extended timeframe.)\n\n<Point4:1> *True* (The student's answer correctly mentions security concerns due to network connectivity)\n\n<Point5:1> *True* ( The student's answer mentions investing in security measures.)\n\n\n<Point6:1> *True*  (The student's answer implies protecting software from attacks.) \n<Point7:1> *True* (The student's answer correctly states that continuous updates will be required.)\n\n<Point8:1> *True* (The student's answer mentions rigorous testing for each update)\n\n<Point9:1> *True* (The student's answer implies testing for every new release through the mention of \"each update\".)\n\n<Point10:1>*True* ( The student's answer correctly states that rigorous testing will increase development costs.)\n\n<Point11:1>*True*(The student\u2019s answer mentions scaling with the growing number of connected cars.)\n\n<Point12:1> *True* (The student's answer implies that the software needs to scale without compromising performance.)\n\n<Point13:1>*True* ( The student's answer indirectly implies accounting for scalability by mentioning the need for the software to scale.)\n\n<Point14:1>*True*(The student's answer correctly mentions the cost-effectiveness of over-the-air updates compared to service visits.)\n \n<Point15:1> *True* (The student's answer correctly states that maintaining the software for 25 years will increase overall costs)\n\n\n\n"
    },
    "66": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The over-the-air software update strategy for cars has several implications for our development process and costs. We need to provide long-term support for 25 years, which means our development team must be ready to maintain and update the software over this period. Network-connected cars are vulnerable to cyber-attacks, so we need to invest in robust security measures. Continuous updates require rigorous testing to ensure software quality, which will increase development costs. Our software must also scale as more cars become connected. Although over-the-air updates are more cost-effective than service visits, maintaining the software for 25 years will result in higher overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions the need for long-term support.)\n\n<Point2:1> *True*  (The student's answer implies the need for long-term support mechanisms.) \n\n<Point3:1> *True* (The student's answer alludes to extending the development team's time frame for maintenance.)\n\n<Point4:1> *True* (The student's answer correctly mentions the vulnerability of network-connected cars to cyberattacks.)\n\n<Point5:1> *True* (The student's answer states the need to invest in security measures.)\n\n<Point6:1> *True* (The student's answer implies protecting software from attacks as part of security.)\n\n\n<Point7:1> *True* (The student's answer correctly mentions continuous updates.) \n\n<Point8:1> *True* (The student's answer mentions rigorous testing due to continuous updates.) \n\n<Point9:1> *True* (The student's answer implies testing for every new release.)\n\n\n<Point10:1> *True* (The student's answer correctly states that testing will increase costs.)\n\n\n\n<Point11:1> *True*  (The student's answer alludes to scalability with the phrase \"as more cars become connected\".)\n\n<Point12:1> *True* ( The student's answer implies the software needs to scale without compromising performance)\n\n<Point13:1> *True* (The student's answer implies accounting for scalability in the development process.)\n\n\n\n<Point14:1> *True* (The student's answer correctly states that over-the-air updates are more cost-effective than service visits.)\n<Point15:1> *True* (The student's answer correctly points out the higher overall costs due to 25 years of maintenance.)\n\n"
    },
    "67": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air software updates will have several effects on our development process and costs. Supporting the software for 25 years requires long-term support mechanisms. Our development team must maintain and update the software over this period. Cybersecurity is crucial as network-connected cars are vulnerable to attacks. We need to invest in security measures. Continuous updates need rigorous testing, increasing development costs. The software must scale as the number of connected cars grows. Over-the-air updates are cost-effective compared to service visits, but maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student mentions the need for long-term support mechanisms)\n\n<Point2:1> *True* ( The student mentions that development team needs to maintain and update the software.)\n\n<Point3:1> *False* (The student doesn't explicitly mention extending the development team's timeframe.)\n\n\n<Point4:1> *True* (The student correctly identifies cybersecurity as a crucial aspect.) \n\n<Point5:1> *True* (The student mentions investing in security measures)\n\n<Point6:1> *True*  (The student points out the need to protect from attacks)\n\n<Point7:1> *True* ( The student highlights continuous updates due to over-the-air nature.)\n\n\n<Point8:1> *True* (The student emphasizes rigorous testing for each new release.)\n\n<Point9:1> *True* (The student mentions the necessity of testing for every release)\n\n<Point10:1> *True* (The student acknowledges that extensive testing increases costs.)\n\n<Point11:1> *True* ( The student correctly points out the increasing number of connected cars as a scaling factor.)\n\n\n<Point12:1> *True* ( The student mentions the software's need to scale without performance compromise) \n\n<Point13:1> *True* (The student indicates that development process needs to consider scalability.)\n\n<Point14:1> *True* (The student states that over-the-air updates are more cost-effective than service visits.)\n\n\n\n<Point15:1> *True* ( The student correctly concludes that 25 years of maintenance will increase overall costs.)\n"
    },
    "68": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The over-the-air software update strategy for cars will impact our development process and costs. Providing long-term support for 25 years requires our development team to maintain and update the software. Network-connected cars are prone to cyber-attacks, so we need to invest in security measures. Each update requires rigorous testing to ensure quality, increasing development costs. As more cars become connected, the software must scale effectively. Over-the-air updates are cost-effective, but maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:True>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly mentions the need for long-term support.) \n\n<Point2:1> *True* (The student's answer indirectly implies the need for long-term support mechanisms by mentioning the maintenance and updates required.)\n\n<Point3:1> *False* (The student's answer doesn't explicitly mention extending the development team timeframe.)\n\n<Point4:1> *True* (The student correctly identifies the vulnerability of network-connected cars to cyberattacks.)\n\n<Point5:1> *True* ( The student mentions investing in security measures.)\n\n<Point6:1> *True*(The student's mention of \"security measures\" implies protection from malicious attacks.)\n\n<Point7:1> *True* (The student mentions the continuous updates delivered over-the-air.)\n\n<Point8:1> *True* ( The student emphasizes the need for rigorous testing.)\n\n\n<Point9:1> *True*( The student implies testing is required for every new release by mentioning  \"each update requires rigorous testing\".)\n\n<Point10:1> *True* (The student correctly identifies that rigorous and frequent testing will increase development costs.) \n\n<Point11:1> *True* (The student connects the increasing number of connected cars to the need for scalability.)\n\n<Point12:1>* True*(The student implies the importance of maintaining performance despite increasing user numbers.)\n\n<Point13:1> *True* ( The mention of \"scalable\" software development implies accounting for scalability in the process.)\n\n<Point14:1> *True* (The student correctly identifies the cost-effectiveness of OTA updates compared to service visits.)\n\n<Point15:1> *True* (The student recognizes that long-term maintenance will increase the overall development costs.) \n"
    },
    "69": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The decision to provide over-the-air software updates for cars will impact our development process and costs in multiple ways. While it is true that long-term support mechanisms are required for a 25-year maintenance period, it does not necessarily mean that the initial development costs will not remain high throughout. Investing in robust security measures is essential to protect against cyber-attacks; however, this upfront cost can lead to long-term savings by preventing costly security breaches. Rigorous testing for each update will indeed increase costs, but it ensures software reliability and safety, potentially reducing expensive recalls or fixes later on. Therefore, although the development costs may seem higher initially, the long-term benefits, such as improved security and reduced service visits, could ultimately offset these expenses.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:True>,<Point10:False>,<Point11:False>,<Point12:False>,<Point13:False>,<Point14:False>,<Point15:False>",
        "feedback": "<Point1:1> *False* (The student's answer doesn't directly mention the need for long-term support mechanisms.) \n\n<Point2:1> *False* (The student's answer doesn't explicitly state the necessity of implementing long-term support mechanisms.)\n\n<Point3:1> *False* ( The student's answer doesn\u2019t talk about extending the development team\u2019s time frame)\n\n<Point4:1> *True* ( The student acknowledges the vulnerability of network-connected cars to cyberattacks.)\n\n<Point5:1> *True* (The student mentions the need for investing in security measures.) \n\n<Point6:1> *True*  (The student's answer indirectly implies protecting software from malicious attacks by stating \"robust security measures\". )\n\n<Point7:1> *True* (The student acknowledges the continuous updates nature of the software.)\n\n<Point8:1> *True* ( The student emphasizes the need for rigorous testing.)\n\n<Point9:1> *True* (The student mentions testing for each new release.)\n\n\n<Point10:1> *False* (The student argues that rigorous testing may lead to increased costs but doesn't explicitly say it will increase development costs significantly.) \n\n<Point11:1> *False* (The student does not directly address the increasing number of cars with network connections)\n <Point12:1> *False*( The student\u2019s answer doesn't discuss the software's ability to scale without compromising performance)\n\n<Point13:1> *False* ( The student does not mention accounting for scalability in the development process) \n\n<Point14:1> *True* (The student correctly points out that over-the-air updates are more cost-effective than service visits.)\n\n <Point15:1> *True* (The student acknowledges that developing and maintaining software for 25 years will increase the overall cost.) \n"
    },
    "70": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air updates for car software are significant. We need to do stuff for long-term support and ensure security measures. Testing updates is important. The software should work well as more cars get connected. Costs might be high, but it could be worth it.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:False>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:False>,<Point10:False>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:False>,<Point15:False>",
        "feedback": "<Point1:1> *False* (The student's answer does not mention providing patches and upgrades over the air for 25 years specifically.)\n<Point2:1> *False* (The student's answer does not mention long-term support mechanisms.)\n\n<Point3:1> *False*(The student's answer does not mention extending the development team's timeframe to accommodate software maintenance and updates.)\n\n<Point4:1> *True* (The student's answer mentions the need for security measures.)\n<Point5:1> *True* (The student's answer mentions the need for security measures, indirectly implying investment in them)\n<Point6:1> *False*( The student\u2019s answer does not mention protecting the software from malicious attacks specifically.)\n\n<Point7:1> *True*(The student's answer mentions the continuous updates of the software.)\n\n<Point8:1> *True*(The student's answer mentions the importance of testing updates.)\n \n<Point9:1> *False* (The student's answer does not specify testing for every new release.)\n\n\n<Point10:1>*False*( The student\u2019s answer doesn't mention increasing development costs significantly.)\n\n<Point11:1> *True* (The student's answer mentions the software working well as more cars get connected, implying consideration of scalability.)\n<Point12:1> *True* (The student's answer implies the need for the software to scale without compromising performance.)\n\n<Point13:1> *False*( The student's answer does not mention accounting for scalability in the development process.)\n\n<Point14:1> *True* (The student's answer mentions that over-the-air updates could be more cost-effective than service visits.)\n<Point15:1>*True*(The student's answer mentions that costs might be high due to long-term support.)"
    }
}