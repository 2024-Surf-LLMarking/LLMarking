{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting requirements from stakeholders. System Analysis and Design: Analyzing requirements and creating a blueprint. Implementation: Writing the code. Testing: Checking the system for defects. Deployment: Releasing the software to users. Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* The student correctly identified Requirement Gathering as a phase of SDLC. \n\n<Point2:1> *True* The student accurately described requirement gathering as collecting requirements from stakeholders.\n\n<Point3:1> *True*  The student correctly listed System Analysis and Design as a phase.\n\n<Point4:1> *True* The student provided an accurate description of system analysis and design. \n\n<Point5:1> *True* The student correctly identified Implementation as a phase.\n\n<Point6:1> *True* The student's description of implementation as \"Writing the code\" is a correct simplification.\n\n<Point7:1> *True* The student listed Testing as a phase.\n\n<Point8:1> *True* The student's description captures the essence of testing - identifying defects.\n\n<Point9:1> *True* The student correctly identified Deployment as a phase.\n\n<Point10:1> *True*  The student accurately described deployment as releasing software to users.\n\n<Point11:1> *True* The student listed Maintenance as a phase. \n\n<Point12:1> *True* The student's description of maintenance as providing support after deployment is correct. \n"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Understanding what the software needs to do by talking to stakeholders. System Analysis and Design: Creating a detailed plan and design for the software. Implementation (Coding): Developing the software based on the design. Testing: Ensuring the software works correctly by finding and fixing bugs. Deployment: Making the software available to the users. Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies \"Requirement Gathering\" as a key phase.\n<Point2:1> *True* The student accurately describes the purpose of requirement gathering - understanding user needs. \n<Point3:1> *True* The student lists \"System Analysis and Design\" as another key phase.\n<Point4:1> *True* The description of this phase focusing on planning and design aligns with the reference answer.\n<Point5:1> *True*  The student mentions \"Implementation (Coding)\" correctly. \n<Point6:1> *True* The explanation of coding based on design documents is consistent with the reference.\n<Point7:1> *True* \"Testing\" is identified as a key phase.\n<Point8:1> *True*  The student accurately describes testing as verifying system functionality and identifying defects.\n<Point9:1> *True* The student correctly lists \"Deployment\".\n<Point10:1> *True* The description of deployment involving making the software accessible to users is accurate.\n<Point11:1> *True* The student includes \"Maintenance\" as a key phase. \n<Point12:1> *True*  The explanation of maintenance encompassing ongoing support and improvement matches the reference. \n\n\n\n"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are: Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed. System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created. Implementation (Coding): This phase involves writing the code according to the design documents. Testing: The system is verified against the requirements to identify and fix defects. Deployment: The software is released to the production environment for users. Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identified Requirement Gathering as a key phase. \n<Point2:1> *True* The student accurately described Requirement Gathering.\n\n<Point3:1> *True* The student correctly identified System Analysis and Design as a key phase.\n\n<Point4:1> *True* The student accurately described System Analysis and Design.\n\n<Point5:1> *True* The student correctly identified Implementation (Coding) as a key phase.\n\n<Point6:1> *True* The student accurately described Implementation (Coding). \n\n<Point7:1> *True* The student correctly identified Testing as a key phase.\n<Point8:1> *True* The student accurately described Testing.\n\n<Point9:1> *True* The student correctly identified Deployment as a key phase.\n\n<Point10:1> *True* The student accurately described Deployment.\n\n<Point11:1> *True* The student correctly identified Maintenance as a key phase.\n<Point12:1> *True* The student accurately described Maintenance. \n\n\n\n"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are: Requirement Gathering: This is where the requirements from stakeholders are collected. System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created. Implementation (Coding): The next step is to write the code based on the design. Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects. Deployment: The software is then deployed to the production environment. Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies Requirement Gathering as a key phase.\n\n<Point2:1> *True* The student accurately describes Requirement Gathering as collecting requirements from stakeholders.\n\n<Point3:1> *True* The student correctly lists System Analysis and Design as a phase.\n\n<Point4:1> *True*  The student accurately describes System Analysis and Design as analyzing requirements and creating a system blueprint.\n\n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a key phase.\n\n<Point6:1> *True* The student provides an accurate description of Implementation as writing code based on the design. \n\n<Point7:1> *True* The student correctly lists Testing as a key phase.\n\n<Point8:1> *True* The student accurately describes Testing as verifying the system against requirements and fixing defects.\n\n\n<Point9:1> *True*  The student correctly identifies Deployment as a phase.\n\n<Point10:1> *True* The student accurately describes Deployment as releasing the software to production for users.\n\n<Point11:1> *True* The student correctly identifies Maintenance as a key phase.\n\n<Point12:1> *True* The student provides an accurate description of Maintenance as ongoing support and enhancement. \n"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases: Requirement Gathering: Collecting the requirements from stakeholders. System Analysis and Design: Analyzing the requirements and designing the system. Implementation (Coding): Writing the code based on the design. Testing: Checking the system for defects. Deployment: Releasing the software for use. Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies Requirement Gathering as a key phase.\n<Point2:1> *True* The student accurately describes Requirement Gathering as collecting requirements from stakeholders.\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a key phase. \n<Point4:1> *True* The student accurately describes System Analysis and Design as analyzing requirements and designing the system.\n\n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a key phase.\n<Point6:1> *True* The student accurately describes Implementation (Coding) as writing code based on the design. \n\n<Point7:1> *True* The student correctly identifies Testing as a key phase.\n<Point8:1> *True* The student accurately describes Testing as checking the system for defects.\n\n\n<Point9:1> *True*  The student correctly identifies Deployment as a key phase.\n<Point10:1> *True* The student accurately describes Deployment as releasing the software for use.\n\n<Point11:1> *True* The student correctly identifies Maintenance as a key phase.\n<Point12:1> *True* The student accurately describes Maintenance as supporting and enhancing the software after deployment. \n"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes: Requirement Gathering: Gathering what is needed for the project. System Analysis and Design: Creating a design based on the requirements. Implementation (Coding): Coding the project. Testing: Testing the code. Deployment: Making the software available. Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies Requirement Gathering as a phase of SDLC. \n<Point2:1> *True*  The student provides a basic understanding of what Requirement Gathering entails.\n\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a phase.\n<Point4:1> *True* The student's description aligns with the concept of System Analysis and Design.\n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a phase.\n\n<Point6:1> *True* The student's description captures the essence of Implementation.\n<Point7:1> *True* The student correctly identifies Testing as a phase.\n\n<Point8:1> *True*  The student's description aligns with the purpose of testing.\n<Point9:1> *True* The student correctly identifies Deployment as a phase. \n<Point10:1> *True* The student provides a concise explanation of deployment.\n<Point11:1> *True* The student correctly identifies Maintenance as a phase.\n\n<Point12:1> *True* The student's description aligns with the concept of maintenance. \n\n\n\n"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are: Requirement Gathering: Understanding what the stakeholders need. System Analysis and Design: Planning how the system will be built. Implementation (Coding): Writing the actual code. Testing: Making sure the software works as expected. Deployment: Launching the software for users. Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies Requirement Gathering as a key phase.\n<Point2:1> *True* The student provides a correct description of Requirement Gathering.\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a key phase. \n<Point4:1> *True* The student provides a correct, concise description of System Analysis and Design.\n\n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a key phase.\n<Point6:1> *True* The student provides a correct, concise description of Implementation (Coding). \n<Point7:1> *True* The student correctly identifies Testing as a key phase.\n\n<Point8:1> *True* The student provides a correct, concise description of Testing.\n<Point9:1> *True* The student correctly identifies Deployment as a key phase. \n\n<Point10:1> *True* The student provides a correct, concise description of Deployment.\n<Point11:1> *True* The student correctly identifies Maintenance as a key phase. \n<Point12:1> *True* The student provides a correct, concise description of Maintenance.\n\n\n\n"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of: Requirement Gathering: Collecting the requirements needed for the project. System Analysis and Design: Designing the system based on the requirements. Implementation (Coding): Writing the code for the project. Testing: Checking the software for any issues. Deployment: Releasing the final product to the users. Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies Requirement Gathering as a key phase of SDLC. \n<Point2:1> *True* The student accurately describes Requirement Gathering as collecting necessary requirements for the project.\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a key phase.\n<Point4:1> *True* The student provides a correct description of System Analysis and Design as designing the system based on requirements.\n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a key phase.\n\n<Point6:1> *True* The student accurately describes Implementation (Coding) as writing code for the project. \n<Point7:1> *True*  The student correctly identifies Testing as a key phase. \n<Point8:1> *True* The student provides a suitable description of Testing as checking the software for issues.\n<Point9:1> *True* The student correctly identifies Deployment as a key phase.\n\n<Point10:1> *True* The student accurately describes Deployment as releasing the final product to users.\n<Point11:1> *True* The student correctly identifies Maintenance as a key phase.\n<Point12:1> *True* The student accurately describes Maintenance as providing support and updates after release. \n\n\n"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting what needs to be developed from the stakeholders. System Analysis and Design: Analyzing these requirements and making a system design. Implementation (Coding): Writing the code according to the design. Testing: Verifying that the system works as intended and fixing any defects. Deployment: Making the software available to the users. Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies Requirement Gathering as a key phase. \n<Point2:1> *True* The student accurately describes requirement gathering as collecting needs from stakeholders.\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a key phase.\n<Point4:1> *True* The student provides a correct description of system analysis and design. \n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a key phase.\n<Point6:1> *True*  The student accurately describes implementation as coding according to the design.\n\n<Point7:1> *True* The student correctly identifies Testing as a key phase. \n<Point8:1> *True* The student provides a correct description of testing, mentioning verification and defect fixing.\n\n<Point9:1> *True*  The student correctly identifies Deployment as a key phase. \n<Point10:1> *True* The student accurately describes deployment as making the software available to users.\n\n<Point11:1> *True* The student correctly identifies Maintenance as a key phase. \n<Point12:1> *True* The student accurately describes maintenance as providing ongoing support and updates.\n\n\n\n"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes: Requirement Gathering: Understanding what the project needs. System Analysis and Design: Creating a detailed plan based on the requirements. Implementation (Coding): Writing the necessary code. Testing: Ensuring the system meets requirements and fixing any problems. Deployment: Making the software available to the end-users. Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identified Requirement Gathering as a phase of SDLC. \n\n<Point2:1> *True* The student accurately describes the purpose of requirement gathering: understanding what needs to be developed.\n\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a phase.\n\n<Point4:1> *True*  The student provides a suitable description of System Analysis and Design, mentioning creating a plan based on requirements.\n\n<Point5:1> *True*  The student correctly lists Implementation (Coding) as a phase.\n\n<Point6:1> *True* The student's explanation that it involves writing the code is in line with the reference answer.\n\n<Point7:1> *True* The student identifies Testing as a phase of the SDLC.\n\n<Point8:1> *True* The student explains that testing ensures the system meets requirements and fixes problems, which aligns with the reference answer.\n\n<Point9:1> *True* The student correctly names Deployment as a phase.\n\n<Point10:1> *True* The student's description of making the software available to users matches the reference answer.\n\n<Point11:1> *True*  The student identifies Maintenance as a final stage.\n\n<Point12:1> *True* The student accurately describes maintenance as continuous improvement and updating of the software. \n\n\n\n"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes the Waterfall model as a linear and sequential approach.)\n\n<Point2:1> *True* (The student correctly explains that the Waterfall model flows in one direction without overlap or iteration.)\n\n<Point3:1> *True*  ( The student highlights the difficulty of implementing changes in the Waterfall model due to its linear nature)\n\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental, emphasizing flexibility, collaboration, and customer feedback.)\n\n\n<Point5:1> *True*(The student correctly explains that development in Agile happens in small increments called iterations.)\n\n<Point6:1> *True* (The student mentions Agile's allowance for continuous stakeholder feedback and adaptability to changing requirements)\n\n<Point7:1> *True* ( The student highlights the ease of implementing changes at any stage in Agile due to its iterative nature.) \n"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear and sequential approach where phases are completed one after another. \n<Point2:1> *True* The student uses the analogy of a straight path to illustrate the unidirectional flow of the Waterfall model, highlighting the lack of overlapping or iteration.\n<Point3:1> *True* The student accurately points out that changes in the Waterfall model are difficult to implement once a phase is completed due to the need for revisiting previous phases.\n\n<Point4:2> *True* The student correctly identifies Agile as a flexible and iterative approach.\n<Point5:1> *True* The student mentions the use of small, repeated cycles (iterations) in Agile development. \n<Point6:1> *True*  The student highlights the importance of ongoing feedback in the Agile methodology.\n\n<Point7:1> *True* The student accurately states that changes can be made at any stage in Agile due to its adaptability.\n\n\n"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as linear and sequential, where phases are completed one after another. \n\n<Point2:1> *True* The student uses the waterfall analogy effectively to illustrate the unidirectional flow of the Waterfall model.\n\n<Point3:1> *True* The student correctly highlights the difficulty in implementing changes within the Waterfall model due to its rigid structure.\n\n<Point4:2> *True*  The student accurately captures the essence of Agile as a flexible, collaborative, and customer-centric approach.\n\n<Point5:1> *True* The student explains the concept of iterations in Agile development, emphasizing their role in breaking down the project into manageable chunks.\n\n<Point6:1> *True* The student correctly points out the importance of continuous feedback and adaptation in Agile. \n\n<Point7:1> *True* The student accurately states that Agile allows for changes to be incorporated throughout the development process, accommodating evolving requirements.\n"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the linear and sequential nature of the Waterfall model, where each phase must be completed before moving on.\n\n<Point2:1> *True* The student accurately portrays the unidirectional flow of the Waterfall model, comparing it to a waterfall. \n\n<Point3:1> *True* The student correctly identifies the difficulty of implementing changes in the Waterfall model once a phase is completed due to the need for revisiting and potentially redoing previous work.\n\n<Point4:2> *True*  The student accurately describes the Agile model's iterative and incremental approach, emphasizing its focus on flexibility and customer feedback.\n\n<Point5:1> *True* The student correctly explains that Agile development occurs in small, manageable increments called iterations.\n\n<Point6:1> *True* The student highlights Agile's emphasis on continuous feedback from stakeholders and adaptability to changing requirements throughout the development process.\n\n<Point7:1> *True* The student accurately states that changes can be made at any stage in the Agile model, allowing for evolving requirements. \n\n\n"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student correctly identifies the linear and sequential nature of the Waterfall model where each phase is completed before the next begins. \n\n<Point2:1> *True*  The student accurately describes the unidirectional flow of the Waterfall model.\n\n<Point3:1> *True* The student correctly explains the difficulty in incorporating changes once a phase in the Waterfall model is complete.\n\n<Point4:2> *True* The student accurately portrays Agile's iterative and incremental approach emphasizing flexibility and collaboration.\n\n<Point5:1> *True* The student mentions Agile's use of iterations for development, allowing for regular reassessment and adjustments.\n\n<Point6:1> *True* The student highlights the importance of continuous stakeholder feedback and adaptability to changing requirements in Agile.\n\n<Point7:1> *True* The student correctly explains that changes are accommodated more easily at any stage within the Agile methodology. \n\n\n"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the linear and sequential nature of the Waterfall model and how each phase must be completed before moving on. \n<Point2:1> *True* The student accurately compares the flow of the Waterfall process to a waterfall, emphasizing its unidirectional nature.\n\n<Point3:1> *True*  The student correctly highlights the difficulty in making changes in the Waterfall model once a phase is complete.\n\n<Point4:2> *True* The student provides a good description of the Agile model's iterative and incremental approach and its focus on flexibility, collaboration, and customer feedback.\n<Point5:1> *True*  The student accurately mentions the use of small, manageable increments called iterations in the Agile methodology.\n\n<Point6:1> *True* The student correctly states that Agile allows for continuous feedback from stakeholders throughout the development process.\n\n<Point7:1> *True* The student rightly points out that changes can be made at any stage in the Agile process due to its flexibility and adaptability.\n\n\n\n"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student correctly identifies the Waterfall model's sequential nature and the completion of each phase before progressing. \n\n<Point2:1> *True* The student accurately describes the unidirectional flow of the Waterfall model, resembling a waterfall.\n\n<Point3:1>*True* The student correctly points out that changes are difficult to implement in the Waterfall model once a phase is complete.\n\n<Point4:2> *True* The student accurately portrays the Agile model's iterative and incremental approach, highlighting its focus on flexibility and collaboration.\n\n<Point5:1> *True* The student mentions iterations as small development cycles within the Agile model, allowing for regular feedback and adaptation.\n\n<Point6:1> *True* The student correctly states that Agile welcomes continuous stakeholder feedback and accommodates changing requirements throughout development.\n\n<Point7:1> *True* The student accurately highlights Agile's flexibility in incorporating changes at any stage of the development process. \n\n\n"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as a linear and sequential approach where phases must be completed before moving on.\n\n<Point2:1> *True* The student correctly states that the Waterfall model flows in one direction without overlapping or iteration. \n\n<Point3:1> *True*  The student accurately points out that changes are difficult to implement once a phase is complete in the Waterfall model.\n\n\n<Point4:2> *True* The student correctly identifies Agile as an iterative and incremental approach that emphasizes flexibility, collaboration, and customer feedback.\n\n<Point5:1> *True* The student explains that Agile development occurs in small iterations.\n\n<Point6:1> *True* The student accurately mentions that Agile allows for continuous feedback from stakeholders and adaptability to changing requirements.\n\n<Point7:1> *True* The student correctly states that Agile allows for changes at any stage of the development process. \n"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student accurately describes the Waterfall model as a linear, sequential approach where each phase must be completed before moving on.) \n\n<Point2:1> *True* (The student mentions that the Waterfall process flows in one direction without overlapping or iteration, reflecting the concept of a unidirectional flow like a waterfall.)\n\n<Point3:1> *True* (The student correctly identifies the difficulty of making changes in the Waterfall model once a phase is completed.)\n\n<Point4:2> *True* (The student accurately describes Agile as an iterative and incremental approach emphasizing flexibility, collaboration, and customer feedback.)\n\n<Point5:1> *True* (The student mentions that Agile development occurs in small iterations, which is a key characteristic.) \n\n<Point6:1> *True* (The student highlights the continuous feedback aspect of Agile and its ability to adapt to changing requirements.)\n\n<Point7:1> *True* ( The student accurately states that changes are easily accommodated in Agile throughout the development process.)\n\n\n\n"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as a linear approach with sequential phases. \n\n<Point2:1> *True* The student correctly explains that the Waterfall model progresses in one direction without overlapping phases, like a waterfall.\n\n<Point3:1> *True*  The student clearly states that changes are difficult to incorporate into the Waterfall model once a phase is completed.\n\n<Point4:2> *True*  The student accurately defines the Agile model as an iterative and incremental approach prioritizing flexibility and collaboration.\n\n<Point5:1> *True* The student correctly mentions that development in the Agile model occurs in small, manageable increments known as iterations.\n\n<Point6:1> *True* The student highlights the Agile model's emphasis on continuous feedback from stakeholders throughout development.\n\n<Point7:1> *True* The student accurately points out that the Agile model allows for changes at any stage of development to accommodate evolving needs. \n"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of the bond strength between elements in a module.\n\n<Point2:1> *True* The student accurately states that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student mentions that cohesion considers the unifying factor or purpose of the class, although not explicitly stated as a \"unifying factor\". \n\n<Point4:2> *True* The student provides a good explanation of high cohesion, emphasizing the close relationship and shared goal of elements. \n\n<Point5:2> *True* The student correctly describes low cohesion as a lack of close relationships and a clear purpose among elements.  \n"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies that cohesion refers to the bond strength between elements within a module. \n<Point2:1> *True*  The student accurately states that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student mentions that cohesion relates to the unifying factor or purpose of the class, which aligns with the reference answer.\n<Point4:2> *True* The student provides a good explanation of high cohesion, highlighting the close relationship and shared goal of elements within a module.\n\n<Point5:2> *True* The student accurately describes low cohesion as a lack of strong connections and a clear purpose among elements. \n\n\n"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as the bond strength between elements in a module. \n<Point2:1> *True* The student accurately mentions the relationship between data and methods within a class/module.\n<Point3:1> *True*  The student acknowledges the unifying factor or purpose of the class as a part of cohesion.\n<Point4:2> *True* The student provides a good explanation of high cohesion, highlighting the close relation and common goal.\n<Point5:2> *True* The student correctly describes low cohesion as loose relationships and lack of unified purpose. \n\n\n"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True*  The student correctly defines cohesion as a measure of bond strength between elements in a module. \n\n<Point2:1> *True* The student mentions the relationship strength between data and methods within a class, aligning with this point.\n\n<Point3:1> *True* The student touches upon the unifying factor or purpose served by a class as part of cohesion.\n\n<Point4:2> *True*  The student accurately describes high cohesion as elements working together towards a common goal.\n\n<Point5:2> *True* The student correctly explains low cohesion as elements lacking a clear or unified purpose. \n"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of bond strength between elements in a module.\n\n<Point2:1> *True*  The student accurately states that cohesion measures the relationship strength between data and methods within a class. \n\n<Point3:1> *True* The student mentions \"unifying factor or purpose\" which aligns with the reference answer's point about the class serving a purpose.\n\n<Point4:2> *True* The student correctly explains that high cohesion means elements work together towards a common goal.\n\n<Point5:2> *True*  The student accurately describes low cohesion as loosely related elements lacking a unified purpose. \n\n\n"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as the bond strength between elements in a module.\n\n<Point2:1> *True*  The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student touches upon the unifying factor or purpose of the class when discussing how cohesion reflects the focus on a single task.\n\n<Point4:2> *True* The student provides a good explanation of high cohesion, emphasizing the close relationship of elements and their shared goal.\n\n\n<Point5:2> *True* The student accurately describes low cohesion as a situation where elements are loosely related and lack a clear purpose. \n"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True*  The student correctly defines cohesion as a measure of the bond strength between elements within a module. \n<Point2:1> *True* The student accurately mentions that cohesion measures the relationship strength between data and methods of a class.\n<Point3:1> *True* The student highlights the unifying factor or purpose of a class as part of cohesion.\n<Point4:2> *True* The student effectively explains high cohesion as elements working together towards a common goal.\n<Point5:2> *True* The student correctly describes low cohesion as loosely connected elements lacking a clear purpose. \n\n\n\n"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True*  (The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.)\n\n<Point3:1> *True* ( The student includes the concept of a unifying factor or purpose served by the class, which is another aspect of cohesion.)\n\n<Point4:2> *True* (The student correctly explains that high cohesion implies elements working towards a common goal and being closely related.)\n\n<Point5:2> *True* (The student accurately describes low cohesion as implying loosely related elements without a clear purpose.) \n\n\n\n"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of the bond strength between elements in a module. \n<Point2:1> *True* The student accurately states that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True*  The student mentions that cohesion considers the unifying factor or purpose a class serves, which aligns with the reference answer. \n\n<Point4:2> *True* The student provides a correct explanation of high cohesion, emphasizing the close relationship of elements and their shared goal.\n<Point5:2> *True* The student accurately describes low cohesion as involving loosely related elements lacking a clear purpose. \n\n\n\n"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True*  The student correctly defines cohesion as a measure of bond strength between elements in a module.\n\n<Point2:1> *True* The student accurately mentions that cohesion measures the relationship strength between data and methods within a class. \n\n<Point3:1> *True* The student captures the essence of cohesion by stating it assesses the unifying factor or purpose of a class.\n\n<Point4:2> *True*  The student correctly explains high cohesion as elements working closely together towards a common goal.\n\n<Point5:2> *True* The student accurately describes low cohesion as loosely related elements lacking a clear, unified purpose. \n"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable and important attributes of processes. \n<Point2:1> *True* The student accurately describes them as standard systematic procedures.\n<Point3:1> *True* They correctly state that internal milestones indicate the engineers are on the right track.\n\n<Point4:2> *True*  The student correctly mentions that internal milestones help assess the development team's progress.\n<Point5:1> *True* The student accurately points out that they aid in identifying issues and risks. \n<Point6:1> *True* The student correctly states that they allow for adjustments to be made to the project plan.\n\n<Point7:1> *True*  The student provides a relevant example of completing a specific feature.\n<Point8:1> *True* The student gives another appropriate example of testing and debugging code. \n\n<Point9:1> *True*  The student includes a suitable example of reaching a certain performance or functionality level.\n\n\n\n"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable and important aspects related to processes. \n<Point2:1> *False*  The student doesn't explicitly state that internal milestones are standard systematic procedures, although the idea is implied.\n\n<Point3:1> *True* The student accurately states that internal milestones indicate whether engineers are on the right track.\n\n<Point4:2> *True* The student mentions that milestones help assess the development team's progress. \n\n<Point5:1> *True*  The student correctly identifies that milestones help identify issues and risks.\n\n<Point6:1> *True* The student states that milestones allow for making necessary adjustments to the project plan.\n<Point7:1> *True* The student provides completing a feature as an example of a milestone.\n\n<Point8:1> *True*  The student lists testing and debugging as another example of a milestone.\n\n<Point9:1> *True* Achieving a specific performance level is correctly identified as a possible milestone by the student. \n"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True*  The student correctly identifies internal milestones as measurable attributes of processes.\n<Point2:1> *True* The student accurately describes internal milestones as standard procedures. \n<Point3:1> *True* The student explains that these milestones show the engineers are on the right path.\n<Point4:2> *True*  The student mentions that internal milestones can be used to assess progress.\n<Point5:1> *True* The student includes identifying issues and risks as a use for internal milestones.\n<Point6:1> *True* The student states that adjustments to the project plan can be made based on these milestones.\n<Point7:1> *True* The student provides completing a specific feature as an example of an internal milestone.\n<Point8:1> *True*  The student lists testing and debugging code as another example. \n<Point9:1> *True* The student correctly mentions reaching a certain performance level as a type of internal milestone. \n\n\n\n"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable attributes related to processes.\n\n<Point2:1> *True* The student accurately describes them as standard systematic procedures.\n\n<Point3:1> *True* The student mentions that they indicate the team is on the right track.\n\n<Point4:2> *True* The student includes assessing team progress as a use of milestones. \n\n<Point5:1> *True*  The student correctly states that identifying issues and risks is a function of internal milestones.\n\n<Point6:1> *True* The student highlights adjusting the project plan as a benefit of using milestones.\n\n<Point7:1> *True* The student provides completing a feature as an example of a milestone.\n\n<Point8:1> *True* The student lists testing and debugging as another milestone example.\n\n<Point9:1> *True* The student correctly includes reaching a performance level as a milestone type. \n\n\n\n"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable steps showing progress in development processes.) \n\n<Point2:1> *True* (The student accurately describes them as standard procedures.)\n\n<Point3:1> *True* (They state that internal milestones indicate the project is on track, aligning with this point.)\n\n<Point4:2> *True* ( The student mentions using milestones to assess progress.) \n\n<Point5:1> *True* (The student includes identifying problems as a use of milestones.)\n\n<Point6:1> *True* (They also mention making changes to the plan based on milestones, fulfilling this point.)\n\n\n<Point7:1> *True*(The student provides completing a feature as an example, which satisfies this point. )\n\n<Point8:1> *True* (Mentioning debugging as an example aligns with this point.)\n \n<Point9:1> *True* ( The student's inclusion of reaching a performance goal covers this point.)\n\n\n\n"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable checkpoints that indicate progress. \n\n<Point2:1> *False* While the student mentions \"systematic procedures,\" they don't explicitly define them as standard.\n\n<Point3:1> *True* The student accurately states that internal milestones ensure the development team is on the right track.\n\n<Point4:2> *True* The student correctly identifies assessing progress as a use of internal milestones.\n\n<Point5:1> *True* The student mentions identifying issues as a benefit of using internal milestones. \n\n<Point6:1> *True*  The student accurately states that internal milestones help adjust the project plan.\n\n<Point7:1> *True* The student provides completing a feature as an example of an internal milestone.\n\n<Point8:1> *True* The student includes testing the code as another example.\n\n<Point9:1> *True* The student correctly gives reaching a specific performance level as a valid example. \n"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable aspects of processes that indicate progress. \n\n<Point2:1> *True* The student identifies internal milestones as systematic procedures.\n\n<Point3:1> *True*  The student states that internal milestones show engineers are on the right path.\n\n<Point4:2> *True* The student mentions that internal milestones are used to assess progress.\n\n<Point5:1> *True* The student correctly identifies risk identification as a function of internal milestones.\n\n<Point6:1> *True* The student includes making necessary adjustments to the project plan as a use of internal milestones.\n\n\n<Point7:1> *True* The student provides completing a feature as an example of an internal milestone.\n\n<Point8:1> *True* The student gives debugging code as another example.\n\n<Point9:1> *True* The student includes achieving a performance level as a final example. \n"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly states that internal milestones are measurable attributes of processes.) \n<Point2:1> *True* (The student accurately describes internal milestones as standard procedures.)\n<Point3:1> *True* (The student mentions that these milestones indicate the project is progressing in the right direction.)\n<Point4:2> *True* (The student includes the function of assessing development team progress using milestones.)\n<Point5:1> *True* (The student correctly states that milestones help identify issues and risks.)\n<Point6:1> *True* (The student accurately describes how milestones allow for adjustments to the project plan.)\n<Point7:1> *True* (The student provides completing a feature as an example of internal milestones.) \n<Point8:1> *True* ( The student lists testing and debugging as examples of milestones.)\n<Point9:1> *True* (The student mentions achieving performance goals as another example.) \n\n\n"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable attributes of processes. \n<Point2:1> *False*  The student does not explicitly state that internal milestones are \"standard systematic procedures.\" While their answer implies this concept, it's not directly stated.\n\n<Point3:1> *True* The student mentions that internal milestones \"show that the engineers are on the right path,\" aligning with this point.\n<Point4:2> *True* The student accurately states that milestones are used to assess development team progress. \n\n<Point5:1> *True* The student includes identifying issues and risks as a use for internal milestones.\n\n<Point6:1> *True* The student correctly mentions making necessary adjustments to the project plan as a use of internal milestones.\n<Point7:1> *True* The student provides completing a feature as an example, aligning with this point.\n<Point8:1> *True* The student lists testing and debugging the code as another relevant example.\n\n<Point9:1> *True* Reaching a performance level is correctly given by the student as a possible internal milestone. \n\n\n\n"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable attributes of processes.\n<Point2:1> *False*  The student doesn't explicitly mention that internal milestones are standard systematic procedures. While they imply this through the phrase \"standard procedures,\" it is not directly stated as in the reference answer.\n\n<Point3:1> *True* The student correctly states that milestones indicate engineers are on the right path.\n<Point4:2> *True* The student correctly mentions assessing the development team's progress as a use of internal milestones.\n\n<Point5:1> *True* The student correctly states that internal milestones can be used to identify issues and risks.\n\n<Point6:1> *True*  The student accurately notes that milestones allow for making necessary adjustments to the project plan.\n<Point7:1> *True* The student provides completing a specific feature as an example of an internal milestone.\n\n<Point8:1> *True* The student lists testing and debugging the code as another valid example of an internal milestone. \n<Point9:1> *True* The student includes achieving a specific performance level as an appropriate example of an internal milestone.\n\n\n\n"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student lists the correct series of smaller development cycles.) \n<Point4:1> *True* (The student correctly mentions the focus on quick delivery of functional software.)\n<Point5:2> *True*  (The student accurately describes the use of feedback from users and stakeholders for improvement.) \n\n\n"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies the RAD model as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately states that RAD emphasizes quicker development and less time on traditional planning.\n<Point3:1> *True* The student lists the key development cycles involved in RAD: planning, design, construction, and testing.\n<Point4:1> *True* The student correctly points out the focus on quick delivery of functional software to clients and stakeholders. \n<Point5:2> *True*  The student accurately describes how RAD incorporates feedback from users for continuous refinement. \n"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach. \n\n<Point2:1> *True* The student accurately describes RAD's emphasis on less time in planning and more focus on development.\n\n<Point3:1> *True* The student lists the correct series of smaller development cycles involved in RAD.\n\n<Point4:1> *True* The student correctly states the goal of quick delivery of functional software to clients and stakeholders.\n\n<Point5:2> *True*  The student accurately mentions the importance of incorporating user and stakeholder feedback for refinement. \n"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student accurately describes RAD as an iterative and prototyping approach.) \n\n<Point2:1> *True* (The student correctly states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student lists the correct series of smaller development cycles.)\n\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.) \n\n<Point5:2> *True* ( The student mentions the incorporation of feedback for refinement.)\n\n\n\n"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True*  The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately explains that RAD emphasizes less time on planning and more on development.\n<Point3:1> *True* The student lists the series of smaller development cycles involved in RAD.\n<Point4:1> *True* The student correctly states the focus on quick delivery of functional software to clients. \n<Point5:2> *True*  The student mentions the incorporation of feedback from users and stakeholders for refinement. \n\n\n"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately describes RAD's emphasis on less planning and more development time.)\n<Point3:1> *True* (The student lists the key development cycles within the RAD model.) \n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student correctly mentions the importance of user feedback in the RAD model.)\n\n\n"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately states that RAD focuses on less planning and more development time.\n<Point3:1> *True* The student lists the correct series of smaller development cycles within RAD.\n<Point4:1> *True* The student highlights the goal of quick delivery of functional software.\n<Point5:2> *True* The student mentions the incorporation of end-user feedback for refinement. \n\n\n"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach.\n\n<Point2:1> *True*  The student accurately explains that RAD emphasizes quicker development over extensive planning.\n\n<Point3:1> *True* The student lists the key development cycles within the RAD model accurately. \n<Point4:1> *True* The student correctly states the focus on quick delivery of functional software.\n\n<Point5:2> *True* The student correctly mentions incorporating feedback from end-users and stakeholders for refinement. \n\n\n"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.) \n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student lists the key development cycles involved in RAD.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student mentions the importance of end-user feedback for improvement.) \n\n\n"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.) \n<Point2:1> *True* (The student accurately states that RAD prioritizes development over lengthy planning phases.)\n<Point3:1> *True* (The student lists the key development cycles within the RAD model.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software as a core aspect of RAD.)\n<Point5:2> *True* (The student correctly mentions the incorporation of end-user feedback for continuous refinement.) \n\n\n\n"
    },
    "50": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing are concepts in programming languages related to how types of variables are handled. Weak typing checks the types of variables at run time, which means type errors can occur when the program is running. Strong typing checks the types at compile time, catching errors before the program runs. Strong typing is often recommended because it helps reduce bugs by catching errors early. However, it can make the code more rigid and harder to modify. Ultimately, the choice depends on the project requirements, such as whether flexibility or early error detection is more important.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly explains that weak typing checks types at runtime.\n<Point2:1> *True*  The student accurately states that strong typing performs type checking during compilation. \n<Point3:1> *True* The answer correctly identifies that strong typing helps reduce bugs.\n<Point4:1> *True*  The student correctly points out that strong typing can make code less flexible.\n<Point5:1> *True* The student acknowledges that the best choice depends on project needs. \n\n\n"
    },
    "51": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Weak typing allows for more flexibility by checking variable types at run time, which can sometimes lead to type errors during execution. On the other hand, strong typing checks variable types at compile time, which helps catch errors early and reduces bugs. Strong typing is generally recommended for its robustness, although it can make the code less flexible and harder to change. ",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly defines weak typing as checking types at runtime.  \n<Point2:1> *True* The student accurately describes strong typing as checking types at compilation time. \n<Point3:1> *True* The student mentions the benefit of strong typing in reducing bugs.\n<Point4:1> *True* The student correctly points out that strong typing can lead to less flexibility and harder modifications.\n<Point5:1> *True* The student concludes by acknowledging that the choice depends on project needs. \n\n\n"
    },
    "52": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing involves checking the types of variables at compile time, while weak typing checks them at run time. Strong typing is preferred because it reduces the chance of bugs by catching errors during compilation. However, strong typing can also make the code more rigid and harder to modify. Whether to use strong or weak typing depends on the project requirements, such as the need for flexibility versus the need for early error detection.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly defines weak typing as checking types at runtime. \n\n<Point2:1> *True* The student correctly defines strong typing as checking types at compile time.\n\n<Point3:1> *True* The student accurately states that strong typing reduces bugs.\n\n<Point4:1> *True*  The student correctly identifies that strong typing can make code more rigid and harder to modify.\n\n<Point5:1> *True* The student acknowledges that the choice depends on project requirements. \n"
    },
    "53": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Weak typing checks the types of variables at run time, allowing more flexibility but also the potential for more runtime errors. Strong typing, on the other hand, checks types at compile time, which helps reduce bugs by catching errors early. This approach is generally recommended for its reliability. However, strong typing can make the code less flexible and harder to modify. The choice between strong and weak typing should be based on the specific needs and requirements of the project.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly explains that weak typing checks variable types at runtime. \n<Point2:1> *True*  The student accurately describes strong typing as checking types during compilation.\n<Point3:1> *True* The student rightly recommends strong typing due to its bug reduction benefits.\n\n<Point4:1> *True* The student correctly points out that strong typing can make code less flexible and harder to modify. \n<Point5:1> *True* The student acknowledges that the final decision depends on project requirements. \n\n\n"
    },
    "54": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "In programming, weak typing means that the types of variables are checked at run time, which allows for more flexibility but can lead to runtime errors. Strong typing checks types at compile time, reducing bugs by catching errors before the program runs. Strong typing is generally recommended because it helps prevent bugs, although it can make the code more rigid and harder to change. ",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly states that weak typing checks types at runtime. \n<Point2:1> *True* The student accurately explains that strong typing checks types at compile time.\n<Point3:1> *True* The student rightly recommends strong typing due to its bug reduction benefits.\n<Point4:1> *True* The student acknowledges that strong typing can make code less flexible.\n<Point5:1> *True*  The student correctly mentions that the final choice depends on project needs. \n"
    },
    "55": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing refer to how strictly a programming language enforces type rules. Weak typing checks the types of variables at runtime, allowing for more flexibility but potentially leading to more bugs. On the other hand, strong typing checks the types of variables at compile time, which can help reduce bugs but can make the code more rigid and harder to modify. While strong typing might seem restrictive, it does not mean that it is not beneficial for reducing bugs. However, the decision ultimately depends on your project requirements. If flexibility is a priority and the project can tolerate potential runtime errors, weak typing might be suitable. Conversely, for projects where minimizing bugs is critical, strong typing would be the recommended approach.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student accurately describes weak typing as checking types at runtime. \n\n<Point2:1> *True* The student correctly states that strong typing checks types during compilation.\n\n<Point3:1> *True*  The student mentions strong typing's benefit of reducing bugs.\n\n<Point4:1> *True* The student identifies the potential downside of strong typing - increased rigidity and difficulty in modification.\n\n<Point5:1> *True* The student acknowledges that the choice between strong and weak typing depends on project-specific needs. \n"
    },
    "56": {
        "question_code": "CPT006",
        "question": "What are strong and weak typing, and which would you recommend?",
        "fullMark": "5",
        "referenceAnswer": "<Point1:1>Weak typing checks the types of variables in a system at run time<Point1:1>, while <Point2:1>strong typing checks the types of variables at compilation time<Point2:1>. <Point3:1>Strong typing is recommended because it reduces bugs<Point3:1>. However, it can also <Point4:1>make the code more rigid and harder to modify<Point4:1>. Eventually, the choice <Point5:1>depends on your project requirements<Point5:1>.",
        "studentAnswer": "Strong typing and weak typing are concepts related to how strictly a programming language enforces type rules. Weak typing checks variable types at runtime, while strong typing checks variable types at compile time. Strong typing is generally recommended because it reduces bugs, but it can also make the code more rigid and harder to modify. The choice between strong and weak typing depends on your project requirements and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly defines weak typing as checking types at runtime)\n\n<Point2:1> *True*  (The student correctly defines strong typing as checking types at compile time.)\n\n<Point3:1> *True* (The student states that strong typing is recommended for reducing bugs, which aligns with the reference answer.)\n\n<Point4:1> *True* (The student accurately mentions that strong typing can make code more rigid and harder to modify.)\n\n<Point5:1> *True* (The student correctly concludes that the choice depends on project requirements) \n"
    },
    "57": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is considered a bad idea because it cannot be used when exception types are not known. If no specific variables are defined, the exception can be hard to read. Additionally, it can lead to unexpected behavior if the code is modified later and new exceptions are introduced, as they may also be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True*  The student correctly states that `catch (exception)` cannot be used when exception types are unknown. \n<Point2:1> *True* The student correctly points out that without specific variables, the exception information becomes harder to read and debug.\n\n<Point3:1> *True* The student accurately mentions that using a general catch block can lead to unexpected behavior.\n\n<Point4:1> *True*  The student includes the crucial point that code modifications and new exceptions are a concern with this approach.\n<Point5:1> *True* The student correctly identifies that new exceptions might be unintentionally caught by the broad `catch (exception)`.\n<Point6:1> *True* The student accurately explains that these inadvertently caught exceptions could then be handled inappropriately. \n\n\n"
    },
    "58": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "I think using catch (exception) is not a good idea because it cannot be used when the types of exceptions are unknown. Additionally, it makes it difficult to read the exception if no specific variables are defined. This approach can also lead to unexpected behavior, especially if the code is modified later and new exceptions are introduced. These new exceptions might be caught by the general catch (exception) block and handled incorrectly.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* The student correctly states that using `catch(exception)` is problematic when exception types are unknown.\n<Point2:1> *True* The student accurately explains that without specific variable definitions, the exception becomes harder to understand. \n<Point3:1> *True*  The student rightly identifies that this practice can lead to unforeseen issues in code execution.\n<Point4:1> *True* The student correctly points out that code modifications are a potential trigger for these unexpected behaviors.\n<Point5:1> *True* The student accurately mentions the introduction of new exceptions as a contributing factor to these problems. \n<Point6:1> *True* The student appropriately explains how new exceptions might be mishandled due to the general `catch(exception)` block.  \n\n\n"
    },
    "59": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is a bad idea for several reasons. It cannot be used effectively when exception types are not known. Moreover, if there are no variables defined, the exception becomes hard to read. This practice can also lead to unexpected behavior. When the code is modified later and new exceptions are introduced, they may be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* The student correctly states that using 'catch(exception)' is problematic when exception types are unknown. \n<Point2:1> *True*  The student accurately points out that without specific variable definitions, exceptions become harder to understand.\n<Point3:1> *True* The student rightly mentions the potential for unexpected behavior as a consequence of using a generic catch block.\n<Point4:1> *True* The student correctly identifies code modification as a factor contributing to unexpected behavior.\n\n<Point5:1> *True* The student accurately states that new exceptions introduced through code changes might be caught inappropriately. \n\n<Point6:1> *True* The student rightly concludes that the generic catch block might handle newly introduced exceptions in an undesirable way. \n"
    },
    "60": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is not recommended because it cannot be used when the types of exceptions are not known. This makes the exception hard to read if no specific variables are defined. Additionally, it can lead to unexpected behavior if the code is modified later and new exceptions are introduced. These new exceptions might be caught by the catch (exception) block and handled incorrectly.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True*  The student correctly states that `catch (exception)` cannot be used when exception types are unknown. \n<Point2:1> *True* The student correctly points out that without specific variables, the exception becomes harder to read.\n<Point3:1> *True* The student accurately mentions the potential for unexpected behavior.\n<Point4:1> *True* The student identifies code modifications as a factor leading to unexpected behavior.\n<Point5:1> *True* The student correctly states that new exceptions can be introduced through code modification.\n<Point6:1> *True* The student explains that new exceptions might be caught inappropriately. \n\n\n"
    },
    "61": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is generally discouraged because it cannot be used when exception types are not known. Additionally, if there are no variables defined, the exception is hard to read. This approach can lead to unexpected behavior if the code is modified later and new exceptions are introduced, as they may be caught by the catch (exception) block and handled inappropriately.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* The student correctly states that using `catch (exception)` doesn't work when exception types are unknown.\n\n<Point2:1> *True* The student accurately mentions the difficulty of reading exceptions without defined variables.\n\n<Point3:1> *True* The student correctly highlights the potential for unexpected behavior with this approach.\n\n<Point4:1> *True* The student rightly points out that code modifications can introduce new exceptions.\n\n<Point5:1> *True*  The student correctly links new exceptions to the problem of `catch (exception)`.\n\n<Point6:1> *True* The student accurately describes the risk of inappropriate handling of new exceptions caught by this block. \n"
    },
    "62": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is generally a bad idea for several reasons. First, it cannot be used effectively when exception types are not known, making it difficult to handle specific error cases appropriately. This approach might lead to unexpected behavior, especially if the code is modified later and new exceptions are introduced; these new exceptions may also be caught by the generic catch (exception) block and handled inappropriately. Additionally, because no specific variables are defined, the exception is hard to read and debug. Thus, while it may seem convenient to use a general catch-all for exceptions, it does not necessarily mean that it will not lead to significant issues down the line.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>",
        "feedback": "<Point1:1> *True* The student correctly points out that `catch (exception)` can't be used when exception types are unknown. \n\n<Point2:1> *True*  The student rightly mentions that the lack of specific variables makes the caught exception harder to read and debug.\n\n<Point3:1> *True* The student acknowledges that using a generic `catch` block can lead to unexpected behavior.\n\n<Point4:1> *True* The student identifies that future code modifications might introduce new exceptions.\n\n<Point5:1> *True*  The student accurately states that these new exceptions could be caught by the existing `catch (exception)` block. \n\n<Point6:1> *True* The student correctly explains that new exceptions caught inappropriately can lead to problems. \n\n\n"
    },
    "63": {
        "question_code": "CPT007",
        "question": "Why do you think using catch (exception) is a bad idea?",
        "fullMark": "6",
        "referenceAnswer": "I think it is a bad idea because of these reasons: It <Point1:1>cannot be used when exception types are not known<Point1:1>. <Point2:1>Because if there are no variables defined, the exception is hard to read<Point2:1>. It can <Point3:1>lead to unexpected behavior<Point3:1> if <Point4:1>the code is modified later <Point4:1> and <Point5:1>new exceptions are introduced<Point5:1>, as they may also <Point6:1>be caught by the catch (exception) block and handled inappropriately<Point6:1>.",
        "studentAnswer": "Using catch (exception) is bad because it catches all exceptions, making it difficult to determine what actually went wrong. It can mask specific issues that need individual handling and can lead to unexpected behavior if new types of exceptions are introduced later. This approach makes the code less readable and harder to debug. Therefore, it is generally better to catch specific exceptions to ensure that the appropriate actions are taken for different error conditions.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:False>",
        "feedback": "<Point1:1> *True*  The student answer mentions that catching all exceptions can make it hard to determine what went wrong, implying an unknown exception type issue.\n<Point2:1> *False* The student doesn't mention the readability issue specifically related to no variables being defined. \n<Point3:1> *True* The student clearly states that this practice can lead to unexpected behavior.\n<Point4:1> *True* The student points out that new exception types introduced later can be a problem.\n\n<Point5:1> *True*  The student mentions the introduction of new exceptions as a factor.\n<Point6:1> *True* The student states that new exceptions might be caught inappropriately. \n\n\n"
    },
    "64": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air software updates for cars will significantly impact our development process and costs. First, supporting the software for 25 years means we need long-term support mechanisms. Our development team must be prepared to maintain and update the software for an extended period. Additionally, network-connected cars are vulnerable to cyber-attacks, so we need to invest heavily in security measures to protect the software and passenger safety. Continuous updates require rigorous testing for every release, which will increase development costs. As the number of connected cars grows, our software must scale without compromising performance. While over-the-air updates are more cost-effective than service visits, maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* The student's answer correctly mentions the need for long-term support mechanisms due to the 25-year update period.\n\n<Point2:1> *True*  The student accurately points out the need for long-term support as part of the development process.\n\n<Point3:1> *False* The student doesn't explicitly mention extending the development team's timeframe for maintenance and updates.\n\n\n<Point4:1> *True* The student correctly identifies network-connected cars' vulnerability to cyberattacks. \n\n<Point5:1> *True* The answer highlights the need for investment in security measures to protect the software.\n\n<Point6:1> *True*  The student emphasizes the importance of protecting the software from malicious attacks.\n\n<Point7:1>* True* The student acknowledges that continuous updates will be a feature of the OTA system. \n\n<Point8:1> *True*   The answer stresses the need for rigorous testing for every new release.\n\n<Point9:1> *True* The student correctly mentions the necessity of testing for every new software release.\n\n<Point10:1> *True*  The student rightly points out that frequent testing will increase development costs.\n\n\n<Point11:1> *True* The student recognizes the need for scalability as the number of connected cars increases.\n\n<Point12:1> *True*   The answer emphasizes the importance of maintaining performance even as the system scales.\n\n<Point13:1> *False* While the student mentions scalability, they don't explicitly say that the development process should account for it.\n\n\n<Point14:1> *True* The student correctly identifies OTA updates as a more cost-effective method compared to service visits.\n\n <Point15:1> *True* The answer accurately states that 25 years of software maintenance will increase overall costs. \n"
    },
    "65": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Providing over-the-air updates for car software will affect our development process and costs in several ways. We need to support the software for 25 years, which requires long-term support mechanisms. Our team must be prepared to maintain and update the software. Security is a major concern, as network-connected cars are prone to cyber-attacks. We must invest in security measures to protect the software. Each update will require rigorous testing, increasing development costs. Additionally, the software must scale as the number of connected cars grows. While over-the-air updates are cost-effective, maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student mentions that long-term support is needed due to the 25-year update period.)\n<Point2:1> *True* (The student states the need for  \"long-term support mechanisms.\")\n<Point3:1> *True* ( The student points out that the team will be responsible for \"maintain[ing] and updat[ing]\" the software over time.) \n\n<Point4:1> *True* (The student mentions that network-connected cars are vulnerable to cyberattacks.)\n<Point5:1> *True*  (The student explicitly states that investment in \"security measures\" is required.)\n<Point6:1> *True* (The student highlights the need to \"protect the software\" from attacks.)\n\n<Point7:1> *True* (The student acknowledges that the software will be updated frequently through OTA means.) \n<Point8:1> *True* ( The student emphasizes the necessity of \"rigorous testing\" for each update.)\n<Point9:1> *True* (The student indicates that testing is needed \"for every new release.\")\n<Point10:1> *True* (The student states that this rigorous testing will lead to increased development costs) \n\n<Point11:1>*True* (The student points out the increasing number of connected cars.)\n<Point12:1> *True*( The student mentions the software's need to \"scale\".)\n<Point13:1> *True* ( The student emphasizes that the development process must consider scalability.)\n\n<Point14:1>*True*  (The student states that OTA updates are a more cost-effective approach than service visits.)\n<Point15:1> *True* (The student concludes that long-term maintenance will ultimately increase overall costs. ) \n\n\n\n\n"
    },
    "66": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The over-the-air software update strategy for cars has several implications for our development process and costs. We need to provide long-term support for 25 years, which means our development team must be ready to maintain and update the software over this period. Network-connected cars are vulnerable to cyber-attacks, so we need to invest in robust security measures. Continuous updates require rigorous testing to ensure software quality, which will increase development costs. Our software must also scale as more cars become connected. Although over-the-air updates are more cost-effective than service visits, maintaining the software for 25 years will result in higher overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* The student correctly mentions the need for long-term support.\n\n<Point2:1> *True* They also acknowledge the need for mechanisms to facilitate this support.\n\n\n<Point3:1> *False* While implied, the student doesn't explicitly state extending the development team's timeframe. \n \n\n<Point4:1> *True* The student recognizes the vulnerability of network-connected cars to cyberattacks.\n\n <Point5:1> *True* They rightly point out the need for security investments.\n\n<Point6:1> *True*  They mention protecting the software from malicious attacks.\n\n\n<Point7:1> *True* The student correctly highlights the continuous nature of updates. \n\n<Point8:1> *True* They emphasize the importance of rigorous testing.\n\n<Point9:1> *True* They acknowledge the necessity of testing for each new release.\n \n\n<Point10:1> *True* They note that frequent testing will likely increase costs.\n\n <Point11:1> *True* The student understands the need to handle a growing number of connected cars.\n\n<Point12:1> *True* They mention the importance of scalability for performance.\n \n <Point13:1> *False* While implied, they don't explicitly state accounting for scalability in the development process.\n\n\n<Point14:1> *True* The student correctly identifies over-the-air updates as more cost-effective than service visits.\n\n<Point15:1> *True* They acknowledge the increased overall costs due to long-term maintenance.\n\n\n\n"
    },
    "67": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air software updates will have several effects on our development process and costs. Supporting the software for 25 years requires long-term support mechanisms. Our development team must maintain and update the software over this period. Cybersecurity is crucial as network-connected cars are vulnerable to attacks. We need to invest in security measures. Continuous updates need rigorous testing, increasing development costs. The software must scale as the number of connected cars grows. Over-the-air updates are cost-effective compared to service visits, but maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:True>,<Point8:True>,<Point9:False>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:1> *True* (The student correctly states that long-term support mechanisms are needed.)\n<Point2:1> *True* ( The student mentions that the development team needs to maintain and update the software over 25 years, which reflects the need for long-term support.)\n<Point3:1> *True*( The student implicitly covers this by stating the team needs to \"maintain and update\" the software for 25 years. )\n\n<Point4:1> *True* (The student points out that network-connected cars are vulnerable to attacks.)\n<Point5:1> *True* (The student clearly states the need to invest in security measures.) \n<Point6:1> *True* ( The student's mention of investing in security measures implies protection from malicious attacks.)\n\n<Point7:1> *True* (The student correctly identifies the need for continuous updates.)\n\n<Point8:1> *True* (The student explicitly states the necessity of rigorous testing due to continuous updates.)\n<Point9:1> *True* ( The student's statement about needing \"rigorous testing\" for continuous updates implies testing for every new release.)\n<Point10:1> *True*(The student mentions that rigorous testing will increase development costs.)\n\n<Point11:1> *True* (The student correctly points out the need to scale the software as connected cars grow.)\n<Point12:1> *True* (The student indicates the software must scale \"without compromising performance,\" which is a key aspect of scalability.)\n\n<Point13:1> *True* ( The student's statement about scaling implies that the development process needs to account for it. )\n\n<Point14:1> *True* (The student accurately states that over-the-air updates are more cost-effective than service visits.)\n<Point15:1> *True* (The student concludes that despite being more cost-effective initially, maintaining the software for 25 years will lead to increased overall costs. )"
    },
    "68": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The over-the-air software update strategy for cars will impact our development process and costs. Providing long-term support for 25 years requires our development team to maintain and update the software. Network-connected cars are prone to cyber-attacks, so we need to invest in security measures. Each update requires rigorous testing to ensure quality, increasing development costs. As more cars become connected, the software must scale effectively. Over-the-air updates are cost-effective, but maintaining the software for 25 years will increase overall costs.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>,<Point13:True>,<Point14:True>,<Point15:True>",
        "feedback": "<Point1:mark> *True* The student correctly mentions the need for long-term support.\n<Point2:mark> *True*  The student highlights the necessity of including long-term support mechanisms in the development process, which aligns with Point 2.\n<Point3:mark> *False* Although the student alludes to a longer development timeframe through \"maintain and update,\" they don't explicitly state extending the team's time frame like the reference answer.\n\n<Point4:mark> *True* The student rightly points out the vulnerability of network-connected cars to cyberattacks.\n\n<Point5:mark> *True*  The student acknowledges the need for investment in security measures to protect against attacks.\n<Point6:mark> *True* The student emphasizes protecting the software from malicious attacks, aligning with Point 6.\n<Point7:mark> *True*  The student correctly states that continuous updates will be a feature of the system.\n\n<Point8:mark> *True* The student mentions rigorous testing for each update.\n\n<Point9:mark> *True* The student implies that each new release requires testing by stating \"Each update...\" \n <Point10:mark> *True* The student indicates that rigorous testing will increase development costs.\n<Point11:mark> *True* The student acknowledges the increasing number of connected cars.\n\n<Point12:mark> *True* They mention the need for scalability without compromising performance.\n<Point13:mark> *False* While they touch on scalability, they don't explicitly state that the development process needs to account for it like Point 13 in the reference.\n\n<Point14:mark> *True* The student correctly states that over-the-air updates are more cost-effective than service visits.\n<Point15:mark> *True*  They acknowledge that long-term software maintenance will increase overall costs despite the initial benefit of OTA updates.\n\n\n\n"
    },
    "69": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "The decision to provide over-the-air software updates for cars will impact our development process and costs in multiple ways. While it is true that long-term support mechanisms are required for a 25-year maintenance period, it does not necessarily mean that the initial development costs will not remain high throughout. Investing in robust security measures is essential to protect against cyber-attacks; however, this upfront cost can lead to long-term savings by preventing costly security breaches. Rigorous testing for each update will indeed increase costs, but it ensures software reliability and safety, potentially reducing expensive recalls or fixes later on. Therefore, although the development costs may seem higher initially, the long-term benefits, such as improved security and reduced service visits, could ultimately offset these expenses.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:True>,<Point10:False>,<Point11:False>,<Point12:False>,<Point13:False>,<Point14:False>,<Point15:False>",
        "feedback": "<Point1:1> *True*  The student correctly identifies the need for long-term support mechanisms. \n<Point2:1> *True* The student acknowledges the implication of providing support for 25 years.\n<Point3:1> *False* The student doesn't mention extending the development team's timeframe.\n<Point4:1> *True* The student mentions the vulnerability of network-connected cars to cyberattacks.\n<Point5:1> *True*  The student highlights the need for investing in security measures. \n<Point6:1> *True* The student states the aim is to protect software from malicious attacks.\n<Point7:1> *True* The student refers to continuous updates over the air.\n<Point8:1> *True* The student emphasizes the importance of rigorous testing.\n<Point9:1> *True* The student mentions testing for every new release. \n<Point10:1> *True* The student acknowledges the potential increase in development costs due to extensive testing.\n<Point11:1> *False* The student doesn't discuss the increasing number of connected cars.\n<Point12:1> *False*  The student doesn't explicitly mention the need for scalability.\n<Point13:1> *False* The student doesn't address accounting for scalability in the development process.\n<Point14:1> *True* The student correctly points out the cost-effectiveness of OTA updates compared to service visits.\n<Point15:1> *True* The student acknowledges that long-term maintenance will increase overall costs. \n\n\n\n"
    },
    "70": {
        "question_code": "CPT008",
        "question": "You are developing control software for a car whose latest model will have a network connection. Software upgrades will be delivered over the air rather than at service visits, so that any security vulnerabilities can be patched quickly. This in turn means that you will have to provide patches, to deal with both security and safety issues for the next 25 years. Discuss how this is likely to affect your development process, and the implications it will have for costs. ",
        "fullMark": "15",
        "referenceAnswer": "As a software developer, there are several implications that the over-the-air software upgrade strategy will have on your development process and costs: Long-term Support: <Point1:1>To provide patches and upgrades over the air for 25 years<Point1:1>, <Point2:1>the development process must include long-term support mechanisms<Point2:1>. You may need to <Point3:1>extend your development team's time frame to accommodate software maintenance and updates<Point3:1>. Security: <Point4:1>Network-connected cars are prone to cyber-attacks<Point4:1>, which can compromise data security and the safety of passengers. You will need to<Point5:1> invest in security measures <Point5:1>to <Point6:1>protect the software from malicious attacks<Point6:1>. Testing: As <Point7:1>the software will be continuously updated over the air<Point7:1>, it is important to <Point8:1>test and verify the software rigorously<Point8:1>. <Point9:1>Testing must be performed for every new release<Point9:1>, and this may <Point10:1>increase the development costs significantly<Point10:1>. Scalability: As <Point11:1>the number of cars with network connections increases<Point11:1>, the software must <Point12:1>be able to scale without compromising performance<Point12:1>. This means that the development process must <Point13:1>account for scalability<Point13:1>. Cost: <Point14:1>Providing software updates over the air is a more cost-effective approach than requiring service visits<Point14:1>. However, <Point15:1>developing and maintaining the software for a period of 25 years will increase the overall cost<Point15:1>.",
        "studentAnswer": "Over-the-air updates for car software are significant. We need to do stuff for long-term support and ensure security measures. Testing updates is important. The software should work well as more cars get connected. Costs might be high, but it could be worth it.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:False>,<Point4:False>,<Point5:True>,<Point6:False>,<Point7:False>,<Point8:True>,<Point9:False>,<Point10:False>,<Point11:True>,<Point12:False>,<Point13:False>,<Point14:False>,<Point15:False>",
        "feedback": "<Point1:1> *True* (The student recognizes the need for long-term support.) \n<Point2:1> *False* (The answer does not explicitly mention the need for mechanisms to provide long-term support.)\n<Point3:1> *False* (The student doesn't address extending the development team's timeframe.)\n<Point4:1> *True* (The student mentions the importance of security measures.)\n<Point5:1> *True* ( The student implies a need to invest in security.)\n<Point6:1> *False* (The student doesn't specifically mention protecting software from malicious attacks.) \n<Point7:1> *True* (The student acknowledges continuous updates.)\n<Point8:1> *True* (The student emphasizes the importance of testing.)\n<Point9:1> *True* ( The student implies testing for each release.) \n<Point10:1> *False* (The answer doesn't mention increased development costs due to testing.)\n<Point11:1> *True*  (The student mentions the increase in connected cars.)\n<Point12:1> *True* ( The student highlights the need for scalability.)\n<Point13:1> *False* ( The answer doesn't mention accounting for scalability in the development process.)\n<Point14:1> *True*  (The student briefly touches on the cost-effectiveness compared to service visits.) \n<Point15:1> *True* (The student acknowledges potential high costs.) \n\n\n"
    }
}