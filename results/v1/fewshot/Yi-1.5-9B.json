{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1 :3 > *False* (The student's answer incorrectly states that the worst-case time complexity is O(n log n). The correct worst-case time complexity is O(n^2) as mentioned in the reference answer.)\n\n<Point2 :2 > *False* (The student's answer does not address the specific condition under which the worst-case time complexity occurs, which is when the pivot elements are consistently the smallest or largest element in the array as stated in the reference answer.)"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1 :2 > *False* (The student's answer does not fully capture the concept of hash tables storing key-value pairs. It is partially correct as an array is used but misses the key-value aspect necessary for the explanation.)\n\n<Point2 :2 > *False* (The student's answer does not mention the use of a hash function to compute an index into an array of buckets or slots, which is an essential part of how a hash table works. It lacks the detail on the process of accessing data.)\n\n<Point3 :1 > *False* (The student's answer does not mention the collision resolution aspect of hash tables, which is a crucial part of their functionality and efficiency.)\n\n**Feedback:**\n*The student's answer touches on the basic concept of using an array for storage, but it lacks the detail necessary to fully explain how a hash table works. The explanation is incomplete and does not cover all the key points mentioned in the reference answer.*"
    }
}