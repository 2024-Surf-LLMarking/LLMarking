{
    "0": {
        "question": "What is the time complexity of the QuickSort algorithm in the worst case?",
        "fullMark": "5",
        "referenceAnswer": "In the worst case, <Point1:3>the time complexity of QuickSort is O(n^2)<Point1:3>, where n is the number of elements in the array. <Point2:2>This occurs when the pivot elements are consistently the smallest or largest element in the array<Point2:2>, leading to unbalanced partitions.",
        "studentAnswer": "QuickSort has a time complexity of O(n log n) in the worst case because it divides the list into two halves.",
        "teacherMark": "<Point1:0> <Deduction>,<Point2:0> <Deduction>",
        "feedback": "<Point1:3> *False* (In the worst case, QuickSort has a time complexity of O(n^2), while in the best and average cases it's O(n log n).)\n\n<Point2:2> *False* (The worst case of QuickSort does not occur when the pivot elements are the smallest or largest element in the array, but rather when the pivot always selects the extremes of the sorted portion, leading to unbalanced partitions.)"
    },
    "1": {
        "question": "Explain how a hash table works.",
        "fullMark": "5",
        "referenceAnswer": "<Point1:2>A hash table stores key-value pairs<Point1:2>. <Point2:2>It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found<Point2:2>. <Point3:1>Ideally, the hash function will assign each key to a unique bucket, but most hash table designs employ some form of collision resolution<Point3:1>.",
        "studentAnswer": "A hash table is just an array that stores data and uses keys for indexing.",
        "teacherMark": "<Point1:2> <Induction>,<Point2:0> <Deduction>,<Point3:0> <Deduction>",
        "feedback": "<Point1:2> *False* (The student's answer misses the fact that hash tables store key-value pairs.)\n\n<Point2:2> *True* (The student's answer correctly mentions that hash tables use keys for indexing.)\n\n<Point3:1> *False* (The student's answer lacks details on the use of hash functions, collision resolution, and the concept of storing data in buckets or slots in a hash table.)"
    }
}