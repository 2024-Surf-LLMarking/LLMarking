{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting requirements from stakeholders. System Analysis and Design: Analyzing requirements and creating a blueprint. Implementation: Writing the code. Testing: Checking the system for defects. Deployment: Releasing the software to users. Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n\n<Point2:1> *True* (The student correctly states that it involves collecting requirements from stakeholders.)\n\n<Point3:1> *True* (System analysis and design phase is correctly identified.)\n\n<Point4:1> *True* (The student includes analyzing requirements and creating a blueprint in the design phase.)\n\n<Point5:1> *True* (Implementation phase, specifically coding, is mentioned.)\n\n<Point6:1> *True* (The coding part of implementation is correctly described.)\n\n<Point7:1> *True* (Testing phase is included.)\n\n<Point8:1> *True* (The purpose of testing is briefly mentioned as checking for defects.)\n\n<Point9:1> *True* (Deployment phase is correctly stated.)\n\n<Point10:1> *True* (Releasing the software to users is part of the deployment phase as mentioned.)\n\n<Point11:1> *True* (Maintenance phase is included.)\n\n<Point12:1> *True* (Ongoing support and enhancement are correctly associated with the maintenance phase.)"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Understanding what the software needs to do by talking to stakeholders. System Analysis and Design: Creating a detailed plan and design for the software. Implementation (Coding): Developing the software based on the design. Testing: Ensuring the software works correctly by finding and fixing bugs. Deployment: Making the software available to the users. Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n<Point2:1> *True* (The student correctly explains the purpose of requirement gathering.)\n<Point3:1> *True* (System analysis and design phase is correctly identified.)\n<Point4:1> *True* (The explanation for system analysis and design aligns with the reference.)\n<Point5:1> *True* (Implementation or coding phase is accurately mentioned.)\n<Point6:1> *True* (The student correctly links coding to the design documents.)\n<Point7:1> *True* (Testing phase is included.)\n<Point8:1> *True* (The purpose of the testing phase is correctly described.)\n<Point9:1> *True* (Deployment phase is mentioned.)\n<Point10:1> *True* (Explains deployment as making the software available to users.)\n<Point11:1> *True* (Maintenance phase is included.)\n<Point12:1> *True* (Describes maintenance as ongoing support and enhancements.)"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are: Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed. System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created. Implementation (Coding): This phase involves writing the code according to the design documents. Testing: The system is verified against the requirements to identify and fix defects. Deployment: The software is released to the production environment for users. Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies Requirement Gathering as a phase.)\n\n<Point2:1> *True* (The explanation for Requirement Gathering matches the reference.)\n\n<Point3:1> *True* (System Analysis and Design is correctly identified.)\n\n<Point4:1> *True* (The description of System Analysis and Design aligns with the reference.)\n\n<Point5:1> *True* (Implementation (Coding) is correctly mentioned.)\n\n<Point6:1> *True* (The explanation for Implementation matches the reference.)\n\n<Point7:1> *True* (Testing is correctly identified as a phase.)\n\n<Point8:1> *True* (The description for Testing is accurate.)\n\n<Point9:1> *True* (Deployment is correctly listed as a phase.)\n\n<Point10:1> *True* (The explanation for Deployment is correct.)\n\n<Point11:1> *True* (Maintenance is correctly identified.)\n\n<Point12:1> *True* (The description for Maintenance matches the reference.)"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are: Requirement Gathering: This is where the requirements from stakeholders are collected. System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created. Implementation (Coding): The next step is to write the code based on the design. Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects. Deployment: The software is then deployed to the production environment. Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies Requirement Gathering as a phase.)\n\n<Point2:1> *True* (The student accurately explains Requirement Gathering involves collecting requirements from stakeholders.)\n\n<Point3:1> *True* (The student correctly identifies System Analysis and Design as a phase.)\n\n<Point4:1> *True* (The student accurately describes System Analysis and Design as involving analysis and creation of a system blueprint.)\n\n<Point5:1> *True* (The student correctly identifies Implementation (Coding) as a phase.)\n\n<Point6:1> *True* (The student accurately explains Implementation involves writing code according to design documents.)\n\n<Point7:1> *True* (The student correctly identifies Testing as a phase.)\n\n<Point8:1> *True* (The student accurately describes Testing as verifying the system and fixing defects.)\n\n<Point9:1> *True* (The student correctly identifies Deployment as a phase.)\n\n<Point10:1> *True* (The student accurately explains Deployment involves releasing the software to the production environment.)\n\n<Point11:1> *True* (The student correctly identifies Maintenance as a phase.)\n\n<Point12:1> *True* (The student accurately describes Maintenance as including ongoing support and enhancements.)"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases: Requirement Gathering: Collecting the requirements from stakeholders. System Analysis and Design: Analyzing the requirements and designing the system. Implementation (Coding): Writing the code based on the design. Testing: Checking the system for defects. Deployment: Releasing the software for use. Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n<Point2:1> *True* (The student correctly explains the purpose of requirement gathering.)\n<Point3:1> *True* (System analysis and design phase is correctly identified.)\n<Point4:1> *True* (The explanation for system analysis and design aligns with the reference.)\n<Point5:1> *True* (Implementation or coding phase is accurately stated.)\n<Point6:1> *True* (The student correctly links coding to the design documents.)\n<Point7:1> *True* (Testing phase is mentioned.)\n<Point8:1> *True* (The purpose of the testing phase is correctly described.)\n<Point9:1> *True* (Deployment phase is included.)\n<Point10:1> *True* (Explains deployment as releasing the software for users.)\n<Point11:1> *True* (Maintenance phase is mentioned.)\n<Point12:1> *True* (Describes maintenance as ongoing support and enhancement.)"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes: Requirement Gathering: Gathering what is needed for the project. System Analysis and Design: Creating a design based on the requirements. Implementation (Coding): Coding the project. Testing: Testing the code. Deployment: Making the software available. Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n<Point2:1> *True* (Although concise, the student captures the essence of collecting needs for the project.)\n<Point3:1> *True* (System analysis and design are correctly identified as a phase.)\n<Point4:1> *True* (Creating a design based on requirements is implied in the student's answer.)\n<Point5:1> *True* (Implementation or coding is correctly stated.)\n<Point6:1> *True* (The coding part is covered under implementation.)\n<Point7:1> *True* (Testing is mentioned as a phase.)\n<Point8:1> *True* (The purpose of testing is briefly captured.)\n<Point9:1> *True* (Deployment is included in the phases.)\n<Point10:1> *True* (Making the software available aligns with deployment.)\n<Point11:1> *True* (Maintenance is mentioned.)\n<Point12:1> *True* (Ongoing updates and fixes are part of maintenance, aligning with the reference.)"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are: Requirement Gathering: Understanding what the stakeholders need. System Analysis and Design: Planning how the system will be built. Implementation (Coding): Writing the actual code. Testing: Making sure the software works as expected. Deployment: Launching the software for users. Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n<Point2:1> *True* (The student correctly explains requirement gathering involves understanding stakeholders' needs.)\n<Point3:1> *True* (System analysis and design phase is correctly identified.)\n<Point4:1> *True* (The explanation for system analysis and design aligns with the reference.)\n<Point5:1> *True* (Implementation or coding phase is accurately mentioned.)\n<Point6:1> *True* (The student correctly links coding to the implementation phase.)\n<Point7:1> *True* (Testing phase is included.)\n<Point8:1> *True* (Explanation for testing phase matches the reference.)\n<Point9:1> *True* (Deployment phase is correctly stated.)\n<Point10:1> *True* (The student accurately describes deployment as launching for users.)\n<Point11:1> *True* (Maintenance phase is mentioned.)\n<Point12:1> *True* (The explanation for maintenance includes ongoing support and enhancements.)"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of: Requirement Gathering: Collecting the requirements needed for the project. System Analysis and Design: Designing the system based on the requirements. Implementation (Coding): Writing the code for the project. Testing: Checking the software for any issues. Deployment: Releasing the final product to the users. Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n<Point2:1> *True* (The student correctly explains requirement gathering involves collecting requirements.)\n<Point3:1> *True* (System analysis and design phase is included.)\n<Point4:1> *True* (The explanation aligns with system analysis and design.)\n<Point5:1> *True* (Implementation or coding phase is mentioned.)\n<Point6:1> *True* (The student accurately describes the coding phase.)\n<Point7:1> *True* (Testing phase is included in the answer.)\n<Point8:1> *True* (Explanation of testing includes verifying the system against requirements.)\n<Point9:1> *True* (Deployment phase is mentioned.)\n<Point10:1> *True* (Describes deployment as releasing the software to users.)\n<Point11:1> *True* (Maintenance phase is included.)\n<Point12:1> *True* (Explains maintenance involves ongoing support and enhancements.)"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting what needs to be developed from the stakeholders. System Analysis and Design: Analyzing these requirements and making a system design. Implementation (Coding): Writing the code according to the design. Testing: Verifying that the system works as intended and fixing any defects. Deployment: Making the software available to the users. Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n<Point2:1> *True* (Correctly states the purpose of requirement gathering.)\n<Point3:1> *True* (Mentions system analysis and design as a phase.)\n<Point4:1> *True* (Indicates that system design follows analysis of requirements.)\n<Point5:1> *True* (Correctly identifies implementation/coding as a phase.)\n<Point6:1> *True* (Explains coding is done based on design documents.)\n<Point7:1> *True* (Identifies testing as a phase.)\n<Point8:1> *True* (Describes testing as verifying the system and fixing defects.)\n<Point9:1> *True* (Mentions deployment as a phase.)\n<Point10:1> *True* (Explains deployment involves making the software available to users.)\n<Point11:1> *True* (Includes maintenance as a phase.)\n<Point12:1> *True* (Describes maintenance as ongoing support and updates.)"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes: Requirement Gathering: Understanding what the project needs. System Analysis and Design: Creating a detailed plan based on the requirements. Implementation (Coding): Writing the necessary code. Testing: Ensuring the system meets requirements and fixing any problems. Deployment: Making the software available to the end-users. Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student mentions requirement gathering as the first phase.)\n\n<Point2:1> *True* (The student correctly explains requirement gathering involves understanding project needs.)\n\n<Point3:1> *True* (System analysis and design phase is correctly identified.)\n\n<Point4:1> *True* (Creating a detailed plan based on requirements is part of the explanation for system analysis and design.)\n\n<Point5:1> *True* (Implementation or coding phase is accurately mentioned.)\n\n<Point6:1> *True* (The coding phase is explained correctly as writing code according to design documents, though the student did not use the term \"design documents.\")\n\n<Point7:1> *True* (Testing phase is included.)\n\n<Point8:1> *True* (The purpose of the testing phase is correctly described as ensuring the system meets requirements and fixing issues.)\n\n<Point9:1> *True* (Deployment phase is mentioned.)\n\n<Point10:1> *True* (Explains deployment as making the software available to users.)\n\n<Point11:1> *True* (Maintenance phase is included.)\n\n<Point12:1> *True* (The ongoing nature of maintenance, including improvements and updates, is correctly stated.)"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer accurately describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, explaining the one-directional flow without overlap or iteration.)\n\n<Point3:1> *True* (The student correctly identifies the difficulty in implementing changes in the Waterfall model.)\n\n<Point4:2> *True* (The student's description of the Agile model as iterative, flexible, and collaborative is accurate.)\n\n<Point5:1> *True* (The mention of development occurring in small increments (iterations) is correct.)\n\n<Point6:1> *True* (The student's answer includes the importance of continuous feedback and adaptability in Agile, matching the reference.)\n\n<Point7:1> *True* (The statement about Agile's ability to accommodate changes at any stage is in line with the reference answer.)"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (Although concise, the student's answer implies the one-directional flow without overlap, aligning with the Waterfall model's characteristic.)\n\n<Point3:1> *True* (The student's answer conveys the difficulty in making changes in the Waterfall model after a phase is completed.)\n\n<Point4:2> *True* (The student accurately captures the iterative and flexible nature of the Agile model.)\n\n<Point5:1> *True* (Mentions the iterative development in Agile, aligning with the reference answer.)\n\n<Point6:1> *True* (Indicates Agile's focus on continuous feedback and adaptability to changes, consistent with the reference.)\n\n<Point7:1> *True* (Correctly states that Agile permits changes at any stage, reflecting the model's flexibility.)"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (Although not as concise as the reference, the student's explanation implies the one-directional flow without overlap, supporting the idea behind Point2.)\n\n<Point3:1> *True* (The student's answer accurately states that changes are difficult in the Waterfall model after a phase is completed.)\n\n<Point4:2> *True* (The student captures the iterative, flexible nature of the Agile model and its focus on collaboration and customer feedback.)\n\n<Point5:1> *True* (Mentions the iterative nature through 'short cycles called iterations', aligning with the reference.)\n\n<Point6:1> *True* (The student's answer includes the importance of continuous feedback and adaptability to changes, matching the reference.)\n\n<Point7:1> *True* (Correctly states that Agile allows for changes at any stage, emphasizing its responsiveness to evolving requirements.)"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student's answer aligns with the idea that the Waterfall model progresses without overlapping phases, though the phrasing could be more precise.)\n\n<Point3:1> *True* (The student accurately mentions the difficulty in implementing changes in the Waterfall model after a phase is completed.)\n\n<Point4:2> *True* (The student's description of the Agile model being iterative, flexible, and focused on collaboration and feedback is accurate.)\n\n<Point5:1> *True* (The mention of development occurring in small increments (iterations) in the Agile model is correct.)\n\n<Point6:1> *True* (The student's answer correctly includes the Agile model's allowance for continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The statement about changes being easily accommodated at any stage in Agile is in line with the reference answer.)"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (Although concise, the student's answer implies the one-directional flow without overlap, aligning with the reference.)\n\n<Point3:1> *True* (The student's answer captures the difficulty in implementing changes in the Waterfall model.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and flexible, focusing on collaboration and customer feedback.)\n\n<Point5:1> *True* (Mentions the iterative nature through small increments, aligning with the Agile methodology.)\n\n<Point6:1> *True* (The student's answer includes the importance of continuous feedback and adaptability in Agile, as stated in the reference.)\n\n<Point7:1> *True* (Correctly states that Agile permits changes at any stage, reflecting the model's flexibility.)"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (Although concise, the student's explanation implies the one-directional flow without overlap, aligning with Point2.)\n\n<Point3:1> *True* (The student mentions the difficulty in making changes in Waterfall, which aligns with the issue of changes after a phase is completed.)\n\n<Point4:2> *True* (The student accurately captures the iterative and flexible nature of the Agile model.)\n\n<Point5:1> *True* (Mention of short iterative cycles aligns with Agile's development method.)\n\n<Point6:1> *True* (The student's answer includes the importance of collaboration, stakeholder feedback, and adaptability in Agile.)\n\n<Point7:1> *True* (The ease of making changes at any stage in Agile is correctly highlighted.)"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (Although not as detailed, the student's answer implies that the Waterfall model moves in a single direction without overlap, aligning with Point2.)\n\n<Point3:1> *True* (The student mentions the difficulty in implementing changes in the Waterfall model after a phase is completed.)\n\n<Point4:2> *True* (The student accurately captures the iterative and flexible nature of the Agile model.)\n\n<Point5:1> *True* (The mention of development occurring in small increments aligns with Agile's iterative approach.)\n\n<Point6:1> *True* (The student's answer includes the importance of feedback and adaptability in Agile, which is correct.)\n\n<Point7:1> *True* (The statement about Agile's ability to accommodate changes at any stage is consistent with the reference answer.)"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear nature of the Waterfall model.)\n\n<Point2:1> *True* (Although concise, the student's answer conveys the one-directional flow of the Waterfall model.)\n\n<Point3:1> *True* (The student mentions the difficulty in implementing changes in the Waterfall model.)\n\n<Point4:2> *True* (The student accurately captures the iterative and flexible nature of the Agile model.)\n\n<Point5:1> *True* (Mentions the use of iterations in Agile, aligning with the reference answer.)\n\n<Point6:1> *True* (Indicates Agile's allowance for continuous feedback and adaptability, which is correct.)\n\n<Point7:1> *True* (Correctly states that Agile permits changes at any stage, reflecting the model's flexibility.)"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear nature of the Waterfall model.)\n\n<Point2:1> *True* (Although concise, the student's answer implies the one-directional flow of the Waterfall model.)\n\n<Point3:1> *True* (The student mentions the difficulty in making changes in the Waterfall model after a phase is over.)\n\n<Point4:2> *True* (The student accurately captures the iterative and flexible nature of the Agile model.)\n\n<Point5:1> *True* (Mention of development in small increments aligns with the Agile methodology.)\n\n<Point6:1> *True* (The student's answer includes the importance of continuous feedback and adaptability in Agile.)\n\n<Point7:1> *True* (Correctly states that Agile permits changes at any stage, reflecting its responsiveness to evolving requirements.)"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (Although concise, the student's answer implies the one-directional flow without overlap, aligning with the reference.)\n\n<Point3:1> *True* (The student mentions the difficulty in making changes in the Waterfall model after a phase is completed.)\n\n<Point4:2> *True* (The student accurately captures the iterative and flexible nature of the Agile model.)\n\n<Point5:1> *True* (Mention of development occurring in small increments aligns with the Agile model description.)\n\n<Point6:1> *True* (The student's answer includes the importance of stakeholder feedback and adaptability in Agile.)\n\n<Point7:1> *True* (Correctly states that Agile permits changes at any stage, reflecting its responsiveness to evolving requirements.)"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods in a class, which aligns with the reference answer's aspect of cohesion.)\n\n<Point3:1> *False* (The student's answer does not explicitly mention the unifying factor or purpose of the class, which is part of the definition in the reference answer.)\n\n<Point4:2> *True* (The explanation of high cohesion aligns with the reference, stating that elements work together towards a common goal.)\n\n<Point5:2> *True* (The description of low cohesion matches the reference, indicating loose relationships and lack of a clear unified purpose.)"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (Although not in the exact words, the student's answer captures the essence of the relationship between data, methods, and their unity within a class/module.)\n\n<Point3:1> *True* (The student indirectly addresses the unifying factor or purpose by mentioning \"their shared purpose,\" which aligns with the reference answer.)\n\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal.)\n\n<Point5:2> *True* (The student's explanation of low cohesion matches the reference, stating that elements are loosely related and lack a clear purpose.)"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods, aligning with the reference answer's aspect of cohesion.)\n\n<Point3:1> *True* (The student includes the unifying factor or purpose, which is part of the definition of cohesion, though not explicitly structured as in the reference.)\n\n<Point4:2> *True* (The explanation of high cohesion matches the reference, emphasizing elements working together towards a common goal.)\n\n<Point5:2> *True* (The description of low cohesion is accurate, highlighting loose relationships and lack of a unified purpose.)"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (Although not in the exact words, the student's answer captures the essence of the relationship strength between data and methods.)\n\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose, aligning with the reference answer.)\n\n<Point4:2> *True* (The explanation of high cohesion matches the reference, emphasizing elements working towards a common goal.)\n\n<Point5:2> *True* (The description of low cohesion is accurate, highlighting loose relationships and lack of a unified purpose.)"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class, which aligns with the reference answer's aspect of cohesion.)\n\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose, which is part of the definition of cohesion, even though the wording is slightly different.)\n\n<Point4:2> *True* (The explanation of high cohesion matches the reference answer, emphasizing elements working together towards a common goal.)\n\n<Point5:2> *True* (The description of low cohesion is accurate, highlighting loose relationships and lack of a unified purpose.)"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data, methods, and cohesion, aligning with the reference answer.)\n\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose, consistent with the reference.)\n\n<Point4:2> *True* (The explanation of high cohesion aligns with the reference, emphasizing a common goal and related elements.)\n\n<Point5:2> *True* (The description of low cohesion matches the reference, highlighting loose relationships and lack of a unified purpose.)"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data, methods, and purpose, aligning with the reference answer.)\n\n<Point3:1> *True* (The unifying factor or purpose is mentioned, contributing to a correct understanding of cohesion.)\n\n<Point4:2> *True* (The explanation of high cohesion matches the reference, emphasizing elements working towards a common goal.)\n\n<Point5:2> *True* (The description of low cohesion is accurate, highlighting loose relationships and lack of a clear purpose.)"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods, aligning with the reference answer's aspect of cohesion.)\n\n<Point3:1> *True* (Although not using identical words, the student's answer conveys the unifying factor or purpose of the class, which is implied in the reference answer.)\n\n<Point4:2> *True* (The student accurately describes high cohesion, emphasizing elements working towards a common goal.)\n\n<Point5:2> *True* (The student's explanation of low cohesion matches the reference answer, indicating loose relationships and lack of a unified purpose.)"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class, which aligns with the reference answer's aspect of cohesion.)\n\n<Point3:1> *True* (Although not using identical phrasing, the student's answer conveys the unifying factor or purpose of the class, which is implied in the reference answer.)\n\n<Point4:2> *True* (The student accurately describes high cohesion as elements working together towards a common goal, maintaining the essence of the reference answer.)\n\n<Point5:2> *True* (The student's explanation of low cohesion matches the reference answer, indicating loose relationships and lack of a unified purpose.)"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly explains cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student mentions the relationship between data and methods within a class, aligning with the reference answer's aspect of cohesion.)\n\n<Point3:1> *True* (The student includes the unifying factor or purpose, showing an understanding of cohesion's purpose-based measurement.)\n\n<Point4:2> *True* (The explanation of high cohesion aligns with the reference, emphasizing elements working together towards a common goal and its benefits.)\n\n<Point5:2> *True* (The description of low cohesion matches the reference, highlighting loose relationships and lack of a unified purpose, and its consequences.)"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, mentioning that these are standard systematic procedures.)\n\n<Point3:1> *True* (Indicates the milestones show the project is on the right track, consistent with the reference.)\n\n<Point4:2> *True* (Correctly states that milestones assess the development team's progress.)\n\n<Point5:1> *True* (Mentions identifying issues and risks, which is part of the reference answer.)\n\n<Point6:1> *True* (The student includes making adjustments to the project plan, as stated in the reference.)\n\n<Point7:1> *True* (Completing a specific feature is mentioned, which is an example of an internal milestone.)\n\n<Point8:1> *True* (Testing and debugging the code is correctly identified as an internal milestone.)\n\n<Point9:1> *True* (Reaching a certain level of performance or functionality is also correctly included.)"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer includes the idea that internal milestones are measurable and important for tracking progress, aligning with the first part of Point1.)\n\n<Point2:1> *Partially True* (The student's answer implies systematic procedures through the context of tracking progress and making adjustments, but does not explicitly state \"standard systematic procedures.\")\n\n<Point3:1> *True* (The student's answer correctly indicates that milestones show if engineers are on the right path.)\n\n<Point4:2> *True* (The student's answer mentions assessing the development team's progress, which corresponds to Point4.)\n\n<Point5:1> *True* (Identifying issues and risks is mentioned, aligning with Point5.)\n\n<Point6:1> *True* (Making necessary adjustments to the project plan is included, matching Point6.)\n\n<Point7:1> *True* (Completing a specific feature is mentioned, corresponding to Point7.)\n\n<Point8:1> *True* (Testing and debugging the code is mentioned, which is Point8.)\n\n<Point9:1> *True* (Achieving a specific performance level is included, fulfilling Point9.)"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable indicators of progress.)\n\n<Point2:1> *True* (Although not as detailed, the student's answer implies that internal milestones are part of systematic procedures.)\n\n<Point3:1> *True* (The student's answer aligns with the idea that these milestones indicate the project is on the right path.)\n\n<Point4:2> *True* (The student correctly states that internal milestones assess the development team's progress.)\n\n<Point5:1> *True* (The student's answer includes identifying issues and risks, which is part of the function of internal milestones.)\n\n<Point6:1> *True* (Making necessary adjustments to the project plan is mentioned, aligning with the reference answer.)\n\n<Point7:1> *True* (Completing a specific feature as an example of an internal milestone is correctly given.)\n\n<Point8:1> *True* (Testing and debugging the code is correctly identified as an internal milestone.)\n\n<Point9:1> *True* (Reaching a certain level of performance or functionality is mentioned, which is accurate.)"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer includes the idea that internal milestones are measurable and important for progress tracking.)\n\n<Point2:1> *True* (Although not explicitly stated as \"standard systematic procedures,\" the student implies these are standardized practices by mentioning \"standard procedures\".)\n\n<Point3:1> *True* (The student's answer aligns with the idea that milestones indicate the project is on track.)\n\n<Point4:2> *True* (The student correctly states that internal milestones assess the development team's progress.)\n\n<Point5:1> *True* (The student mentions identifying issues and risks, which is part of the function of internal milestones.)\n\n<Point6:1> *True* (The student's answer includes making necessary adjustments to the project plan, as per the reference answer.)\n\n<Point7:1> *True* (Completing a specific feature is mentioned as an example of an internal milestone.)\n\n<Point8:1> *True* (Testing and debugging the code is also correctly identified as an internal milestone.)\n\n<Point9:1> *True* (Achieving a specific level of performance or functionality is included in the student's answer.)"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer includes that internal milestones are measurable steps showing progress, aligning with the reference.)\n\n<Point2:1> *True* (Although not as detailed, the student mentions they are standard procedures, capturing the essence of Point2.)\n\n<Point3:1> *True* (The student's answer indicates that these milestones show the project is on track, which is similar to being on the right path.)\n\n<Point4:2> *True* (The student correctly states that milestones assess the team's progress.)\n\n<Point5:1> *True* (Mentioning identifying problems aligns with identifying issues and risks.)\n\n<Point6:1> *True* (Making necessary changes to the plan is mentioned, corresponding to making adjustments.)\n\n<Point7:1> *True* (Completing a feature is mentioned as part of the milestones.)\n\n<Point8:1> *True* (Debugging is included as a part of the milestones.)\n\n<Point9:1> *True* (Reaching a performance goal is mentioned, which aligns with the reference.)"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer includes the aspect of being measurable and indicating progress, aligning with the definition of important attributes.)\n\n<Point2:1> *True* (Although not explicitly stated as \"standard,\" the student implies systematic procedures by referring to \"measurable checkpoints,\" which is close enough to the reference.)\n\n<Point3:1> *True* (The student's answer conveys that these milestones show the team is on the right path, similar to the reference.)\n\n<Point4:2> *True* (The student correctly mentions assessing the development team's progress, matching the reference.)\n\n<Point5:1> *True* (Identifying issues is mentioned, which corresponds to the reference's \"identify issues.\")\n\n<Point6:1> *True* (The student's answer includes making adjustments, akin to \"make necessary adjustments\" in the reference.)\n\n<Point7:1> *True* (Completing a specific feature is given as an example, aligning with the reference.)\n\n<Point8:1> *True* (Testing the code is mentioned, which is part of the reference answer.)\n\n<Point9:1> *True* (Reaching a specific performance level is included, matching the reference.)"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer includes measurable and important attributes as part of the definition, aligning with the reference.)\n\n<Point2:1> *True* (Although not explicitly stated as \"standard,\" the student implies systematic procedures, which is close enough to the reference.)\n\n<Point3:1> *True* (The student's answer indicates that these milestones show engineers are on the right path, similar to the reference.)\n\n<Point4:2> *True* (The student correctly mentions assessing the development team's progress, matching the reference.)\n\n<Point5:1> *True* (Identifying issues and risks is mentioned, which corresponds to the reference.)\n\n<Point6:1> *True* (Making necessary adjustments is included, aligning with the reference's point about making changes to the project plan.)\n\n<Point7:1> *True* (Completing a specific feature as an example is given, matching the reference.)\n\n<Point8:1> *True* (Testing and debugging the code is mentioned, which is in line with the reference.)\n\n<Point9:1> *True* (Achieving a certain level of performance or functionality is included, consistent with the reference.)"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer includes the idea that internal milestones are measurable and important for progress.)\n\n<Point2:1> *True* (Although not as detailed, the student's answer implies that these milestones are part of systematic procedures.)\n\n<Point3:1> *True* (The student's answer conveys that these milestones indicate the project is on track.)\n\n<Point4:2> *True* (The student mentions assessing the development team's progress, aligning with the reference answer.)\n\n<Point5:1> *True* (The student's answer includes identifying issues and risks, which is part of the reference answer.)\n\n<Point6:1> *True* (Making necessary adjustments to the project plan is mentioned, albeit briefly.)\n\n<Point7:1> *True* (Completing a specific feature is mentioned as an example of an internal milestone.)\n\n<Point8:1> *True* (Testing and debugging are included as part of the milestones.)\n\n<Point9:1> *True* (Achieving a performance goal is mentioned, fitting with the reference.)"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer includes that internal milestones are measurable attributes, aligning with the reference.)\n\n<Point2:1> *True* (Although not explicitly stated as \"standard,\" the student implies systematic procedures are part of internal milestones.)\n\n<Point3:1> *True* (The student's answer conveys that these milestones show the team is on the right path.)\n\n<Point4:2> *True* (The student correctly mentions assessing the development team's progress.)\n\n<Point5:1> *True* (Identifying issues and risks is correctly included in the student's answer.)\n\n<Point6:1> *True* (Making necessary adjustments is mentioned, aligning with the reference.)\n\n<Point7:1> *True* (Completing a specific feature as an example is provided.)\n\n<Point8:1> *True* (Testing and debugging the code is mentioned as an example.)\n\n<Point9:1> *True* (Reaching a certain level of performance or functionality is included.)"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer includes the aspect of being measurable and important for progress tracking.)\n\n<Point2:1> *True* (Although not explicitly stated as \"standard systematic procedures,\" the student implies standard practices by mentioning \"checkpoints\" and \"standard procedures.\")\n\n<Point3:1> *True* (The student's answer aligns with the idea that these milestones indicate the project is on track.)\n\n<Point4:2> *True* (The student correctly states that internal milestones assess the development team's progress.)\n\n<Point5:1> *True* (The student mentions identifying issues and risks, which is part of the reference answer.)\n\n<Point6:1> *True* (Making necessary adjustments is included in the student's explanation.)\n\n<Point7:1> *True* (Completing a specific feature is given as an example, matching the reference.)\n\n<Point8:1> *True* (Testing and debugging the code is also mentioned as an example, which is accurate.)\n\n<Point9:1> *True* (Achieving a specific performance level is correctly identified as an example of an internal milestone.)"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer accurately reflects the emphasis on less planning and more development speed.)\n\n<Point3:1> *True* (The student mentions the series of smaller development cycles, aligning with the reference answer.)\n\n<Point4:1> *True* (The answer correctly states the goal of delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the use of feedback for continuous improvement, as stated in the reference.)"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student mentions minimizing detailed planning and focusing on development, aligning with the emphasis of the RAD model.)\n\n<Point3:1> *True* (The student accurately describes the model as involving shorter development cycles including key stages.)\n\n<Point4:1> *True* (The answer correctly states the aim of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the importance of continuous feedback from users for improvement, which is a core aspect of the RAD model.)"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as iterative and prototyping.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, mentioning less time on planning and more on development.)\n\n<Point3:1> *True* (The student includes the series of smaller development cycles, consistent with the reference.)\n\n<Point4:1> *True* (The answer accurately states the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student's answer highlights the importance of user and stakeholder feedback for refinement.)"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, emphasizing less time on planning and more on development.)\n\n<Point3:1> *True* (The student accurately describes the model as involving smaller development cycles with key stages mentioned.)\n\n<Point4:1> *True* (The answer correctly states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the importance of feedback from end-users and stakeholders for refinement, as stated in the reference.)"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly states that RAD reduces time on planning phases, focusing more on development.)\n\n<Point3:1> *True* (The student accurately describes the model as involving smaller development cycles.)\n\n<Point4:1> *True* (The answer correctly highlights the quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the importance of feedback from end-users and stakeholders for continuous refinement.)"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, mentioning less time on planning and more on development.)\n\n<Point3:1> *True* (The student includes the series of smaller development cycles, consistent with the reference answer.)\n\n<Point4:1> *True* (The answer accurately states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer acknowledges the importance of user feedback for refinement, matching the reference.)"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as iterative and prototyping-based.)\n\n<Point2:1> *True* (The student's answer accurately reflects the reduced focus on planning and increased emphasis on development.)\n\n<Point3:1> *True* (The student mentions the series of smaller development cycles that align with the RAD model.)\n\n<Point4:1> *True* (The answer correctly states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student includes the importance of feedback from end-users and stakeholders for refinement, which is a key part of the RAD model.)"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer accurately reflects that RAD reduces time on planning and focuses on development.)\n\n<Point3:1> *True* (The student mentions the series of smaller development cycles, aligning with the reference.)\n\n<Point4:1> *True* (The answer correctly states the aim of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the importance of user and stakeholder feedback for refinement, as stated in the reference.)"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, mentioning less time on planning and more on development.)\n\n<Point3:1> *True* (The student includes the series of smaller development cycles, consistent with the reference answer.)\n\n<Point4:1> *True* (The answer accurately states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer acknowledges the importance of user feedback for refinement, matching the reference.)"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer aligns with the reference, mentioning less time on planning and more on development.)\n\n<Point3:1> *True* (The student includes the series of smaller development cycles, consistent with the reference.)\n\n<Point4:1> *True* (The answer correctly states the focus on quick delivery of functional software.)\n\n<Point5:2> *True* (The student's answer acknowledges the importance of user feedback for refinement, as stated in the reference.)"
    }
}