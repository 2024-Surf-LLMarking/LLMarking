{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting requirements from stakeholders. System Analysis and Design: Analyzing requirements and creating a blueprint. Implementation: Writing the code. Testing: Checking the system for defects. Deployment: Releasing the software to users. Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies Requirement Gathering as a key phase)\n\n<Point2:1> *True* (The student accurately describes requirement gathering as collecting requirements from stakeholders.)\n\n<Point3:1> *True* ( The student correctly identifies System Analysis and Design as a key phase )\n\n<Point4:1> *True* (The student provides a correct description of System Analysis and Design)\n\n<Point5:1> *True*  ( The student correctly identifies Implementation as a key phase )\n\n<Point6:1> *True* (The student accurately describes the implementation phase.)\n\n<Point7:1> *True* (The student correctly identifies Testing as a key phase)\n\n\n<Point8:1> *True* ( The student accurately describes the testing phase.)\n\n<Point9:1> *True* ( The student correctly identifies Deployment as a key phase ) \n\n<Point10:1> *True*( The student accurately describes the deployment phase.)\n<Point11:1> *True* (The student correctly identifies Maintenance as a key phase)\n\n<Point12:1> *True* ( The student accurately describes the maintenance phase.) \n"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Understanding what the software needs to do by talking to stakeholders. System Analysis and Design: Creating a detailed plan and design for the software. Implementation (Coding): Developing the software based on the design. Testing: Ensuring the software works correctly by finding and fixing bugs. Deployment: Making the software available to the users. Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies Requirement Gathering as a key phase.\n\n<Point2:1> *True*  The student accurately describes requirement gathering as understanding user needs through stakeholder communication.\n\n<Point3:1> *True* System Analysis and Design is correctly listed as a key phase.\n\n<Point4:1> *True* The student provides a good explanation of System Analysis and Design as creating a plan and design. \n\n<Point5:1> *True* The student identifies Implementation (Coding) as a key SDLC phase.\n\n<Point6:1> *True*  The student correctly associates implementation with developing the software based on the design.\n\n<Point7:1> *True* Testing is accurately listed as a key SDLC phase.\n\n<Point8:1> *True* The student provides a concise description of testing, highlighting bug detection and correction. \n\n<Point9:1> *True* Deployment is correctly identified as a key phase.\n  \n<Point10:1> *True* The student explains deployment as making the software available to users.\n\n<Point11:1> *True* Maintenance is listed as a final key phase.\n\n<Point12:1> *True* The student describes maintenance as keeping the software running smoothly and adding improvements. \n"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are: Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed. System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created. Implementation (Coding): This phase involves writing the code according to the design documents. Testing: The system is verified against the requirements to identify and fix defects. Deployment: The software is released to the production environment for users. Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identified Requirement Gathering as a key phase of SDLC.\n<Point2:1> *True* The student accurately described the purpose of Requirement Gathering.\n<Point3:1> *True* The student correctly identified System Analysis and Design as a key phase of SDLC. \n<Point4:1> *True* The student accurately described the purpose of System Analysis and Design.\n<Point5:1> *True* The student correctly identified Implementation (Coding) as a key phase of SDLC.\n<Point6:1> *True* The student accurately described the purpose of  Implementation (Coding).\n\n<Point7:1> *True* The student correctly identified Testing as a key phase of SDLC. \n<Point8:1> *True* The student accurately described the purpose of Testing.\n<Point9:1> *True* The student correctly identified Deployment as a key phase of SDLC.  \n\n<Point10:1> *True* The student accurately described the purpose of Deployment.\n\n<Point11:1> *True* The student correctly identified Maintenance as a key phase of SDLC.\n<Point12:1> *True* The student accurately described the purpose of Maintenance. \n\n\n\n"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are: Requirement Gathering: This is where the requirements from stakeholders are collected. System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created. Implementation (Coding): The next step is to write the code based on the design. Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects. Deployment: The software is then deployed to the production environment. Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies Requirement Gathering as a key phase)\n\n<Point2:1> *True* (The student accurately describes Requirement Gathering as collecting requirements from stakeholders.)\n\n<Point3:1> *True* (The student correctly identifies System Analysis and Design as a key phase.)\n\n<Point4:1> *True* (The student accurately describes System Analysis and Design as analyzing requirements and creating a system blueprint.) \n\n<Point5:1> *True* (The student correctly identifies Implementation (Coding) as a key phase.)\n\n<Point6:1> *True* (The student accurately describes Implementation as writing code based on the design.)\n\n<Point7:1> *True* (The student correctly identifies Testing as a key phase.)\n\n<Point8:1> *True* (The student accurately describes Testing as verifying the system against requirements and fixing defects.)\n\n<Point9:1> *True*  (The student correctly identifies Deployment as a key phase.)\n\n<Point10:1> *True* (The student accurately describes Deployment as releasing software to production.)\n\n<Point11:1> *True* (The student correctly identifies Maintenance as a key phase.) \n\n\n<Point12:1> *True* (The student accurately describes Maintenance as ongoing support and enhancements.)"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases: Requirement Gathering: Collecting the requirements from stakeholders. System Analysis and Design: Analyzing the requirements and designing the system. Implementation (Coding): Writing the code based on the design. Testing: Checking the system for defects. Deployment: Releasing the software for use. Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies \"Requirement Gathering\" as a key phase of the SDLC. \n<Point2:1> *True*  The student accurately describes requirement gathering as collecting requirements from stakeholders.\n<Point3:1> *True* The student correctly lists \"System Analysis and Design\" as a phase.\n<Point4:1> *True* The student provides a correct explanation of System Analysis and Design: analyzing requirements and designing the system.\n<Point5:1> *True*  The student correctly identifies \"Implementation (Coding)\" as a key phase.\n<Point6:1> *True* The student accurately describes implementation as writing code based on the design. \n<Point7:1> *True* The student correctly lists \"Testing\" as a phase of the SDLC.\n<Point8:1> *True* The student accurately describes testing as checking the system for defects.\n<Point9:1> *True* The student correctly identifies \"Deployment\" as a key phase.\n\n<Point10:1> *True* The student provides a correct description of deployment: releasing software for use.\n\n<Point11:1> *True* The student correctly identifies \"Maintenance\" as the final phase.\n\n<Point12:1> *True* The student accurately describes maintenance as supporting and enhancing the software after deployment. \n\n\n"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes: Requirement Gathering: Gathering what is needed for the project. System Analysis and Design: Creating a design based on the requirements. Implementation (Coding): Coding the project. Testing: Testing the code. Deployment: Making the software available. Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies \"Requirement Gathering\" as a key phase. \n<Point2:1> *True* The student accurately describes requirement gathering as figuring out project needs.\n<Point3:1> *True*  The student correctly lists \"System Analysis and Design\".\n<Point4:1> *True* The student's description of system analysis and design aligns with the reference answer. \n<Point5:1> *True* The student correctly includes \"Implementation (Coding)\".\n<Point6:1> *True* The student provides a suitable explanation for the implementation phase.\n<Point7:1> *True* The student identifies \"Testing\" as a phase.\n<Point8:1> *True* The description of testing aligns with the reference answer's concept of verifying against requirements.\n<Point9:1> *True*  The student correctly lists \"Deployment\".\n<Point10:1> *True* The student's explanation about making software available matches the reference answer.\n<Point11:1> *True* The student includes \"Maintenance\".\n<Point12:1> *True* The description of maintenance as ongoing updates and fixes is accurate. \n"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are: Requirement Gathering: Understanding what the stakeholders need. System Analysis and Design: Planning how the system will be built. Implementation (Coding): Writing the actual code. Testing: Making sure the software works as expected. Deployment: Launching the software for users. Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies \"Requirement Gathering\" as a phase of SDLC. \n\n<Point2:1> *True* The student's explanation captures the essence of requirement gathering - understanding stakeholder needs.\n\n<Point3:1> *True* The student correctly lists  \"System Analysis and Design\".\n\n<Point4:1> *True* The explanation provided (\"Planning how the system will be built\") aligns with the concept of System Analysis and Design.\n\n<Point5:1> *True* The student accurately includes \"Implementation (Coding)\".\n\n<Point6:1> *True*  The student's concise description of implementation as \"Writing the actual code\" is correct.\n\n<Point7:1> *True*  The student correctly identifies \"Testing\".\n\n<Point8:1> *True* The explanation (\"Making sure the software works as expected\") reflects the core purpose of testing.\n\n<Point9:1> *True* The student correctly lists \"Deployment\" as a phase. \n\n<Point10:1> *True*  The explanation (\"Launching the software for users\") is accurate.\n\n<Point11:1> *True* The student correctly includes \"Maintenance\".\n\n<Point12:1> *True* The student's description of maintenance as \"Keeping the software updated and fixing issues\" is a good summary. \n"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of: Requirement Gathering: Collecting the requirements needed for the project. System Analysis and Design: Designing the system based on the requirements. Implementation (Coding): Writing the code for the project. Testing: Checking the software for any issues. Deployment: Releasing the final product to the users. Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identified \"Requirement Gathering\" as a key phase. \n<Point2:1> *True*  The student accurately described requirement gathering as collecting project needs.\n<Point3:1> *True*  The student correctly identified \"System Analysis and Design\".\n<Point4:1> *True* The student gave an accurate description of this phase.\n<Point5:1> *True* The student correctly identified \"Implementation (Coding)\".\n<Point6:1> *True* The student accurately described coding as writing code based on design documents.\n<Point7:1> *True* The student correctly identified \"Testing\".\n<Point8:1> *True* The student gave an accurate description of testing, mentioning checking for issues.\n\n<Point9:1> *True* The student correctly identified \"Deployment\".\n\n<Point10:1> *True* The student accurately described deployment as releasing the product to users. \n<Point11:1> *True* The student correctly identified \"Maintenance\".\n\n<Point12:1> *True* The student accurately described maintenance as providing post-release support and updates.  \n\n\n\n"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting what needs to be developed from the stakeholders. System Analysis and Design: Analyzing these requirements and making a system design. Implementation (Coding): Writing the code according to the design. Testing: Verifying that the system works as intended and fixing any defects. Deployment: Making the software available to the users. Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies Requirement Gathering as a key phase.)\n\n<Point2:1> *True* (The student accurately describes the purpose of requirement gathering.)\n\n<Point3:1> *True* (The student correctly identifies System Analysis and Design as a key phase.)\n\n<Point4:1> *True*  (The student accurately describes the purpose of system analysis and design.) \n\n\n<Point5:1> *True* (The student correctly identifies Implementation (Coding) as a key phase.)\n\n<Point6:1> *True* (The student accurately describes the purpose of implementation (coding).)\n\n<Point7:1> *True*  (The student correctly identifies Testing as a key phase.)\n\n<Point8:1> *True* (The student accurately describes the purpose of testing.)\n\n<Point9:1> *True* (The student correctly identifies Deployment as a key phase.) \n\n<Point10:1> *True*  (The student accurately describes the purpose of deployment.)\n\n\n<Point11:1> *True* (The student correctly identifies Maintenance as a key phase.)\n\n<Point12:1> *True* (The student accurately describes the purpose of maintenance.)\n\n\n\n"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes: Requirement Gathering: Understanding what the project needs. System Analysis and Design: Creating a detailed plan based on the requirements. Implementation (Coding): Writing the necessary code. Testing: Ensuring the system meets requirements and fixing any problems. Deployment: Making the software available to the end-users. Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies \"Requirement Gathering\" as a key phase of SDLC. \n\n<Point2:1> *True* The student provides a concise explanation aligning with the reference point.\n\n<Point3:1> *True* The student correctly identifies \"System Analysis and Design\" as a key phase.\n\n<Point4:1> *True*  The student's explanation aligns with the concept of analyzing requirements and creating a blueprint.\n\n<Point5:1> *True*  The student correctly identifies \"Implementation (Coding)\" as a key phase.\n\n<Point6:1> *True* The student provides an appropriate description for the coding phase. \n\n<Point7:1> *True* The student correctly identifies \"Testing\" as a key phase.\n\n<Point8:1> *True* The student accurately explains the purpose of testing within SDLC.\n\n\n<Point9:1> *True* The student correctly identifies \"Deployment\" as a key phase.\n\n<Point10:1> *True* The student's explanation aligns with making the software accessible to users.\n\n<Point11:1> *True* The student correctly identifies \"Maintenance\" as a key phase.\n\n<Point12:1> *True* The student accurately describes the ongoing nature of maintenance. \n"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as a linear and sequential approach with phases that need completion before moving on. \n\n<Point2:1> *True*  The student correctly uses the waterfall analogy to explain the unidirectional flow of the Waterfall model.\n\n<Point3:1> *True* The student highlights the difficulty of implementing changes in the Waterfall model due to its linear nature, requiring revisiting prior phases.\n\n\n<Point4:2> *True*  The student accurately portrays the Agile model as iterative and incremental, emphasizing its focus on flexibility, collaboration, and customer feedback.\n\n<Point5:1> *True* The student correctly explains that Agile development happens in small increments called iterations, enabling reassessment and adaptation. \n\n<Point6:1> *True* The student mentions continuous feedback from stakeholders as a key aspect of Agile, allowing for adaptability to changing requirements.\n\n<Point7:1> *True* The student accurately states that changes can be made at any stage in the Agile process due to its flexibility and iterative nature. \n"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as linear and sequential, where phases are completed one after another. \n\n<Point2:1> *True* The student accurately uses the \"straight path\" analogy to illustrate the unidirectional flow of the Waterfall model.\n\n<Point3:1> *True*  The student correctly points out the difficulty of making changes in the Waterfall model due to its sequential nature.\n\n<Point4:2> *True* The student effectively contrasts Agile's iterative and flexible approach with the Waterfall model.\n\n<Point5:1> *True* The student mentions \"small, repeated cycles of development,\" which accurately reflects Agile's incremental approach through iterations. \n\n\n<Point6:1> *True* The student highlights the importance of ongoing feedback in Agile, allowing for adaptation to changing requirements.\n\n<Point7:1> *True* The student correctly states that Agile allows changes at any stage of development, making it adaptable to evolving needs."
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear and sequential approach where each phase must be completed before the next one begins. \n<Point2:1> *True*  The student accurately explains that the Waterfall process flows in one direction without overlapping or iteration.\n<Point3:1> *True*  The student correctly identifies the difficulty in making changes with the Waterfall model, as it requires revisiting previous phases.\n\n<Point4:2> *True* The student accurately describes the Agile model as an iterative and incremental approach that focuses on flexibility and customer feedback.\n<Point5:1> *True* The student correctly explains that development in Agile happens in small iterations allowing for regular reassessment and adaptation. \n<Point6:1> *True*  The student highlights the importance of continuous stakeholder feedback and adaptability to changing requirements in Agile.\n<Point7:1> *True* The student accurately states that changes can be made at any stage in Agile, accommodating evolving needs.\n\n\n\n"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True*  The student accurately describes the sequential nature of the Waterfall model and how each phase must be completed before proceeding. \n<Point2:1> *True* The student correctly explains the unidirectional flow of the Waterfall process without overlapping phases.\n<Point3:1> *True* The student accurately points out the difficulty of implementing changes in the Waterfall model once a phase is finished due to the need for rework.\n\n<Point4:2> *True*  The student provides a good description of Agile's iterative and incremental approach, emphasizing flexibility and customer feedback.\n<Point5:1> *True* The student correctly identifies iterations as the small, manageable increments in Agile development. \n<Point6:1> *True* The student accurately highlights the importance of continuous feedback from stakeholders and adaptability to changing requirements in Agile.\n\n<Point7:1> *True* The student rightly states that changes are welcomed at any stage in the Agile process, accommodating evolving needs.\n\n\n\n"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model's sequential nature and unidirectional flow.\n<Point2:1> *True* The student correctly explains how the Waterfall process moves in a single direction without overlapping phases.\n<Point3:1> *True*  The student highlights the difficulty of making changes in the Waterfall model once a phase is complete.\n<Point4:2> *True* The student accurately describes Agile's focus on flexibility, collaboration, and customer feedback.\n\n<Point5:1> *True* The student correctly identifies Agile's use of iterative cycles or sprints. \n<Point6:1> *True* The student explains how Agile allows for continuous feedback and adaptation.\n<Point7:1>  *True* The student accurately states that Agile enables changes throughout the development process.\n\n\n"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear and sequential approach where each phase must be completed before the next.\n\n<Point2:1> *True* The student accurately states that the Waterfall process flows in one direction without overlapping or iteration. \n\n<Point3:1> *True*  The student correctly points out that changes are difficult to implement in the Waterfall model once a phase is complete.\n\n<Point4:2> *True* The student provides a good description of Agile as an iterative and incremental approach emphasizing flexibility, collaboration, and customer feedback.\n\n<Point5:1> *True* The student correctly mentions that Agile development occurs in small iterations, allowing for regular reassessment and adaptation.\n\n<Point6:1> *True* The student accurately highlights that Agile allows for continuous stakeholder feedback and adaptability to changing requirements.\n\n<Point7:1> *True*  The student correctly states that changes can be made at any stage in the Agile process.\n\n\n\n"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear and sequential approach where phases are completed one after another. \n\n<Point2:1> *True*  The student accurately portrays the unidirectional flow of the Waterfall model, likening it to a waterfall moving through distinct stages without overlap or iteration.\n\n<Point3:1> *True* The student highlights a key characteristic of the Waterfall model - the difficulty in implementing changes once a phase is completed due to the need for revisiting and potentially redoing previous work.\n\n<Point4:2> *True* The student effectively captures the essence of Agile as an iterative and incremental approach emphasizing flexibility, collaboration, and customer feedback.\n\n<Point5:1> *True* The student correctly mentions that development in Agile occurs in small, manageable increments called iterations, enabling regular reassessment and adjustments.\n\n<Point6:1> *True* The student accurately explains the role of continuous feedback from stakeholders and adaptability to evolving requirements within the Agile methodology.\n\n<Point7:1> *True* The student emphasizes a significant advantage of Agile - its flexibility in accommodating changes throughout the development process, regardless of the stage. \n"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student correctly describes the sequential nature of the Waterfall model where each phase must be completed before moving on. \n<Point2:1> *True* The student accurately compares the flow of the Waterfall model to a waterfall, highlighting its linear progression.\n<Point3:1> *True*  The student identifies the difficulty of implementing changes in the Waterfall model once a phase is complete. \n\n<Point4:2> *True* The student correctly identifies Agile as an iterative and incremental approach emphasizing flexibility, collaboration, and customer feedback.\n\n<Point5:1> *True* The student mentions iterations as small development cycles within the Agile methodology.\n<Point6:1> *True* The student highlights the importance of continuous feedback from stakeholders in Agile development.\n<Point7:1> *True* The student accurately points out Agile's flexibility and ability to accommodate changes throughout the project lifecycle. \n\n\n\n"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as a linear, sequential process where phases must be completed in order. \n<Point2:1> *True* The student uses the analogy of a waterfall to explain the unidirectional flow of the Waterfall model.\n<Point3:1> *True* The student correctly identifies the difficulty in making changes within the Waterfall model once a phase is finished.\n\n<Point4:2> *True*  The student captures the essence of Agile as an iterative and flexible approach.\n<Point5:1> *True*  The student mentions iterations, which are key to the Agile methodology. \n<Point6:1> *True* The student highlights continuous feedback and adaptability as hallmarks of Agile.\n\n <Point7:1>*True* The student correctly states that changes can be implemented throughout the Agile process. \n"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes the Waterfall model as a linear sequential approach where phases must be completed in order.)\n\n<Point2:1> *True*  (The student correctly explains that the Waterfall model flows in one direction without overlapping or iteration.) \n\n<Point3:1> *True* (The student highlights the difficulty of implementing changes in the Waterfall model once a phase is completed.)\n\n<Point4:2> *True* ( The student accurately characterizes the Agile model as an iterative and incremental approach that prioritizes flexibility and collaboration.)\n\n<Point5:1> *True* (The student mentions that Agile development occurs in small increments called iterations.)\n\n<Point6:1> *True* (The student correctly identifies continuous stakeholder feedback as a key aspect of Agile.)\n\n\n<Point7:1> *True*(The student accurately states that Agile allows for changes at any stage of development.) \n"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of how strongly related elements within a module are. \n<Point2:1> *True*  The student accurately mentions that cohesion measures the relationship strength between data and methods in a class.\n<Point3:1> *True* The student implies the concept of a unifying factor or purpose by stating that high cohesion means elements work together well towards a common goal.\n<Point4:2> *True* The student correctly explains that high cohesion involves closely related elements working toward a common goal.\n\n<Point5:2> *True*  The student accurately describes low cohesion as elements lacking close relationships and a clear purpose. \n"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes cohesion as the bond strength between elements in a module.) \n\n<Point2:1> *True* (The student correctly mentions that cohesion relates to the relationship strength between data and methods within a class.)\n\n<Point3:1> *True* (The student highlights the unifying factor or purpose of a class as a component of cohesion.)\n\n\n<Point4:2> *True* (The student accurately explains high cohesion as elements working together towards a common goal.)\n\n<Point5:2> *True* (The student correctly describes low cohesion as loosely related elements without a clear unified purpose.) \n"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student accurately defines cohesion as the bond strength between elements within a module.\n\n<Point2:1> *True*  The student correctly identifies that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student mentions the unifying factor or purpose served by the class, which is another aspect of cohesion. \n\n<Point4:2> *True* The student accurately describes high cohesion as elements being closely related and working towards a common goal.\n<Point5:2> *True* The student correctly explains that low cohesion means loosely related elements lacking a unified purpose.\n\n\n"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True*  The student correctly defines cohesion as a measure of bond strength between elements in a module. \n\n<Point2:1> *True* The student mentions the relationship strength between data and methods within a class, aligning with this point.\n\n<Point3:1> *True* The student touches upon the unifying factor or purpose served by the class when discussing achieving a common goal. \n\n\n<Point4:2> *True*  The student accurately describes high cohesion as elements working together toward a common goal.\n\n<Point5:2> *True* The student correctly explains low cohesion as loosely related elements lacking a clear unified purpose. \n"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of the bond strength between elements in a module. \n\n<Point2:1> *True*  The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student highlights the importance of the unifying factor or purpose served by the class as part of cohesion.\n\n<Point4:2> *True* The student correctly explains that high cohesion implies closely related elements working towards a common goal.\n\n<Point5:2> *True* The student accurately describes low cohesion as loosely related elements lacking a clear, unified purpose. \n"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* (The student accurately mentions the relationship between data and methods within a class as an indicator of cohesion.) \n<Point3:1> *True* (The student touches upon the unifying factor or purpose of a class as part of cohesion.)\n<Point4:2> *True* (The student correctly explains high cohesion as elements being closely related and working towards a common goal.)\n\n<Point5:2> *True* (The student accurately describes low cohesion as elements being loosely related and lacking a clear unified purpose.) \n\n\n"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as the bond strength between elements in a module. \n<Point2:1> *True* The student mentions the relationship between data of a class/methods, which aligns with this point.\n<Point3:1> *True*  The student correctly points out that cohesion considers the unifying factor or purpose of the class.\n\n<Point4:2> *True* The student accurately describes high cohesion as elements working together towards a common goal.\n\n<Point5:2> *True* The student correctly states that low cohesion implies loosely related elements lacking a clear purpose. \n\n\n\n"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True*  The student correctly defines cohesion as the bond strength between elements in a module. \n<Point2:1> *True* The student accurately mentions that cohesion measures the relationship strength between data and methods of a class.\n<Point3:1> *True* The student touches upon the unifying factor or purpose that a class serves, linking it to cohesion.\n\n<Point4:2> *True* The student provides a correct explanation of high cohesion, emphasizing related elements working towards a common goal.\n<Point5:2> *True* The student accurately describes low cohesion as a situation where elements lack clear relationships and purpose. \n\n\n\n"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as the bond strength between elements in a module. \n\n<Point2:1> *True*  The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student includes the concept of a unifying factor or purpose served by the class, which is a key aspect of cohesion.\n\n<Point4:2> *True* The student correctly explains high cohesion as elements being closely related and working towards a common goal.\n\n<Point5:2> *True* The student accurately describes low cohesion as loosely related elements without a clear, unified purpose. \n\n\n"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.) \n<Point2:1> *True* (The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.)\n<Point3:1> *True* (The student highlights the importance of a unifying factor or purpose for cohesion.)\n<Point4:2> *True*  (The student correctly explains high cohesion as elements being closely related and working towards a common goal.)\n<Point5:2> *True* ( The student accurately describes low cohesion as loosely related elements lacking a clear, unified purpose.) \n\n\n"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student accurately describes them as standard systematic procedures.) \n\n<Point3:1> *True*  (The student states that these procedures indicate engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions that milestones help assess development team progress.)\n\n<Point5:1> *True* ( The student correctly identifies issue and risk identification as a use of milestones.) \n\n<Point6:1> *True* (The student notes milestones facilitate adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides completing a specific feature as an example of a milestone.)\n\n<Point8:1> *True* (The student includes testing and debugging code as another example.)\n\n\n<Point9:1> *True* (The student accurately mentions reaching a performance or functionality level as a milestone type.) \n"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True*  The student correctly describes internal milestones as measurable indicators of progress in processes. \n<Point2:1> *False* The student doesn't mention that internal milestones are standard systematic procedures.\n<Point3:1> *True* The student accurately states that milestones indicate the engineers are on the right track.\n<Point4:2> *True*  The student mentions that milestones help assess the development team's progress.\n<Point5:1> *True* The student identifies that milestones can be used to identify issues and risks. \n<Point6:1> *True* The student highlights that milestones allow for making necessary adjustments to the project plan.\n<Point7:1> *True* The student provides completing a specific feature as an example of a milestone.\n<Point8:1> *True* The student includes testing and debugging code as another example of a milestone.\n<Point9:1> *True*  The student mentions achieving a specific performance level as a type of milestone. \n\n\n"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly states that internal milestones are measurable indicators of progress within the development process.) \n<Point2:1> *True* (The student accurately describes internal milestones as standard procedures.)\n<Point3:1> *True* (The student mentions that internal milestones demonstrate that engineers are on track.)\n<Point4:2> *True* (The student includes the use of milestones for assessing progress of the development team.)\n<Point5:1> *True* ( The student correctly identifies identifying issues and risks as a purpose of internal milestones.)\n<Point6:1> *True*  ( The student mentions making adjustments to the project plan based on milestones.) \n<Point7:1> *True* (The student provides completing a specific feature as an example of an internal milestone.)\n<Point8:1> *True* (The student includes testing and debugging code as another example of an internal milestone.)\n<Point9:1> *True* ( The student correctly identifies reaching a certain level of performance or functionality as a potential internal milestone.) \n\n\n"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable attributes of processes.\n\n<Point2:1> *True* The student accurately describes internal milestones as standard systematic procedures.\n\n<Point3:1> *True*  The student correctly states that internal milestones indicate the engineers are on the right track.\n\n<Point4:2> *True* The student mentions that internal milestones can be used to assess the development team's progress. \n\n<Point5:1> *True* The student correctly identifies that internal milestones help in identifying issues and risks.\n\n<Point6:1> *True* The student states that internal milestones allow for adjustments to the project plan, which is accurate.\n\n<Point7:1> *True* The student provides an example of a milestone being the completion of a specific feature.\n\n<Point8:1> *True*  The student correctly gives an example of testing and debugging as a potential milestone.\n\n<Point9:1> *True* The student includes reaching a certain performance level as an example of a milestone. \n\n\n\n"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable steps showing progress in processes.\n\n<Point2:1> *True*  The student accurately describes internal milestones as standard procedures.\n\n<Point3:1> *True* The student explains that these milestones indicate the project is on track. \n<Point4:2> *True*  The student mentions assessing team progress as a use for milestones.\n\n<Point5:1> *True* The student includes identifying problems as a use of milestones.\n<Point6:1> *True* The student states making adjustments to the project plan is facilitated by milestones. \n<Point7:1> *True* The student provides completing a feature as an example of an internal milestone.\n\n<Point8:1> *True*  The student includes debugging as an example of an internal milestone.\n\n<Point9:1> *True* The student mentions reaching a performance goal as an example of an internal milestone. \n"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly states that internal milestones are measurable checkpoints that indicate progress, aligning with the reference answer's definition of \"measurable and important attributes of processes.\"\n\n<Point2:1> *True*  The student mentions \"systematic procedures,\" which reflects the reference answer's description of internal milestones as \"standard systematic procedures.\"\n\n<Point3:1> *True* The phrase \"ensure that the development team is on the right path\" accurately reflects the reference answer's point about internal milestones indicating progress.\n\n<Point4:2> *True* The student explicitly states that milestones \"can help assess progress,\" directly addressing this point from the reference answer.\n\n<Point5:1> *True* By mentioning the ability to \"identify issues\"  the student aligns with the reference answer's point about using milestones to identify issues and risks.\n\n\n<Point6:1> *True* The student includes \"adjust the project plan if needed,\" which is consistent with the reference answer's point about making necessary adjustments.\n\n<Point7:1> *True*  The student provides \"completing a feature\" as an example, mirroring one of the examples given in the reference answer.\n\n<Point8:1> *True* The student lists \"testing the code,\" which is another example provided in the reference answer.\n\n<Point9:1> *True* The mention of \"reaching a specific performance level\" aligns with the reference answer's example of milestones related to functionality. \n"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable attributes of processes.\n<Point2:1> *True*  The student accurately describes internal milestones as standard systematic procedures. \n<Point3:1> *True* The student correctly states that internal milestones indicate engineers are progressing in the right direction.\n<Point4:2> *True* The student mentions that milestones are used to assess the development team's progress.\n<Point5:1> *True* The student includes identifying issues and risks as a use of internal milestones.\n<Point6:1> *True* The student correctly states that milestones help make necessary adjustments to the project plan.\n<Point7:1> *True* The student provides an example of completing a specific feature as an internal milestone.\n<Point8:1> *True*  The student gives testing and debugging code as another example of an internal milestone. \n<Point9:1> *True* The student mentions reaching a certain performance level as a type of internal milestone. \n\n\n"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable indicators of progress in processes)\n<Point2:1> *True* (The student accurately describes internal milestones as standard procedures)\n<Point3:1> *True* (The student mentions that milestones indicate the project is on track.) \n<Point4:2> *True* (The student states that milestones can be used to assess progress.)\n<Point5:1> *True* (The student includes identifying issues and risks as a use of milestones)\n<Point6:1> *True* (The student correctly mentions adjusting the project plan as a use of milestones)\n<Point7:1> *True* (The student provides completing a feature as an example of a milestone.)\n<Point8:1> *True* ( The student lists testing and debugging as examples.)\n<Point9:1> *True* (The student includes achieving performance goals as a type of milestone.) \n\n\n"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True*  The student correctly states that internal milestones are measurable attributes. \n<Point2:1> *True* The student mentions that they are systematic procedures.\n\n<Point3:1> *True* The student states that milestones indicate engineers are on the right path.\n<Point4:2> *True*  The student correctly identifies assessing progress as a use of milestones.\n<Point5:1> *True* The student mentions identifying issues and risks as a use.\n\n<Point6:1> *True* The student mentions making necessary adjustments as a use.\n\n<Point7:1> *True* Completing a feature is listed as an example. \n\n<Point8:1> *True* Testing and debugging are listed as examples.\n\n<Point9:1> *True* Reaching a performance level is listed as an example.\n\n\n\n"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable attributes of processes related to progress. \n<Point2:1> *True*  The student identifies internal milestones as standard procedures.\n<Point3:1> *True* The student states that internal milestones indicate the engineers are on the right path.\n\n<Point4:2> *True* The student accurately mentions using milestones to assess development progress.\n\n<Point5:1> *True*  The student correctly identifies issue and risk identification as a use for milestones.\n<Point6:1> *True* The student notes that adjustments can be made to the project plan based on milestone feedback. \n\n<Point7:1> *True* The student provides completing a feature as a relevant example of an internal milestone.\n\n<Point8:1> *True* The student correctly includes testing and debugging as examples.\n<Point9:1> *True* The student accurately lists achieving a performance level as another example. \n\n\n"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies RAD as an iterative and prototyping approach.\n<Point2:1> *True* The student accurately describes RAD's emphasis on less time spent on planning and more focus on development. \n<Point3:1> *True* The student lists the key development cycles within RAD (planning, design, construction, testing).\n<Point4:1> *True*  The student correctly states the goal of quick delivery to clients and stakeholders.\n\n<Point5:2> *True* The student mentions the incorporation of end-user and stakeholder feedback for improvement. \n\n\n\n"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies RAD as an iterative and prototyping approach. \n\n<Point2:1> *True* The student accurately describes the emphasis on less time spent on planning and more on development in RAD.\n\n<Point3:1> *True* The student lists the key development cycles involved in RAD (planning, design, construction, and testing).\n\n<Point4:1> *True* The student correctly states that RAD aims for quick delivery of functional software to clients and stakeholders. \n\n<Point5:2> *True*  The student accurately mentions the importance of user feedback for continuous improvement in the RAD model.\n\n\n\n"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True*  The student accurately describes RAD as an iterative and prototyping approach.\n<Point2:1> *True* The student correctly highlights the emphasis on reduced planning time and increased development time. \n<Point3:1> *True* The student lists the key development cycles within the RAD model.\n<Point4:1> *True* The student accurately states the focus on rapid delivery of functional software to stakeholders.\n\n<Point5:2> *True*  The student correctly mentions the importance of user and stakeholder feedback for refinement. \n\n\n"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student accurately describes RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student correctly states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student lists the correct series of development cycles involved in RAD.)\n\n<Point4:1> *True*  (The student accurately highlights the focus on quick delivery of functional software.)\n\n<Point5:2> *True* ( The student correctly mentions that RAD incorporates feedback from users and stakeholders.) \n"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately describes the emphasis on reduced planning time and increased development focus.)\n<Point3:1> *True* (The student lists the series of smaller development cycles characteristic of RAD.)\n<Point4:1> *True* (The student highlights the focus on quick delivery of functional software to clients and stakeholders.)\n<Point5:2> *True* (The student mentions the incorporation of feedback from end-users and stakeholders for continuous refinement.) \n"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately states that RAD prioritizes rapid development over extensive planning.\n<Point3:1> *True* The student lists the key development cycles within RAD.\n<Point4:1> *True*  The student correctly highlights the focus on quick delivery of functional software.\n<Point5:2> *True* The student accurately mentions the importance of user feedback in RAD. \n\n\n\n"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach.\n\n<Point2:1> *True*  The student accurately states that RAD emphasizes less time on planning and more on development. \n\n\n<Point3:1> *True* The student lists the key development cycles (planning, design, construction, testing) found in RAD.\n\n<Point4:1> *True* The student correctly highlights quick delivery of functional software as a goal of RAD.\n <Point5:2> *True* The student mentions the incorporation of user feedback for refinement, a core aspect of RAD. \n"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately states that RAD emphasizes less time on planning and more on development.)\n\n<Point3:1> *True* (The student lists the smaller development cycles characteristic of RAD: planning, design, construction, and testing.)\n\n<Point4:1> *True* ( The student correctly points out the focus on quick delivery of functional software in RAD.) \n\n<Point5:2> *True*( The student mentions the incorporation of user and stakeholder feedback for refinement, a key aspect of RAD.)\n"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately states that RAD prioritizes development over lengthy planning phases.) \n<Point3:1> *True* (The student lists the key development cycles within the RAD model.)\n<Point4:1> *True* (The student correctly highlights the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student mentions the importance of end-user feedback for refinement.) \n"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True*  The student correctly identifies RAD as an iterative and prototyping approach.\n<Point2:1> *True* The student accurately states that RAD emphasizes less time on planning and more on development. \n<Point3:1> *True* The student lists the correct series of smaller development cycles within RAD.\n<Point4:1> *True* The student correctly points out the focus on quick delivery of functional software to clients.\n<Point5:2> *True* The student accurately describes the incorporation of user feedback for refinement in RAD. \n\n\n"
    }
}