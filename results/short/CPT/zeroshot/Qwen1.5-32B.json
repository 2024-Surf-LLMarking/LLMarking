{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n1.\tRequirement Gathering: Collecting requirements from stakeholders.\n2.\tSystem Analysis and Design: Analyzing requirements and creating a blueprint.\n3.\tImplementation: Writing the code.\n4.\tTesting: Checking the system for defects.\n5.\tDeployment: Releasing the software to users.\n6.\tMaintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> True (The student correctly identifies the phase of Requirement Gathering and its purpose.)\n<Point2:1> True (The description of Requirement Gathering in the student's answer is accurate.)\n<Point3:1> True (The student correctly names the phase of System Analysis and Design.)\n<Point4:1> True (The student provides a suitable explanation for System Analysis and Design.)\n<Point5:1> True (The student accurately labels the phase of Implementation (Coding).)\n<Point6:1> True (The description of Implementation in the student's answer is sufficient.)\n<Point7:1> True (The student correctly names the phase of Testing.)\n<Point8:1> True (The explanation of Testing in the student's answer is adequate.)\n<Point9:1> True (The student accurately identifies the phase of Deployment.)\n<Point10:1> True (The description of Deployment in the student's answer is correct.)\n<Point11:1> True (The student correctly names the phase of Maintenance.)\n<Point12:1> True (The explanation of Maintenance in the student's answer is appropriate.)"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n1.\tRequirement Gathering: Understanding what the software needs to do by talking to stakeholders.\n2.\tSystem Analysis and Design: Creating a detailed plan and design for the software.\n3.\tImplementation (Coding): Developing the software based on the design.\n4.\tTesting: Ensuring the software works correctly by finding and fixing bugs.\n5.\tDeployment: Making the software available to the users.\n6.\tMaintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (Understanding what the software needs to do by talking to stakeholders, correctly describes requirement gathering)\n<Point2:1> *True* (Correctly implies collecting requirements from stakeholders, aligns with requirement gathering)\n<Point3:1> *True* (Creating a detailed plan and design for the software, accurately represents system analysis and design)\n<Point4:1> *True* (Analysing requirements and planning system, corresponds to system analysis and design)\n<Point5:1> *True* (Developing the software based on the design, matches implementation phase)\n<Point6:1> *True* (Writing code as per design documents, corresponds to implementation phase)\n<Point7:1> *True* (Ensuring the software works correctly, aligns with testing phase)\n<Point8:1> *True* (Finding and fixing bugs, corresponds to testing phase)\n<Point9:1> *True* (Making the software available to the users, matches deployment phase)\n<Point10:1> *True* (Releasing software to production, corresponds to deployment phase)\n<Point11:1> *True* (Keeping the software running smoothly and making improvements, accurately describes maintenance)\n<Point12:1> *True* (Ongoing support and enhancements after deployment, aligns with maintenance phase)"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are:\n1.\tRequirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed.\n2.\tSystem Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created.\n3.\tImplementation (Coding): This phase involves writing the code according to the design documents.\n4.\tTesting: The system is verified against the requirements to identify and fix defects.\n5.\tDeployment: The software is released to the production environment for users.\n6.\tMaintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified the phase as Requirement Gathering and explained its purpose.)\n<Point2:1> *True* (The student accurately described the process of collecting requirements from stakeholders.)\n<Point3:1> *True* (The student named the phase as System Analysis and Design and conveyed its purpose.)\n<Point4:1> *True* (The student correctly explained the analysis of requirements and creation of a system blueprint.)\n<Point5:1> *True* (The student recognized the phase as Implementation (Coding) and its role in writing code.)\n<Point6:1> *True* (The student accurately described the process of coding according to design documents.)\n<Point7:1> *True* (The student identified the phase as Testing and its purpose of verifying against requirements.)\n<Point8:1> *True* (The student correctly explained the testing process, including defect identification and fixing.)\n<Point9:1> *True* (The student named the phase as Deployment and conveyed its purpose of releasing to production.)\n<Point10:1> *True* (The student accurately described the release of software to the production environment for users.)\n<Point11:1> *True* (The student recognized the phase as Maintenance and its role in ongoing support and enhancement.)\n<Point12:1> *True* (The student correctly explained the maintenance phase occurring after deployment.)"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are:\n1.\tRequirement Gathering: This is where the requirements from stakeholders are collected.\n2.\tSystem Analysis and Design: The collected requirements are then analyzed and a system blueprint is created.\n3.\tImplementation (Coding): The next step is to write the code based on the design.\n4.\tTesting: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects.\n5.\tDeployment: The software is then deployed to the production environment.\n6.\tMaintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the phase of Requirement Gathering and its purpose.)\n<Point2:1> *True* (The student accurately describes the process of collecting requirements from stakeholders.)\n<Point3:1> *True* (The student recognizes the phase of System Analysis and Design.)\n<Point4:1> *True* (The student understands the analysis of requirements and creation of a system blueprint.)\n<Point5:1> *True* (The student correctly names the phase of Implementation (Coding) and its purpose.)\n<Point6:1> *True* (The student accurately explains the process of writing code according to design documents.)\n<Point7:1> *True* (The student identifies the phase of Testing and its role in verifying the system.)\n<Point8:1> *True* (The student correctly states the goal of testing: to check against requirements and fix defects.)\n<Point9:1> *True* (The student recognizes the phase of Deployment and its purpose.)\n<Point10:1> *True* (The student accurately describes releasing the software to the production environment.)\n<Point11:1> *True* (The student identifies the phase of Maintenance.)\n<Point12:1> *True* (The student correctly explains the ongoing support and enhancement aspect of maintenance.)"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases:\n1.\tRequirement Gathering: Collecting the requirements from stakeholders.\n2.\tSystem Analysis and Design: Analyzing the requirements and designing the system.\n3.\tImplementation (Coding): Writing the code based on the design.\n4.\tTesting: Checking the system for defects.\n5.\tDeployment: Releasing the software for use.\n6.\tMaintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (Requirement Gathering is correctly identified as a phase)\n<Point2:1> *True* (Explanation of Requirement Gathering is accurate)\n<Point3:1> *True* (System Analysis and Design is correctly identified as a phase)\n<Point4:1> *True* (Explanation of System Analysis and Design is accurate)\n<Point5:1> *True* (Implementation (Coding) is correctly identified as a phase)\n<Point6:1> *True* (Explanation of Implementation (Coding) is accurate)\n<Point7:1> *True* (Testing is correctly identified as a phase)\n<Point8:1> *True* (Explanation of Testing is accurate)\n<Point9:1> *True* (Deployment is correctly identified as a phase)\n<Point10:1> *True* (Explanation of Deployment is accurate)\n<Point11:1> *True* (Maintenance is correctly identified as a phase)\n<Point12:1> *True* (Explanation of Maintenance is accurate)"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes:\n1.\tRequirement Gathering: Gathering what is needed for the project.\n2.\tSystem Analysis and Design: Creating a design based on the requirements.\n3.\tImplementation (Coding): Coding the project.\n4.\tTesting: Testing the code.\n5.\tDeployment: Making the software available.\n6.\tMaintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> True (The student correctly identifies the phase as \"Requirement Gathering\" and explains it as gathering what is needed for the project.)\n\n<Point2:1> True (The student's explanation aligns with the reference answer, stating that requirements are collected from stakeholders to understand the development needs.)\n\n<Point3:1> True (The student names the phase accurately as \"System Analysis and Design\" and describes it as creating a design based on the requirements.)\n\n<Point4:1> True (The student's explanation, though brief, captures the essence of analyzing requirements and designing the system.)\n\n<Point5:1> True (The student correctly labels the phase as \"Implementation (Coding)\" and mentions coding the project.)\n\n<Point6:1> True (The student's answer corresponds with the reference answer, acknowledging the act of writing code according to design documents.)\n\n<Point7:1> True (The student names the phase accurately as \"Testing\" and describes it as testing the code.)\n\n<Point8:1> True (The student's explanation, although concise, aligns with the reference answer, which involves verifying the system against requirements and fixing defects.)\n\n<Point9:1> True (The student correctly identifies the phase as \"Deployment\" and explains it as making the software available.)\n\n<Point10:1> True (The student's answer corresponds with the reference answer, which states releasing the software to the production environment for users.)\n\n<Point11:1> True (The student names the phase accurately as \"Maintenance\" and describes it as ongoing updates and fixes.)\n\n<Point12:1> True (The student's explanation aligns with the reference answer, emphasizing the continuous support and enhancement of the software after deployment.)"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are:\n1.\tRequirement Gathering: Understanding what the stakeholders need.\n2.\tSystem Analysis and Design: Planning how the system will be built.\n3.\tImplementation (Coding): Writing the actual code.\n4.\tTesting: Making sure the software works as expected.\n5.\tDeployment: Launching the software for users.\n6.\tMaintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (Understanding what the stakeholders need aligns with collecting requirements from stakeholders.)\n\n<Point2:1> *True* (aligns with requirement gathering)\n\n<Point3:1> *True* (Planning how the system will be built aligns with system analysis and design.)\n\n<Point4:1> *True* (aligns with system analysis and design)\n\n<Point5:1> *True* (Writing the actual code aligns with implementation (coding).)\n\n<Point6:1> *True* (aligns with implementation (coding))\n\n<Point7:1> *True* (Making sure the software works as expected aligns with testing.)\n\n<Point8:1> *True* (aligns with testing)\n\n<Point9:1> *True* (Launching the software for users aligns with deployment.)\n\n<Point10:1> *True* (aligns with deployment)\n\n<Point11:1> *True* (Keeping the software updated and fixing issues aligns with maintenance.)\n\n<Point12:1> *True* (aligns with maintenance)"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of:\n1.\tRequirement Gathering: Collecting the requirements needed for the project.\n2.\tSystem Analysis and Design: Designing the system based on the requirements.\n3.\tImplementation (Coding): Writing the code for the project.\n4.\tTesting: Checking the software for any issues.\n5.\tDeployment: Releasing the final product to the users.\n6.\tMaintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (Requirement Gathering is correctly identified as a phase)\n<Point2:1> *True* (Explanation of Requirement Gathering is accurate)\n<Point3:1> *True* (System Analysis and Design is correctly identified as a phase)\n<Point4:1> *True* (Explanation of System Analysis and Design is accurate)\n<Point5:1> *True* (Implementation (Coding) is correctly identified as a phase)\n<Point6:1> *True* (Explanation of Implementation (Coding) is accurate)\n<Point7:1> *True* (Testing is correctly identified as a phase)\n<Point8:1> *True* (Explanation of Testing is accurate)\n<Point9:1> *True* (Deployment is correctly identified as a phase)\n<Point10:1> *True* (Explanation of Deployment is accurate)\n<Point11:1> *True* (Maintenance is correctly identified as a phase)\n<Point12:1> *True* (Explanation of Maintenance is accurate)"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n1.\tRequirement Gathering: Collecting what needs to be developed from the stakeholders.\n2.\tSystem Analysis and Design: Analyzing these requirements and making a system design.\n3.\tImplementation (Coding): Writing the code according to the design.\n4.\tTesting: Verifying that the system works as intended and fixing any defects.\n5.\tDeployment: Making the software available to the users.\n6.\tMaintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (Requirement Gathering is correctly identified as a phase)\n<Point2:1> *True* (Explanation of Requirement Gathering is accurate)\n<Point3:1> *True* (System Analysis and Design is correctly identified as a phase)\n<Point4:1> *True* (Explanation of System Analysis and Design is accurate)\n<Point5:1> *True* (Implementation (Coding) is correctly identified as a phase)\n<Point6:1> *True* (Explanation of Implementation (Coding) is accurate)\n<Point7:1> *True* (Testing is correctly identified as a phase)\n<Point8:1> *True* (Explanation of Testing is accurate)\n<Point9:1> *True* (Deployment is correctly identified as a phase)\n<Point10:1> *True* (Explanation of Deployment is accurate)\n<Point11:1> *True* (Maintenance is correctly identified as a phase)\n<Point12:1> *True* (Explanation of Maintenance is accurate)"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes:\n1.\tRequirement Gathering: Understanding what the project needs.\n2.\tSystem Analysis and Design: Creating a detailed plan based on the requirements.\n3.\tImplementation (Coding): Writing the necessary code.\n4.\tTesting: Ensuring the system meets requirements and fixing any problems.\n5.\tDeployment: Making the software available to the end-users.\n6.\tMaintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (Requirement Gathering is correctly identified as a phase)\n<Point2:1> *True* (Explanation of Requirement Gathering is accurate)\n<Point3:1> *True* (System Analysis and Design is correctly identified as a phase)\n<Point4:1> *True* (Explanation of System Analysis and Design is accurate)\n<Point5:1> *True* (Implementation (Coding) is correctly identified as a phase)\n<Point6:1> *True* (Explanation of Implementation (Coding) is accurate)\n<Point7:1> *True* (Testing is correctly identified as a phase)\n<Point8:1> *True* (Explanation of Testing is accurate)\n<Point9:1> *True* (Deployment is correctly identified as a phase)\n<Point10:1> *True* (Explanation of Deployment is accurate)\n<Point11:1> *True* (Maintenance is correctly identified as a phase)\n<Point12:1> *True* (Explanation of Maintenance is accurate)"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly explains the linear and sequential nature of the Waterfall model.)\n<Point2:1> *True* (The student accurately describes the one-way flow of the Waterfall process.)\n<Point3:1> *True* (The student highlights the difficulty in implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student provides a clear explanation of the iterative and incremental nature of the Agile model.)\n<Point5:1> *True* (The student mentions the concept of iterations in the Agile method.)\n<Point6:1> *True* (The student notes the importance of collaboration, customer feedback, and adaptability in Agile.)\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile process.)"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n<Point2:1> *True* (The student understands that the Waterfall process moves in one direction without overlapping.)\n<Point3:1> *True* (The student recognizes the difficulty in making changes once a phase is finished in the Waterfall model.)\n<Point4:2> *True* (The student accurately explains Agile as an iterative and flexible approach.)\n<Point5:1> *True* (The student mentions development in small increments called iterations in Agile.)\n<Point6:1> *True* (The student notes the importance of continuous feedback and adaptability in Agile.)\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in Agile.)"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as linear and sequential.)\n\n<Point2:1> *True* (The student accurately explains the one-way flow of the Waterfall model.)\n\n<Point3:1> *True* (The student captures the difficulty in implementing changes in the Waterfall model.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental.)\n\n<Point5:1> *True* (The student correctly refers to development in small increments called iterations in Agile.)\n\n<Point6:1> *True* (The student conveys the idea of Agile's continuous feedback and adaptability.)\n\n<Point7:1> *True* (The student accurately states that changes can be made at any stage in Agile.)"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly explains the linear and sequential nature of the Waterfall model.)\n<Point2:1> *True* (The student accurately describes the one-directional flow of the Waterfall process.)\n<Point3:1> *True* (The student highlights the difficulty in making changes in the Waterfall model.)\n<Point4:2> *True* (The student provides a good explanation of the iterative and incremental nature of the Agile model.)\n<Point5:1> *True* (The student mentions the concept of iterations in the Agile method.)\n<Point6:1> *True* (The student notes the importance of continuous feedback and adaptability in Agile.)\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in Agile.)"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly explains Waterfall as a linear and sequential approach with each phase completed before the next.)\n\n<Point2:1> *True* (The student accurately describes the one-way flow of the Waterfall model.)\n\n<Point3:1> *True* (The student understands the difficulty in making changes once a phase is finished in the Waterfall model.)\n\n<Point4:2> *True* (The student correctly characterizes Agile as iterative and incremental, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student recognizes the concept of iterations in the Agile model.)\n\n<Point6:1> *True* (The student conveys the idea of continuous feedback and adaptability in Agile.)\n\n<Point7:1> *True* (The student accurately states that changes can be made at any stage in Agile.)"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly explains Waterfall as a linear and sequential approach with each phase completed before the next.)\n\n<Point2:1> *True* (The student accurately describes the one-way flow of the Waterfall model similar to a waterfall.)\n\n<Point3:1> *True* (The student captures the difficulty in making changes once a phase is completed in the Waterfall model.)\n\n<Point4:2> *True* (The student provides a good explanation of Agile as an iterative and flexible approach.)\n\n<Point5:1> *True* (The student mentions the iterative nature of Agile with development in small increments.)\n\n<Point6:1> *True* (The student highlights Agile's focus on collaboration, customer feedback, and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in Agile, accommodating evolving needs.)"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly explains Waterfall as a linear and sequential approach with each phase completed before the next.)\n\n<Point2:1> *True* (The student accurately describes the one-way flow of the Waterfall model similar to a waterfall.)\n\n<Point3:1> *True* (The student captures the difficulty in making changes once a phase is finished in the Waterfall model.)\n\n<Point4:2> *True* (The student provides a good explanation of Agile as an iterative and flexible approach.)\n\n<Point5:1> *True* (The student mentions the concept of iterations in Agile, although not using the exact term \"iterations.\")\n\n<Point6:1> *True* (The student conveys the idea of Agile's continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in Agile, showing its adaptability.)"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly explains the linear and sequential nature of the Waterfall model.)\n<Point2:1> *True* (The student accurately describes the one-way flow of the Waterfall process.)\n<Point3:1> *True* (The student understands the difficulty in implementing changes in the Waterfall model.)\n<Point4:2> *True* (The student correctly explains the iterative and incremental nature of the Agile model.)\n<Point5:1> *True* (The student mentions the concept of iterations in Agile development.)\n<Point6:1> *True* (The student highlights the continuous feedback and adaptability in Agile.)\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in Agile.)"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the Waterfall model as a linear and sequential approach where each phase must be completed before the next.)\n\n<Point2:1> *True* (The student accurately captures the one-way flow of the Waterfall model without phase overlap.)\n\n<Point3:1> *True* (The student understands the difficulty in making changes once a phase is completed in the Waterfall model.)\n\n<Point4:2> *True* (The student correctly explains Agile as an iterative and flexible approach.)\n\n<Point5:1> *True* (The student recognizes that Agile involves development in small increments called iterations.)\n\n<Point6:1> *True* (The student grasps the concept of continuous feedback and adaptability in Agile.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in Agile, accommodating evolving requirements.)"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly explains Waterfall as a linear and sequential approach with phases completing before the next.)\n\n<Point2:1> *True* (The student accurately describes the one-way flow of the Waterfall model.)\n\n<Point3:1> *True* (The student notes the difficulty in making changes once a phase is finished in the Waterfall model.)\n\n<Point4:2> *True* (The student accurately characterizes Agile as iterative and incremental, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student correctly mentions development in small increments called iterations in Agile.)\n\n<Point6:1> *True* (The student accurately states Agile's focus on continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student correctly explains that changes can be made at any stage in Agile.)"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes cohesion as measuring the relationship strength between data and methods.)\n\n<Point3:1>False (The student's answer does not specifically mention the unifying factor or purpose of the class, which is part of the reference answer.)\n\n<Point4:2>True (The explanation of high cohesion is correct, stating that elements are closely related and work together.)\n\n<Point5:2>True (The description of low cohesion is accurate, saying that elements are loosely related and without a clear purpose.)"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes the relationship strength between data and methods in a class as part of cohesion.)\n\n<Point3:1>True (The student refers to the unifying factor or purpose of a class, although the phrasing is slightly different from the reference answer.)\n\n<Point4:2>True (The explanation of high cohesion is accurate, stating that elements are closely related and work towards a common goal.)\n\n<Point5:2>True (The description of low cohesion is correct, mentioning loosely related elements and unclear purpose.)"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes how cohesion measures the relationship strength between data and methods.)\n\n<Point3:1>True (The student understands the unifying factor or purpose of a class as part of cohesion.)\n\n<Point4:2>True (The explanation of high cohesion is correct, stating that elements are closely related and work towards a common goal.)\n\n<Point5:2>True (The description of low cohesion is accurate, mentioning loosely related elements and a lack of a clear purpose.)"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes the relationship strength between data and methods in a class as part of cohesion.)\n\n<Point3:1>True (The student understands the unifying factor or purpose of a class as a measure of cohesion.)\n\n<Point4:2>True (The explanation of high cohesion as elements working towards a common goal is correct.)\n\n<Point5:2>True (The student correctly explains low cohesion as elements being loosely related and without a clear purpose.)"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2>True</Point1:2> (Cohesion is correctly defined as the bond strength between elements in a module.)\n\n<Point2:1>True</Point2:1> (The relationship strength between data and methods in a class is correctly identified as part of cohesion measurement.)\n\n<Point3:1>True</Point3:1> (The unifying factor or purpose of a class is mentioned as part of cohesion, although phrased slightly differently.)\n\n<Point4:2>True</Point4:2> (High cohesion's definition of closely related elements working towards a common goal is accurately described.)\n\n<Point5:2>True</Point5:2> (Low cohesion's definition of loosely related elements without a clear purpose is accurately explained.)"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes the relationship strength between data and methods in a class as part of cohesion.)\n\n<Point3:1>True (The student understands the unifying factor or purpose of a class as a aspect of cohesion.)\n\n<Point4:2>True (The student correctly explains the concept of high cohesion, stating that elements within a module are closely related and work towards a common goal.)\n\n<Point5:2>True (The student provides an accurate description of low cohesion, mentioning that elements are loosely related and lack a clear purpose.)"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes the relationship strength between data and methods in a class.)\n\n<Point3:1>True (The student refers to the unifying factor or purpose of a class, although the phrasing is slightly different from the reference answer.)\n\n<Point4:2>True (The explanation of high cohesion is correct, emphasizing the close relation and shared goal of module elements.)\n\n<Point5:2>True (The student provides an accurate definition of low cohesion, stating that elements are loosely related and without a clear purpose.)"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes the relationship strength between data and methods in a class.)\n\n<Point3:1>True (The student understands the unifying factor or purpose of a class as a measure of cohesion.)\n\n<Point4:2>True (The explanation of high cohesion is correct, stating that elements are closely related and work towards a common goal.)\n\n<Point5:2>True (The description of low cohesion is accurate, mentioning loosely related elements and unclear purpose.)"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2>True (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1>True (The student accurately describes the relationship strength between data and methods in a class.)\n\n<Point3:1>True (The student understands the unifying factor or purpose of a class as a measure of cohesion.)\n\n<Point4:2>True (The explanation of high cohesion is correct, stating that elements are closely related and work towards a common goal.)\n\n<Point5:2>True (The description of low cohesion is accurate, mentioning loosely related elements and unclear purpose.)"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (Cohesion is correctly defined as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The relationship strength between data and methods in a class is accurately mentioned.)\n\n<Point3:1> *True* (The unifying factor or purpose of a class is correctly linked to cohesion.)\n\n<Point4:2> *True* (High cohesion is well explained as elements being closely related and working towards a common goal.)\n\n<Point5:2> *True* (Low cohesion is accurately described as elements being loosely related and without a clear purpose.)"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student accurately describes internal milestones as standard systematic procedures.)\n\n<Point3:1> *True* (The student recognizes that milestones indicate the engineers are on the right path.)\n\n<Point4:2> *True* (The student understands milestones are used to assess the team's progress.)\n\n<Point5:1> *True* (The student includes identifying issues and risks as a purpose of milestones.)\n\n<Point6:1> *True* (The student mentions making necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student gives an example of a milestone related to completing a specific feature.)\n\n<Point8:1> *True* (The student includes testing and debugging the code as another milestone example.)\n\n<Point9:1> *True* (The student correctly refers to reaching a certain level of performance or functionality as a milestone.)"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (Internal milestones are measurable attributes of processes, the student correctly identifies this aspect)\n<Point2:1> *True* (Standard systematic procedures, the student understands the nature of milestones as systematic steps)\n<Point3:1> *True* (Indicate the right path, the student grasps the purpose of milestones for tracking progress)\n<Point4:2> *True* (Assess progress, the student mentions the assessment aspect of milestones)\n<Point5:1> *True* (Identify issues and risks, the student includes the problem-solving purpose)\n<Point6:1> *True* (Make adjustments, the student understands the need for changes based on milestones)\n<Point7:1> *True* (Completing a feature, the student gives an example of a milestone)\n<Point8:1> *True* (Testing and debugging, another correct example provided)\n<Point9:1> *True* (Performance or functionality, the student gives a third relevant example)"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student accurately describes internal milestones as standard procedures.)\n\n<Point3:1> *True* (The student understands that milestones indicate the team is on the right path.)\n\n<Point4:2> *True* (The student recognizes the role of milestones in assessing progress.)\n\n<Point5:1> *True* (The student acknowledges milestones' use in identifying issues and risks.)\n\n<Point6:1> *True* (The student understands milestones help make adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides an example of a milestone: completing a specific feature.)\n\n<Point8:1> *True* (The student includes another example: testing and debugging the code.)\n\n<Point9:1> *True* (The student gives a third example: reaching performance or functionality levels.)"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (Internal milestones are measurable and important attributes of processes. The student correctly identifies this aspect.)\n\n<Point2:1> *True* (Standard systematic procedures are mentioned, showing understanding of the organized nature of milestones.)\n\n<Point3:1> *True* (Indicating the right path is acknowledged, though not explicitly using the phrase \"on the right path.\")\n\n<Point4:2> *True* (Assessing the development team's progress is correctly stated.)\n\n<Point5:1> *True* (Identifying issues and risks is recognized as a purpose of milestones.)\n\n<Point6:1> *True* (Making necessary adjustments to the project plan is mentioned.)\n\n<Point7:1> *True* (Completing a specific feature is included as an example milestone.)\n\n<Point8:1> *True* (Testing and debugging the code is recognized as a milestone.)\n\n<Point9:1> *True* (Reaching a certain level of performance or functionality is also correctly identified as a milestone.)"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> True (The student correctly defines internal milestones as measurable attributes of processes.)\n<Point2:1> True (The student accurately states that milestones are standard procedures.)\n<Point3:1> True (The student understands that milestones indicate the project's progress.)\n<Point4:2> True (The student acknowledges the use of milestones for assessing team progress.)\n<Point5:1> True (The student recognizes milestones' role in identifying issues and risks.)\n<Point6:1> True (The student mentions making adjustments to the project plan using milestones.)\n<Point7:1> True (The student gives an example of a milestone related to completing a feature.)\n<Point8:1> False (The student combines testing and debugging into one milestone, while the reference answer separates them.)\n<Point9:1> True (The student includes reaching a performance goal as an example of a milestone.)"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> True (The student correctly defines internal milestones as measurable attributes of processes.)\n\n<Point2:1> True (The student acknowledges that internal milestones are standard systematic procedures.)\n\n<Point3:1> True (The student understands that milestones indicate the team is on the right path.)\n\n<Point4:2> True (The student mentions that milestones assess the team's progress.)\n\n<Point5:1> True (The student identifies that milestones help identify issues.)\n\n<Point6:1> True (The student notes that milestones facilitate adjustments to the project plan.)\n\n<Point7:1> True (The student gives an example of completing a specific feature as a milestone.)\n\n<Point8:1> False (The student does not specifically mention testing and debugging the code as a milestone, but it's implied in the context of completing a feature.)\n\n<Point9:1> True (The student includes reaching a certain level of performance or functionality as a milestone.)"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (Internal milestones are measurable and important attributes of processes. The student correctly identifies this aspect.)\n\n<Point2:1> *True* (Standard systematic procedures. The student's answer captures the essence of this point.)\n\n<Point3:1> *True* (Indicate that engineers are on the right path. The student's answer aligns with the reference.)\n\n<Point4:2> *True* (Assess the development team's progress. The student mentions evaluating progress, which is equivalent.)\n\n<Point5:1> *True* (Identify issues and risks. The student correctly includes this purpose of milestones.)\n\n<Point6:1> *True* (Make necessary adjustments to the project plan. The student accurately states this function.)\n\n<Point7:1> *True* (Completing a specific feature. The student gives an example that corresponds to this milestone type.)\n\n<Point8:1> *True* (Testing and debugging the code. The student provides another relevant example.)\n\n<Point9:1> *False* (Reaching a certain level of performance or functionality. The student's answer does not explicitly mention this type of milestone, although it could be inferred from \"achieving a performance level\".)"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student accurately mentions that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student understands that milestones indicate the project's progress.)\n\n<Point4:2> *True* (The student acknowledges the use of milestones to assess the team's progress.)\n\n<Point5:1> *True* (The student correctly states that milestones help identify issues and risks.)\n\n<Point6:1> *True* (The student recognizes the role of milestones in adjusting the project plan.)\n\n<Point7:1> *True* (The student includes completing a specific feature as an example of a milestone.)\n\n<Point8:1> *False* (The student combines testing and debugging into one point, while the reference answer separates them.)\n\n<Point9:1> *True* (The student mentions reaching a performance or functionality level as a milestone.)"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student acknowledges that internal milestones are systematic procedures, though the wording is slightly different from the reference answer.)\n\n<Point3:1> *True* (The student understands that milestones show the engineers are on the right path, capturing the essence of the reference point.)\n\n<Point4:2> *True* (The student mentions assessing the development team's progress, aligning with the reference answer.)\n\n<Point5:1> *True* (The student correctly identifies that milestones help identify issues and risks.)\n\n<Point6:1> *True* (The student notes the use of milestones for making necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student gives an example of completing a specific feature as an internal milestone.)\n\n<Point8:1> *True* (The student includes testing and debugging the code as another milestone, consistent with the reference.)\n\n<Point9:1> *True* (The student refers to reaching a certain level of performance or functionality, echoing the reference answer.)\n\nSince all points in the reference answer are covered, the feedback is as above."
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2>True (The student correctly defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1>True (The student acknowledges that internal milestones are standard systematic procedures.)\n\n<Point3:1>True (The student understands that milestones indicate engineers are on the right track.)\n\n<Point4:2>True (The student mentions that milestones assess the development team's progress.)\n\n<Point5:1>True (The student includes identifying issues and risks as a function of milestones.)\n\n<Point6:1>True (The student correctly states that milestones allow for making necessary adjustments to the project plan.)\n\n<Point7:1>True (The student provides an example of completing a specific feature as a milestone.)\n\n<Point8:1>True (The student includes testing and debugging the code as another milestone example.)\n\n<Point9:1>True (The student recognizes reaching a certain level of performance or functionality as a milestone.)"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> True (The student correctly identifies the RAD model as iterative and prototyping.)\n\n<Point2:1> True (The student accurately explains the emphasis on less planning and more development.)\n\n<Point3:1> True (The student mentions the series of smaller development cycles, including the correct phases.)\n\n<Point4:1> True (The student correctly states the goal of quick delivery of functional software.)\n\n<Point5:2> True (The student acknowledges the use of feedback from end-users and stakeholders for improvement.)"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> True (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> True (The student accurately explains the emphasis on less planning and more development.)\n\n<Point3:1> True (The student mentions the series of smaller development cycles, including the correct phases.)\n\n<Point4:1> True (The student correctly states the focus on quick delivery of functional software.)\n\n<Point5:2> True (The student accurately notes the reliance on feedback from end-users and stakeholders for improvement.)"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> *True* (The student accurately explains the emphasis on less planning and more development in the RAD model.)\n\n<Point3:1> *True* (The student correctly describes the series of smaller development cycles within the RAD model.)\n\n<Point4:1> *True* (The student accurately states the goal of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student correctly mentions the importance of feedback from end-users and stakeholders in the RAD model.)"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> True (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> True (The student accurately explains the emphasis on less planning and more development in the RAD model.)\n\n<Point3:1> True (The student correctly describes the series of smaller development cycles present in the RAD model.)\n\n<Point4:1> True (The student accurately states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> True (The student correctly mentions the incorporation of feedback from end-users and stakeholders in the RAD model.)"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> True (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> True (The student accurately explains the emphasis on less planning and more development in the RAD model.)\n\n<Point3:1> True (The student mentions the series of smaller development cycles, including the correct phases.)\n\n<Point4:1> True (The student correctly states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> True (The student acknowledges the incorporation of feedback from end-users and stakeholders to improve the software.)"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> *True* (The student accurately explains the emphasis on less planning and more development in the RAD model.)\n\n<Point3:1> *True* (The student correctly describes the series of smaller development cycles within the RAD model.)\n\n<Point4:1> *True* (The student accurately states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student correctly mentions the importance of feedback from end-users and stakeholders in refining the software.)"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> True (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> True (The student accurately explains the focus on less planning and more development in the RAD model.)\n\n<Point3:1> True (The student mentions the series of smaller development cycles, including the correct phases.)\n\n<Point4:1> True (The student correctly states the goal of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> True (The student acknowledges the incorporation of feedback from end-users and stakeholders to refine the software.)"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> True (The student correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> True (The student accurately explains the emphasis on less time on planning and more on development.)\n\n<Point3:1> True (The student mentions the series of smaller development cycles, including the correct phases.)\n\n<Point4:1> True (The student correctly states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> True (The student accurately notes the incorporation of feedback from end-users and stakeholders to refine the software.)"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> True (The student correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> True (The student accurately explains that the RAD model prioritizes less time on planning and more on software development.)\n\n<Point3:1> True (The student mentions the series of smaller development cycles, including planning, design, construction, and testing, which aligns with the reference answer.)\n\n<Point4:1> True (The student correctly states the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> True (The student acknowledges the importance of feedback from end-users and stakeholders for refining and improving the software, though they do not explicitly say \"continuous improvement\" as in the reference answer.)"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> True (The student correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> True (The student accurately explains the emphasis on less planning and more development in the RAD model.)\n\n<Point3:1> True (The student correctly mentions the series of smaller development cycles including planning, design, construction, and testing.)\n\n<Point4:1> True (The student accurately states the goal of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> True (The student correctly notes the use of feedback from end-users and stakeholders to refine and improve the software.)"
    }
}