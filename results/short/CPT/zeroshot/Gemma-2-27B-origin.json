{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n- Requirement Gathering: Collecting requirements from stakeholders.\n- System Analysis and Design: Analyzing requirements and creating a blueprint.\n- Implementation: Writing the code.\n- Testing: Checking the system for defects.\n- Deployment: Releasing the software to users.\n- Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True*  The student correctly identifies \"Requirement Gathering\" as a phase of SDLC.\n\n<Point2:1> *True* The student provides an accurate description of Requirement Gathering.\n\n<Point3:1> *True* The student correctly identifies \"System Analysis and Design\" as a phase of SDLC. \n\n<Point4:1> *True*  The student accurately describes System Analysis and Design.\n\n<Point5:1> *True* The student correctly identifies \"Implementation\" as a phase of SDLC.\n\n<Point6:1> *True* The student provides a concise description of Implementation.\n\n<Point7:1> *True* The student correctly identifies \"Testing\" as a phase of SDLC. \n\n<Point8:1> *True* The student's description of Testing is accurate.\n\n<Point9:1> *True* The student correctly identifies \"Deployment\" as a phase of SDLC.\n\n<Point10:1> *True* The student provides an adequate description of Deployment. \n \n<Point11:1> *True* The student correctly identifies \"Maintenance\" as a phase of SDLC.\n\n<Point12:1> *True*  The student accurately describes Maintenance. \n\n\n"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n- Requirement Gathering: Understanding what the software needs to do by talking to stakeholders.\n- System Analysis and Design: Creating a detailed plan and design for the software.\n- Implementation (Coding): Developing the software based on the design.\n- Testing: Ensuring the software works correctly by finding and fixing bugs.\n- Deployment: Making the software available to the users.\n- Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies \"Requirement Gathering\" as a key phase of SDLC.\n\n<Point2:1> *True*  The student provides a good explanation for requirement gathering, mentioning stakeholder involvement.\n\n<Point3:1> *True* The student accurately lists \"System Analysis and Design.\"\n\n\n<Point4:1> *True* The student's description aligns with the concept of creating a blueprint.\n<Point5:1> *True* The student correctly includes \"Implementation (Coding).\"\n\n<Point6:1> *True*  The student captures the essence of writing code based on design documents.\n\n\n<Point7:1> *True* The student identifies \"Testing\" as an essential phase. \n<Point8:1> *True* The student explains testing's purpose, including defect identification and resolution.\n\n<Point9:1> *True* The student correctly lists \"Deployment\".\n\n<Point10:1> *True*  The student's description of releasing software to users aligns with the deployment concept.\n\n<Point11:1> *True* The student includes \"Maintenance\" as a crucial phase.\n\n<Point12:1> *True* The student accurately describes maintenance as ongoing support and improvement. \n"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are:\n- Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed.\n- System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created.\n- Implementation (Coding): This phase involves writing the code according to the design documents.\n- Testing: The system is verified against the requirements to identify and fix defects.\n- Deployment: The software is released to the production environment for users.\n- Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies Requirement Gathering as a key phase. \n\n<Point2:1> *True* The student accurately describes Requirement Gathering's purpose - collecting stakeholder needs.\n\n<Point3:1> *True* System Analysis and Design is correctly identified as a key phase.\n\n<Point4:1> *True* The description of System Analysis and Design as analyzing requirements and creating a blueprint is accurate.\n\n<Point5:1> *True* Implementation (Coding) is correctly listed as a key phase.\n\n<Point6:1> *True* The student accurately describes the purpose of Implementation \u2013 writing code based on design documents.\n\n<Point7:1> *True* Testing is correctly identified. \n\n<Point8:1> *True*  The student's description of testing aligns with verifying against requirements and fixing defects.\n\n\n<Point9:1> *True* Deployment is correctly listed as a key phase.\n\n<Point10:1> *True* The student provides a correct explanation of deployment \u2013 releasing the software to users.\n\n<Point11:1> *True* Maintenance is identified correctly as a key phase.\n\n<Point12:1> *True* The description of maintenance, including ongoing support and enhancements, is accurate.\n\n\n\n"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are:\n- Requirement Gathering: This is where the requirements from stakeholders are collected.\n- System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created.\n- Implementation (Coding): The next step is to write the code based on the design.\n- Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects.\n- Deployment: The software is then deployed to the production environment.\n- Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase.)\n\n<Point2:1> *True* (The student accurately described Requirement Gathering as collecting requirements from stakeholders.) \n\n<Point3:1> *True* ( The student correctly identified System Analysis and Design as a phase.)\n\n\n<Point4:1> *True* (The student accurately described System Analysis and Design as analyzing requirements and creating a blueprint.)\n\n<Point5:1> *True* ( The student correctly identified Implementation (Coding) as a phase.)\n \n<Point6:1> *True* (The student accurately described Implementation as writing code based on the design.)\n \n<Point7:1> *True* (The student correctly identified Testing as a phase.)\n\n<Point8:1> *True* (The student accurately described Testing as verifying the system and fixing defects.)\n\n<Point9:1> *True* (The student correctly identified Deployment as a phase.)\n\n<Point10:1> *True* (The student accurately described Deployment as releasing software to the production environment.)\n\n<Point11:1> *True* ( The student correctly identified Maintenance as a phase.)\n \n<Point12:1> *True* (The student accurately described Maintenance as ongoing support and enhancements.) \n"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases:\n- Requirement Gathering: Collecting the requirements from stakeholders.\n- System Analysis and Design: Analyzing the requirements and designing the system.\n- Implementation (Coding): Writing the code based on the design.\n- Testing: Checking the system for defects.\n- Deployment: Releasing the software for use.\n- Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies Requirement Gathering as a key phase. \n\n<Point2:1> *True* The student accurately describes Requirement Gathering as collecting requirements from stakeholders.\n\n<Point3:1> *True* The student correctly identifies System Analysis and Design as a key phase.\n\n<Point4:1> *True* The student accurately describes System Analysis and Design as analyzing requirements and designing the system.\n\n<Point5:1> *True* The student correctly identifies Implementation (Coding) as a key phase.\n\n<Point6:1> *True* The student accurately describes Implementation (Coding) as writing code based on the design. \n\n<Point7:1> *True*  The student correctly identifies Testing as a key phase.\n\n<Point8:1> *True* The student accurately describes Testing as checking the system for defects.\n\n<Point9:1> *True* The student correctly identifies Deployment as a key phase.\n\n<Point10:1> *True* The student accurately describes Deployment as releasing the software for use.\n\n<Point11:1> *True*  The student correctly identifies Maintenance as a key phase.\n\n<Point12:1> *True* The student accurately describes Maintenance as supporting and enhancing the software after deployment. \n"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes:\n- Requirement Gathering: Gathering what is needed for the project.\n- System Analysis and Design: Creating a design based on the requirements.\n- Implementation (Coding): Coding the project.\n- Testing: Testing the code.\n- Deployment: Making the software available.\n- Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True*  The student correctly identified Requirement Gathering as a key phase of SDLC. \n<Point2:1> *True* The student's description of Requirement Gathering aligns with the reference answer's definition.\n<Point3:1> *True* The student correctly identified System Analysis and Design as a key phase of SDLC.\n\n<Point4:1> *True*  The student's description of System Analysis and Design aligns with the reference answer's definition. \n\n<Point5:1> *True* The student correctly identified Implementation (Coding) as a key phase of SDLC.\n<Point6:1> *True* The student's description of Implementation (Coding) aligns with the reference answer's definition.\n<Point7:1> *True* The student correctly identified Testing as a key phase of SDLC.\n\n<Point8:1> *True*  The student's description of Testing aligns with the reference answer's definition. \n\n<Point9:1> *True* The student correctly identified Deployment as a key phase of SDLC.\n\n<Point10:1> *True* The student's description of Deployment aligns with the reference answer's definition.\n<Point11:1> *True*  The student correctly identified Maintenance as a key phase of SDLC.\n\n\n<Point12:1> *True* The student's description of Maintenance aligns with the reference answer's definition. \n"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are:\n- Requirement Gathering: Understanding what the stakeholders need.\n- System Analysis and Design: Planning how the system will be built.\n- Implementation (Coding): Writing the actual code.\n- Testing: Making sure the software works as expected.\n- Deployment: Launching the software for users.\n- Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True*  The student correctly identified \"Requirement Gathering\" as a key phase of SDLC. \n<Point2:1> *True* The student provided an accurate description of Requirement Gathering.\n<Point3:1> *True* The student correctly identified \"System Analysis and Design\" as a key phase of SDLC.\n<Point4:1> *True* The student provided a suitable description of System Analysis and Design.\n<Point5:1> *True* The student correctly identified \"Implementation (Coding)\" as a key phase of SDLC. \n<Point6:1> *True* The student provided an appropriate description of Implementation.\n<Point7:1> *True* The student correctly identified \"Testing\" as a key phase of SDLC.\n<Point8:1> *True*  The student gave a correct description of Testing.\n<Point9:1> *True* The student correctly identified \"Deployment\" as a key phase of SDLC.\n<Point10:1> *True* The student provided an accurate description of Deployment.\n<Point11:1> *True* The student correctly identified \"Maintenance\" as a key phase of SDLC. \n<Point12:1> *True* The student gave a good description of Maintenance. \n\n\n"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of:\n- Requirement Gathering: Collecting the requirements needed for the project.\n- System Analysis and Design: Designing the system based on the requirements.\n- Implementation (Coding): Writing the code for the project.\n- Testing: Checking the software for any issues.\n- Deployment: Releasing the final product to the users.\n- Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* The student correctly identified Requirement Gathering as a key phase of SDLC.\n<Point2:1> *True* The student correctly described Requirement Gathering as collecting the requirements needed for the project.\n\n<Point3:1> *True*  The student correctly identified System Analysis and Design as a key phase of SDLC.\n<Point4:1> *True* The student correctly described System Analysis and Design as designing the system based on the requirements.\n\n<Point5:1> *True* The student correctly identified Implementation (Coding) as a key phase of SDLC. \n<Point6:1> *True* The student correctly described Implementation (Coding) as writing code for the project.\n\n<Point7:1> *True* The student correctly identified Testing as a key phase of SDLC.\n\n<Point8:1> *True* The student correctly described Testing as checking the software for any issues.\n\n\n<Point9:1> *True*  The student correctly identified Deployment as a key phase of SDLC.\n<Point10:1> *True* The student correctly described Deployment as releasing the final product to users.\n\n<Point11:1> *True* The student correctly identified Maintenance as a key phase of SDLC.\n<Point12:1> *True* The student correctly described Maintenance as providing support and updates after release. \n\n\n"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n- Requirement Gathering: Collecting what needs to be developed from the stakeholders.\n- System Analysis and Design: Analyzing these requirements and making a system design.\n- Implementation (Coding): Writing the code according to the design.\n- Testing: Verifying that the system works as intended and fixing any defects.\n- Deployment: Making the software available to the users.\n- Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies \"Requirement Gathering\" as a key phase. \n<Point2:1> *True* The student accurately describes Requirement Gathering as collecting needs from stakeholders.\n<Point3:1> *True*  The student correctly identifies \"System Analysis and Design\" as a key phase.\n<Point4:1> *True* The student provides a suitable description of System Analysis and Design, focusing on analyzing requirements and creating a system design. \n\n<Point5:1> *True* The student correctly identifies \"Implementation (Coding)\" as a key phase.\n\n<Point6:1> *True* The student accurately describes Implementation as writing code based on the design.\n<Point7:1> *True* The student correctly identifies \"Testing\" as a key phase.\n\n<Point8:1> *True* The student provides a good description of Testing, mentioning verifying functionality and fixing defects.\n<Point9:1> *True* The student correctly identifies \"Deployment\" as a key phase.\n<Point10:1> *True*  The student accurately describes Deployment as making the software accessible to users.\n\n<Point11:1> *True* The student correctly identifies \"Maintenance\" as a key phase.\n<Point12:1> *True* The student provides a concise and accurate description of Maintenance, mentioning ongoing support and updates.\n\n\n\n"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     - <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     - <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     - <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     - <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     - <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     - <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes:\n- Requirement Gathering: Understanding what the project needs.\n- System Analysis and Design: Creating a detailed plan based on the requirements.\n- Implementation (Coding): Writing the necessary code.\n- Testing: Ensuring the system meets requirements and fixing any problems.\n- Deployment: Making the software available to the end-users.\n- Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True*  The student correctly identifies Requirement Gathering as a key phase of SDLC. \n<Point2:1> *True* The student's explanation aligns with the concept of collecting requirements from stakeholders.\n\n<Point3:1> *True* The student accurately names System Analysis and Design as a phase.\n<Point4:1> *True*  The student's description reflects the essence of analyzing requirements and creating a blueprint.\n\n<Point5:1> *True* The student correctly includes Implementation (Coding) as a phase. \n\n<Point6:1> *True* The student's explanation aligns with writing code based on design documents.\n<Point7:1> *True* The student identifies Testing as a key SDLC phase.\n<Point8:1> *True* The student's description covers the core concept of verifying and fixing defects.\n\n<Point9:1> *True*  The student correctly lists Deployment as a phase. \n\n<Point10:1> *True* The student's explanation captures the idea of making software available to users.\n\n<Point11:1> *True* The student includes Maintenance as a final stage.\n<Point12:1> *True*  The student accurately describes Maintenance as ongoing support and improvement. \n\n\n\n"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear and sequential approach with phases completed one after another. \n<Point2:1> *True*  The student accurately portrays the unidirectional flow of the Waterfall model, comparing it to a waterfall.\n\n<Point3:1> *True* The student correctly identifies the difficulty in implementing changes in the Waterfall model due to its linear nature and the need to revisit previous phases.\n<Point4:2> *True* The student effectively explains that the Agile model is iterative and incremental, focusing on flexibility and collaboration. \n\n<Point5:1> *True* The student correctly mentions the use of small increments called iterations in the Agile methodology.\n\n<Point6:1> *True* The student highlights the continuous feedback loop from stakeholders and adaptability to changing requirements as key features of Agile.\n<Point7:1> *True*  The student accurately states that changes can be incorporated at any stage in the Agile process due to its flexibility. \n\n\n"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as a linear and sequential approach where phases are completed one after another.\n\n<Point2:1> *True*  The student uses the analogy of a straight path to convey the unidirectional flow of the Waterfall model, highlighting its lack of iteration or going back.\n\n<Point3:1>*False* The student doesn't explicitly mention the difficulty of implementing changes in the Waterfall model once a phase is completed.\n\n\n <Point4:2> *True* The student correctly describes Agile as a flexible and iterative approach. \n\n<Point5:1> *True*  The student mentions small, repeated cycles of development which aligns with the concept of iterations in Agile.\n\n<Point6:1> *True*  The student highlights ongoing feedback as a key aspect of Agile, enabling adaptation to changes.\n\n<Point7:1> *True* The student accurately states that Agile allows for changes at any stage due to its iterative nature. \n"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student accurately describes the Waterfall model as a linear and sequential approach where phases must be completed in order. \n<Point2:1> *True* The student uses the waterfall analogy effectively to illustrate the unidirectional flow of the Waterfall model.\n<Point3:1> *True* The student correctly points out the difficulty of making changes in the Waterfall model once a phase is finished.\n<Point4:2> *True* The student accurately describes the Agile model as iterative, incremental, flexible, and focused on collaboration and customer feedback. \n<Point5:1> *True* The student mentions iterations as small cycles of development in the Agile model.\n<Point6:1> *True* The student highlights the importance of continuous feedback and adaptability to changing requirements in Agile.\n<Point7:1> *True* The student correctly states that Agile allows for changes at any stage of development. \n\n\n"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student accurately describes the linear and sequential nature of the Waterfall model.\n<Point2:1> *True* The student correctly explains that the Waterfall model progresses in a single direction without overlapping phases. \n<Point3:1> *True* The student highlights the difficulty of implementing changes in the Waterfall model due to its rigid structure.\n\n<Point4:2> *True* The student accurately describes the iterative and incremental approach of the Agile model, emphasizing flexibility and collaboration.\n<Point5:1> *True*  The student correctly mentions that Agile development is done in small increments called iterations.\n\n<Point6:1> *True* The student highlights the importance of continuous feedback from stakeholders in the Agile process.\n\n<Point7:1>*True* The student correctly states that changes can be made at any stage in Agile development, accommodating evolving requirements. \n"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear and sequential process where phases are completed one after another. \n\n<Point2:1> *True*  The student accurately states that the Waterfall model proceeds in a single direction without overlapping or iteration.\n\n<Point3:1>*True* The student points out the difficulty of making changes in the Waterfall model once a phase is finished.\n\n <Point4:2> *True* The student correctly identifies Agile's iterative and incremental nature, focusing on flexibility and customer feedback.\n\n<Point5:1> *True*  The student accurately describes Agile's use of iterations, which are small, manageable chunks of development.\n\n<Point6:1>*True* The student highlights the importance of continuous feedback from stakeholders in Agile. \n\n\n<Point7:1> *True* The student correctly mentions Agile's ability to accommodate changes throughout the development process. \n"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies the linear and sequential nature of the Waterfall model where phases must be completed in order. \n<Point2:1> *True*  The student accurately describes the one-directional flow of the Waterfall process without overlapping or iteration.\n<Point3:1> *True* The student highlights the difficulty of implementing changes in the Waterfall model once a phase is completed.\n<Point4:2> *True* The student correctly identifies the iterative and incremental approach of the Agile model, emphasizing its focus on flexibility. \n<Point5:1> *True* The student mentions that development in Agile happens in small iterations, allowing for regular reassessment.\n<Point6:1> *True* The student accurately points out Agile's emphasis on continuous feedback from stakeholders and adaptability to changing requirements.\n<Point7:1> *True* The student correctly states that changes can be made at any stage in Agile development. \n\n\n\n"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True*  The student correctly describes the Waterfall model as a linear and sequential approach where each phase must be completed before moving to the next.\n\n<Point2:1> *True* The student accurately portrays the unidirectional flow of the Waterfall model, comparing it to a waterfall.\n\n<Point3:1> *True* The student correctly identifies the difficulty in incorporating changes once a phase is finished in the Waterfall model.\n\n\n<Point4:2> *True*  The student provides an accurate description of Agile as an iterative and incremental approach emphasizing flexibility, collaboration, and customer feedback. \n\n<Point5:1> *True* The student accurately explains that Agile development occurs in small increments called iterations.\n\n<Point6:1> *True* The student highlights the key aspect of continuous feedback from stakeholders and adaptability to changing requirements in Agile.\n\n<Point7:1> *True*  The student correctly states that Agile allows for changes throughout the development process, accommodating evolving needs. \n"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True*  The student correctly describes the Waterfall model as a linear process where each phase needs completion before moving on.\n<Point2:1> *True* The student accurately states that the Waterfall model is unidirectional, resembling a waterfall's flow without overlapping phases or iterations.\n\n<Point3:1> *True* The student mentions the difficulty of incorporating changes in the Waterfall model once a phase is finished. \n\n<Point4:2> *True*  The student correctly identifies Agile as an iterative and incremental approach that values flexibility, collaboration, and customer input.\n<Point5:1> *True* The student accurately explains that Agile development happens in small iterations.\n<Point6:1> *True* The student highlights the key aspects of Agile: continuous feedback from stakeholders and adaptability to changing needs.\n\n<Point7:1>*True*  The student correctly mentions Agile's flexibility for incorporating changes at any stage of development. \n\n\n\n"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* The student correctly describes the Waterfall model as a linear, sequential process where each phase must be completed before moving to the next. \n\n<Point2:1> *True*  The student accurately portrays the one-directional flow of the Waterfall model, comparing it to a waterfall.\n\n<Point3:1> *True* The student correctly identifies the difficulty of implementing changes in the Waterfall model once a phase is finished.\n\n<Point4:2> *True* The student aptly describes the Agile model as an iterative and incremental approach emphasizing flexibility and customer feedback.\n\n<Point5:1> *True* The student accurately mentions that Agile development occurs in small increments called iterations.\n\n\n<Point6:1> *True* The student correctly highlights the continuous feedback mechanism within Agile and its ability to adapt to changing requirements. \n\n<Point7:1> *True* The student rightly points out the ease of incorporating changes at any stage in the Agile process due to its iterative nature.  \n"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True*  The student correctly describes the Waterfall model as a linear and sequential approach where each phase must be completed before moving on. \n<Point2:1> *True* The student accurately portrays the one-directional flow of the Waterfall model, comparing it to a waterfall.\n<Point3:1> *True* The student highlights the difficulty in implementing changes within the Waterfall model due to its linear structure. \n<Point4:2> *True*  The student correctly identifies Agile as an iterative and incremental approach emphasizing flexibility and collaboration. \n<Point5:1> *True* The student accurately explains that development in Agile happens in small, manageable increments known as iterations.\n\n<Point6:1> *True* The student correctly points out Agile's emphasis on continuous feedback from stakeholders throughout the development process.\n<Point7:1> *True* The student rightly states that Agile allows for changes to be made at any stage, accommodating evolving requirements. \n\n\n\n"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies that cohesion relates to the bond strength between elements in a module. \n<Point2:1> *True*  The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.\n<Point3:1> *True* The student touches upon the concept of a unifying purpose or factor for the class, though they don't explicitly state it. \n<Point4:2> *True* The student provides a good explanation of high cohesion as elements working together towards a common goal.\n<Point5:2> *True* The student correctly explains low cohesion as elements lacking close relationships and a clear purpose.  \n\n\n"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes cohesion as indicating the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student correctly mentions that cohesion measures the relationship strength between data and methods within a class.)\n\n<Point3:1> *True* (The student identifies the unifying factor or purpose of the class as a component of cohesion.)\n\n<Point4:2> *True* (The student provides a clear explanation of high cohesion, emphasizing the close relationship and common goal of elements in a module.)\n\n<Point5:2> *True* ( The student accurately describes low cohesion as indicating loosely related elements without a clear unified purpose.) \n"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n<Point2:1> *True* ( The student mentions that cohesion measures the relationship strength between data and methods within a class.)\n\n<Point3:1> *True* (The student touches on the unifying factor or purpose of the class, stating elements work towards a specific goal.)\n\n\n<Point4:2> *True* ( The student accurately explains high cohesion as elements being closely related and working towards a common goal.)\n<Point5:2> *True* ( The student correctly describes low cohesion as elements being loosely related and lacking a unified purpose.) \n"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of bond strength between elements in a module.\n<Point2:1> *True*  The student accurately states that cohesion measures the relationship strength between data and methods within a class.\n<Point3:1> *True* The student mentions the unifying factor or purpose as an aspect of cohesion, which is correct. \n<Point4:2> *True* The student correctly explains high cohesion as elements being closely related and working towards a common goal.\n<Point5:2> *True* The student accurately describes low cohesion as loosely related elements lacking a clear unified purpose. \n\n\n"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of bond strength between elements in a module.\n<Point2:1> *True*  The student mentions that cohesion measures the relationship strength between data and methods within a class. \n<Point3:1> *True* The student highlights that cohesion considers the unifying factor or purpose of the class.\n<Point4:2> *True* The student accurately describes high cohesion as elements working together towards a common goal.\n<Point5:2> *True* The student correctly explains low cohesion as elements being loosely related with no clear purpose. \n\n\n"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as the bond strength between elements in a module.\n<Point2:1> *True* The student accurately mentions that cohesion measures the relationship strength between data and methods within a class.\n<Point3:1> *True* The student identifies the unifying factor or purpose of a class as a component of cohesion. \n<Point4:2> *True*  The student correctly explains that high cohesion implies elements working towards a common goal.\n<Point5:2> *True* The student accurately describes low cohesion as implying loosely related elements without a clear purpose. \n\n\n"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as bond strength between elements in a module.\n\n<Point2:1> *True* The student accurately mentions the relationship between data and methods of a class. \n\n<Point3:1> *True* The student identifies the unifying factor or purpose the class serves as a part of cohesion.\n\n<Point4:2> *True* The student correctly explains high cohesion with elements related to a common goal. \n\n<Point5:2> *True* The student accurately describes low cohesion as loosely connected elements without a clear purpose. \n"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as a measure of bond strength between elements in a module. \n\n<Point2:1> *True*  The student accurately states that cohesion measures the relationship strength between data and methods within a class.\n\n<Point3:1> *True* The student mentions the unifying factor or purpose served by the class, which is another key aspect of cohesion.\n\n<Point4:2> *True* The student provides a good explanation of high cohesion, emphasizing the close relationship and shared goal of elements.\n\n<Point5:2> *True* The student correctly explains low cohesion as a lack of clear relationships and purpose among elements. \n"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* The student correctly defines cohesion as the bond strength between elements in a module.\n\n<Point2:1> *True* The student accurately states that cohesion measures the relationship strength between data and methods within a class. \n\n<Point3:1> *True* The student mentions the unifying factor or purpose served by the class, which is a key aspect of cohesion.\n\n<Point4:2> *True*  The student correctly explains that high cohesion signifies elements working together towards a common goal.\n\n<Point5:2> *True* The student accurately describes low cohesion as implying loosely related elements without a clear purpose. \n\n\n"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* The student accurately describes cohesion as the bond strength between elements in a module. \n<Point2:1> *True*  The student correctly mentions that cohesion measures the relationship strength between data and methods within a class.\n<Point3:1> *True* The student highlights the unifying factor or purpose as an aspect of cohesion. \n<Point4:2> *True* The student provides a clear explanation of high cohesion, emphasizing the close relationship and shared goal of elements in a module.\n<Point5:2> *True*  The student accurately describes low cohesion, stating that elements are loosely related and lack a unified purpose. \n\n\n"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable and important attributes of processes. \n\n<Point2:1> *True* The student accurately describes internal milestones as standard systematic procedures.\n\n<Point3:1> *True*  The student correctly states that internal milestones indicate the engineers are on the right path.\n\n<Point4:2> *True* The student identifies assessing development team progress as a use of internal milestones.\n\n<Point5:1> *True* The student mentions identifying issues and risks as a purpose of internal milestones.\n\n<Point6:1> *True*  The student correctly states that internal milestones can be used to make necessary adjustments to the project plan.\n\n<Point7:1> *True* The student provides an example of completing a specific feature as a type of internal milestone.\n \n<Point8:1> *True* The student includes testing and debugging code as another example of an internal milestone.\n\n<Point9:1> *True* The student mentions reaching a certain performance or functionality level as a possible internal milestone.  \n\n\n\n"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies that internal milestones are related to measuring important aspects of processes. \n\n<Point2:1> *False*  The student doesn't explicitly mention that internal milestones are standard systematic procedures.\n\n<Point3:1> *True* The student states that internal milestones \"help see if the engineers are on track\", which aligns with this point.\n\n<Point4:2> *True*  The student mentions that milestones \"help assess progress\". \n\n<Point5:1> *True* The student mentions that milestones \"help identify problems\".\n\n<Point6:1> *True* The student states that milestones allow for making \"changes to the project plan if needed,\" demonstrating an understanding of adjustments.\n\n<Point7:1> *True* The student lists \"finishing a feature\" as an example of a milestone. \n\n<Point8:1> *True* The student includes \"testing and debugging\" as another example.\n\n<Point9:1> *True* The student mentions \"achieving a specific performance level\" as an example.\n\n\n\n"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True*  The student correctly identifies internal milestones as measurable attributes related to processes.\n\n<Point2:1> *True* The student accurately describes internal milestones as standard procedures.\n\n<Point3:1> *True* The student rightly states that internal milestones indicate the engineers are on the right track.\n\n<Point4:2> *True* The student correctly mentions that milestones are used to assess development progress.\n\n<Point5:1> *True*  The student accurately includes identifying issues and risks as a purpose of internal milestones.\n\n<Point6:1> *True* The student correctly notes that internal milestones help make necessary adjustments to the project plan.\n \n<Point7:1> *True* The student provides an example of completing a specific feature as an internal milestone.\n\n<Point8:1> *True* The student gives testing and debugging code as another valid example of an internal milestone.\n\n<Point9:1> *True* The student correctly includes reaching a certain level of performance or functionality as an example of an internal milestone. \n"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True*  The student correctly states that internal milestones are measurable indicators of progress. \n<Point2:1> *True* The student accurately describes them as standard procedures.\n<Point3:1> *True*  The student mentions that milestones show the engineers are on the right track.\n<Point4:2> *True* The student correctly identifies assessing team progress as a use of milestones. \n\n<Point5:1> *True* The student includes identifying issues and risks as a function of milestones.\n\n<Point6:1> *True*  The student correctly states that milestones help make adjustments to the project plan.\n\n<Point7:1> *True* The student provides completing a feature as an example of a milestone.\n<Point8:1> *True* The student lists testing and debugging as a milestone example.\n<Point9:1> *True* The student correctly mentions achieving performance or functionality levels as milestones. \n\n\n\n"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly identifies internal milestones as measurable steps showing progress in the development process. \n\n<Point2:1> *True*  The student accurately describes internal milestones as standard procedures.\n\n<Point3:1> *True* The student correctly states that internal milestones indicate the project is on track.\n\n<Point4:2> *True* The student mentions that milestones are useful for assessing team progress.\n\n<Point5:1> *True* The student includes identifying problems as a use of milestones.\n\n<Point6:1> *True* The student correctly states that milestones help make necessary changes to the project plan.\n\n\n<Point7:1> *True* The student provides an example of completing a feature as a type of milestone.\n\n<Point8:1> *True*  The student includes debugging as an example related to milestones.\n\n<Point9:1> *True* The student correctly mentions reaching a performance goal as another type of milestone. \n"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines internal milestones as measurable checkpoints indicating progress.)\n\n<Point2:1> *True* (The student describes them as systematic procedures.) \n\n<Point3:1> *True* (The student mentions they ensure the team is on the right path.)\n\n<Point4:2> *True* (The student states they help assess progress.)\n\n<Point5:1> *True* (The student includes identifying issues as a function of milestones.) \n\n<Point6:1> *True* ( The student notes milestones enable adjusting the project plan.)\n\n<Point7:1> *True*  ( Completing a feature is provided as an example.)\n\n<Point8:1> *True* (Testing code is given as an example)\n \n<Point9:1> *True* (Reaching a performance level is mentioned as an example.) \n\n\n\n\n"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True*  The student correctly identifies internal milestones as measurable attributes of processes. \n<Point2:1> *True* The student accurately describes them as standard systematic procedures.\n<Point3:1> *True* They also correctly state that these milestones indicate the team is progressing in the right direction.\n<Point4:2> *True*  The student mentions assessing development progress, aligning with this point.\n<Point5:1> *True* Identifying issues and risks as a use of milestones is also correct.\n<Point6:1> *True* The student includes making adjustments to the project plan, which fulfills this point.\n<Point7:1> *True* Completing a specific feature is provided as an example, satisfying this point.\n<Point8:1> *True*  Debugging code is also mentioned as an example, fulfilling this point.\n<Point9:1> *True* Reaching a performance level is listed as another example, aligning with this point. \n\n\n"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True*  The student correctly identifies internal milestones as measurable indicators of progress within software development processes.\n<Point2:1> *True* The student accurately describes internal milestones as standardized procedures. \n<Point3:1> *True* The student rightly points out that internal milestones indicate the project is progressing in the intended direction.\n<Point4:2> *True* The student correctly mentions assessing the development team's progress as a use of internal milestones.\n<Point5:1> *True*  The student accurately states that identifying issues and risks is a function of internal milestones.\n<Point6:1> *True* The student correctly highlights adjusting the project plan based on insights from internal milestones.\n<Point7:1> *True* The student provides completing a specific feature as an example of an internal milestone, which aligns with the reference answer.\n<Point8:1> *True*  The student accurately mentions testing and debugging as examples of internal milestones.\n\n<Point9:1> *True* The student correctly includes achieving performance goals as an example of an internal milestone. \n\n\n\n"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student correctly identifies internal milestones as measurable attributes of processes.) \n\n<Point2:1> *True* ( The student accurately describes internal milestones as standard systematic procedures.)\n\n<Point3:1> *True* (The student understands that internal milestones indicate the engineers are on the right track.)\n\n<Point4:2> *True* (The student mentions that internal milestones are used to assess the development team's progress.)\n\n\n<Point5:1> *True* (The student includes identifying issues and risks as a use of internal milestones.)\n\n<Point6:1> *True*  (The student correctly states that internal milestones help make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student provides completing a specific feature as an example of an internal milestone.)\n\n<Point8:1> *True* ( The student lists testing and debugging the code as another example of an internal milestone.) \n\n<Point9:1> *True*  (The student correctly includes reaching a certain performance level as an example of an internal milestone.) \n\n\n"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* The student correctly defines internal milestones as measurable attributes of processes.\n<Point2:1> *True*  The student accurately describes internal milestones as standard systematic procedures.\n<Point3:1> *True* The student explains that internal milestones show engineers are progressing correctly. \n<Point4:2> *True* The student mentions that milestones help assess the development team's progress.\n\n<Point5:1> *True* The student states that milestones can identify issues and risks.\n\n<Point6:1> *True*  The student explains that milestones allow for necessary adjustments to be made to the project plan.\n<Point7:1> *True* The student provides completing a specific feature as an example of a milestone.\n\n<Point8:1> *True* The student includes testing and debugging code as another example of a milestone.\n\n<Point9:1> *True* The student gives achieving a specific performance level as a further example of a milestone. \n\n\n\n"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately describes RAD's emphasis on less time in planning and more focus on development.\n<Point3:1> *True* The student lists the typical development cycles within RAD, including planning, design, construction, and testing.\n<Point4:1> *True* The student correctly states that RAD aims for quick delivery of functional software to clients and stakeholders.\n<Point5:2> *True* The student mentions the incorporation of feedback from end-users and stakeholders in the RAD model. \n\n\n"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach)\n<Point2:1> *True* (The student accurately describes RAD's emphasis on reduced planning time and increased development focus)\n<Point3:1> *True* (The student lists the key development cycles within the RAD model) \n<Point4:1> *True* ( The student highlights the goal of quick delivery of functional software in RAD)\n<Point5:2> *True*(The student correctly mentions user feedback as a crucial aspect of the RAD model's iterative refinement process.) \n\n\n\n"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True*  The student accurately explains that RAD prioritizes less time on planning and more on development.\n<Point3:1> *True* The student lists the correct series of smaller development cycles within the RAD model.\n<Point4:1> *True* The student highlights the focus on quick delivery of functional software to clients and stakeholders.\n<Point5:2> *True*  The student correctly mentions the importance of incorporating user and stakeholder feedback in the RAD process. \n\n\n"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly states that RAD is an iterative and prototyping approach.)\n<Point2:1> *True* (The student accurately describes RAD's emphasis on less planning and more development.)\n<Point3:1> *True* (The student lists the correct series of smaller development cycles involved in RAD.)\n<Point4:1> *True* (The student correctly identifies the focus on quick delivery of functional software.)\n<Point5:2> *True* (The student mentions the incorporation of feedback from users and stakeholders.) \n\n\n"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach. \n\n<Point2:1> *True*  The student accurately states that RAD emphasizes less time on planning and more on development.\n\n<Point3:1> *True* The student lists the series of smaller development cycles (planning, design, construction, testing) present in RAD.\n\n<Point4:1> *True* The student correctly identifies quick delivery of functional software to clients and stakeholders as a focus of RAD. \n\n<Point5:2> *True*  The student accurately mentions that RAD incorporates feedback from end-users for refinement.  \n"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student accurately describes RAD as an iterative and prototyping approach.\n\n<Point2:1> *True* The student correctly points out that RAD emphasizes less time on planning and more on development.\n\n<Point3:1> *True* The student lists the key development cycles involved in RAD.\n\n<Point4:1> *True*  The student highlights the focus on quick delivery of functional software to clients and stakeholders. \n\n<Point5:2> *True* The student mentions the importance of incorporating feedback from end-users for refinement. \n"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* The student correctly identifies RAD as an iterative and prototyping approach.\n<Point2:1> *True*  The student accurately states that RAD prioritizes development over lengthy planning.\n<Point3:1> *True* The student lists the key development cycles within the RAD model.\n<Point4:1> *True* The student highlights the focus on quick delivery of functional software to clients and stakeholders.\n<Point5:2> *True*  The student mentions the incorporation of user feedback for improvement in the RAD model. \n\n\n"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student accurately describes RAD as an iterative and prototyping approach.) \n<Point2:1> *True* ( The student correctly states that RAD prioritizes development over lengthy planning phases.)\n<Point3:1> *True* (The student lists the key stages within a RAD cycle: planning, design, construction, and testing.)\n<Point4:1> *True* (The student highlights the goal of rapid delivery of functional software in RAD.)\n<Point5:2> *True* ( The student mentions the importance of user and stakeholder feedback for refinement.) \n\n\n\n"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True*  The student correctly identifies RAD as an iterative and prototyping approach. \n<Point2:1> *True* The student accurately states that RAD emphasizes less time on planning and more on development.\n<Point3:1> *True*  The student lists the correct series of development cycles involved in RAD.\n<Point4:1> *True* The student correctly highlights the focus on quick delivery of functional software to clients and stakeholders.\n<Point5:2> *True* The student accurately mentions the importance of end-user feedback for continuous improvement. \n\n\n"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies RAD as an iterative and prototyping approach.) \n<Point2:1> *True* (The student accurately explains that RAD emphasizes less time on planning and more on development.)\n<Point3:1> *True* (The student lists the key phases of a RAD cycle.)\n<Point4:1> *True* (The student correctly states the goal of quick delivery to clients and stakeholders.) \n<Point5:2> *True* (The student mentions the importance of end-user feedback in RAD.) \n\n\n"
    }
}