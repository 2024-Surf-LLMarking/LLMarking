{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting requirements from stakeholders. System Analysis and Design: Analyzing requirements and creating a blueprint. Implementation: Writing the code. Testing: Checking the system for defects. Deployment: Releasing the software to users. Maintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase of SDLC as Requirement Gathering.)\n\n<Point2:1> *True* (The student's answer provides a concise description of the requirement gathering phase, which aligns with the reference answer.)\n\n<Point3:1> *True* (System Analysis and Design is correctly identified as a key phase of SDLC by the student.)\n\n<Point4:1> *True* (The student's description of analyzing requirements and creating a blueprint is accurate and aligns with the reference answer.)\n\n<Point5:1> *True* (Implementation, or coding, is correctly identified as a phase in SDLC by the student.)\n\n<Point6:1> *True* (The student's answer mentions writing code, which is the essence of the Implementation phase.)\n\n<Point7:1> *True* (Testing is acknowledged as a key phase by the student, which is a crucial step in SDLC.)\n\n<Point8:1> *True* (The student's description of testing focuses on identifying defects, which is a key aspect of this phase.)\n\n<Point9:1> *True* (Deployment is correctly identified as one of the phases in SDLC by the student.)\n\n<Point10:1> *True* (The student's answer mentions releasing the software to users, which is the primary goal of the Deployment phase.)\n\n<Point11:1> *True* (Maintenance is acknowledged as a key phase of SDLC by the student, which is an important aspect of software development.)\n\n<Point12:1> *True* (The student's description of providing support and enhancements post-deployment aligns with the reference answer.)"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Understanding what the software needs to do by talking to stakeholders. System Analysis and Design: Creating a detailed plan and design for the software. Implementation (Coding): Developing the software based on the design. Testing: Ensuring the software works correctly by finding and fixing bugs. Deployment: Making the software available to the users. Maintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies \"Requirement Gathering\" as the first phase and mentions communicating with stakeholders to understand requirements.)\n\n<Point2:1> *True* (The student's answer provides a clear understanding of the requirement gathering phase by mentioning talking to stakeholders.)\n\n<Point3:1> *True* (The student's answer correctly identifies \"System Analysis and Design\" as a phase and mentions creating a plan and design.)\n\n<Point4:1> *True* (The student mentions creating a detailed plan and design, which aligns with the reference answer's \"blueprint of the system.\")\n\n<Point5:1> *True* (The student's answer correctly identifies \"Implementation (Coding)\" as a phase and mentions developing the software based on the design.)\n\n<Point6:1> *True* (The student's answer mentions writing code, which is in line with the reference answer's \"Writing the code as per the design documents.\")\n\n<Point7:1> *True* (The student's answer correctly identifies \"Testing\" as a phase and mentions finding and fixing bugs to ensure correct functionality.)\n\n<Point8:1> *True* (The student's answer mentions verifying the software against requirements, which is a key aspect of the testing phase.)\n\n<Point9:1> *True* (The student's answer correctly identifies \"Deployment\" as a phase and mentions making the software available to users.)\n\n<Point10:1> *True* (The student's answer mentions releasing the software to the production environment, which is the essence of the deployment phase.)\n\n<Point11:1> *True* (The student's answer correctly identifies \"Maintenance\" as the final phase and mentions providing ongoing support and improvements.)\n\n<Point12:1> *True* (The student's answer mentions enhancing the software post-deployment, which is a key aspect of the maintenance phase.)"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are: Requirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed. System Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created. Implementation (Coding): This phase involves writing the code according to the design documents. Testing: The system is verified against the requirements to identify and fix defects. Deployment: The software is released to the production environment for users. Maintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase of SDLC as Requirement Gathering.)\n\n<Point2:1> *True* (The student's answer provides an accurate description of the requirement gathering process, aligning with the reference answer.)\n\n<Point3:1> *True* (The student correctly identifies System Analysis and Design as the next phase in SDLC.)\n\n<Point4:1> *True* (The student's description of analyzing requirements and creating a system blueprint matches the reference answer.)\n\n<Point5:1> *True* (Implementation or Coding is accurately identified as a key phase by the student.)\n\n<Point6:1> *True* (The student's answer aligns with the reference, describing the implementation phase as writing code per design.)\n\n<Point7:1> *True* (Testing is correctly mentioned by the student as a key phase of SDLC.)\n\n<Point8:1> *True* (The student accurately describes the testing phase, verifying the system against requirements to fix defects.)\n\n<Point9:1> *True* (Deployment is recognized as a key phase, and the student's description matches the reference.)\n\n<Point10:1> *True* (The student correctly explains that deployment involves releasing software to production for users.)\n\n<Point11:1> *True* (Maintenance is identified as the final key phase by the student, matching the reference.)\n\n<Point12:1> *True* (The student's description of the maintenance phase, including ongoing support and enhancements, is accurate.)"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are: Requirement Gathering: This is where the requirements from stakeholders are collected. System Analysis and Design: The collected requirements are then analyzed and a system blueprint is created. Implementation (Coding): The next step is to write the code based on the design. Testing: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects. Deployment: The software is then deployed to the production environment. Maintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase of SDLC as Requirement Gathering.)\n\n<Point2:1> *True* (The student's answer provides an accurate description of the requirement gathering process, aligning with the reference answer.)\n\n<Point3:1> *True* (System Analysis and Design is correctly identified as a key phase of SDLC by the student.)\n\n<Point4:1> *True* (The student accurately describes the activities performed during System Analysis and Design, demonstrating a clear understanding of this phase.)\n\n<Point5:1> *True* (Implementation, or Coding, is rightly pointed out as one of the SDLC phases by the student.)\n\n<Point6:1> *True* (The student's description of the implementation phase matches the reference answer, showing a good grasp of the concept.)\n\n<Point7:1> *True* (Testing is acknowledged as a crucial phase in SDLC by the student.)\n\n<Point8:1> *True* (The student's explanation of the testing phase is on point and aligns with the reference answer.)\n\n<Point9:1> *True* (Deployment is correctly identified as one of the key phases in SDLC.)\n\n<Point10:1> *True* (The student's answer regarding the deployment phase is precise and matches the reference answer.)\n\n<Point11:1> *True* (Maintenance is rightly mentioned as the final phase of SDLC by the student.)\n\n<Point12:1> *True* (The student's description of the maintenance phase, including ongoing support and enhancements, is accurate and in line with the reference answer.)"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases: Requirement Gathering: Collecting the requirements from stakeholders. System Analysis and Design: Analyzing the requirements and designing the system. Implementation (Coding): Writing the code based on the design. Testing: Checking the system for defects. Deployment: Releasing the software for use. Maintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase of SDLC as Requirement Gathering.)\n\n<Point2:1> *True* (The student's answer provides an accurate description of the requirement gathering phase, which aligns with the reference answer.)\n\n<Point3:1> *True* (System Analysis and Design is correctly identified as a key phase of SDLC by the student.)\n\n<Point4:1> *True* (The student's description of analyzing requirements and designing the system matches the reference answer.)\n\n<Point5:1> *True* (Implementation or Coding is acknowledged as a key phase by the student.)\n\n<Point6:1> *True* (The student accurately describes the implementation phase as writing code based on the design.)\n\n<Point7:1> *True* (Testing is rightly mentioned as one of the key phases of SDLC.)\n\n<Point8:1> *True* (The student's answer aligns with the reference, describing the testing phase as checking for defects.)\n\n<Point9:1> *True* (Deployment is correctly identified and described by the student.)\n\n<Point10:1> *True* (The student's answer matches the reference, stating that deployment involves releasing the software for use.)\n\n<Point11:1> *True* (Maintenance is acknowledged as a key phase, and the student's description is accurate.)\n\n<Point12:1> *True* (The student correctly explains the maintenance phase, which involves supporting and enhancing the software post-deployment.)"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes: Requirement Gathering: Gathering what is needed for the project. System Analysis and Design: Creating a design based on the requirements. Implementation (Coding): Coding the project. Testing: Testing the code. Deployment: Making the software available. Maintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase as \"Requirement Gathering.\")\n\n<Point2:1> *True* (The student's answer provides a concise description of the requirement-gathering phase, capturing the essence of understanding stakeholder needs.)\n\n<Point3:1> *True* (The student correctly identified the second phase as \"System Analysis and Design.\")\n\n<Point4:1> *True* (The student's answer accurately describes the analysis and design phase, focusing on creating a design based on the gathered requirements.)\n\n<Point5:1> *True* (The student correctly identified the third phase as \"Implementation (Coding).\")\n\n<Point6:1> *True* (The student's answer concisely describes the implementation phase, emphasizing the coding aspect.)\n\n<Point7:1> *True* (The student correctly identified the fourth phase as \"Testing.\")\n\n<Point8:1> *True* (The student's answer provides a clear description of the testing phase, aligning with the reference answer's intention to identify and fix defects.)\n\n<Point9:1> *True* (The student correctly identified the fifth phase as \"Deployment.\")\n\n<Point10:1> *True* (The student's answer accurately describes the deployment phase, making the software available to users.)\n\n<Point11:1> *True* (The student correctly identified the sixth phase as \"Maintenance.\")\n\n<Point12:1> *True* (The student's answer effectively summarizes the maintenance phase, highlighting the ongoing updates and fixes aspect.)"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are: Requirement Gathering: Understanding what the stakeholders need. System Analysis and Design: Planning how the system will be built. Implementation (Coding): Writing the actual code. Testing: Making sure the software works as expected. Deployment: Launching the software for users. Maintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase as \"Requirement Gathering\".)\n\n<Point2:1> *True* (The student's answer aligns with the reference, explaining that this phase involves understanding stakeholder needs.)\n\n<Point3:1> *True* (The student correctly identifies the next phase as \"System Analysis and Design\".)\n\n<Point4:1> *True* (The student's answer accurately describes the purpose of this phase, which is to plan and create a blueprint for the system.)\n\n<Point5:1> *True* (The student has correctly identified the implementation or coding phase.)\n\n<Point6:1> *True* (The student's answer mentions writing the actual code, which aligns with the reference.)\n\n<Point7:1> *True* (The student correctly identifies the testing phase.)\n\n<Point8:1> *True* (The student's answer explains that this phase ensures the software works as expected, verifying its functionality.)\n\n<Point9:1> *True* (The student has correctly identified the deployment phase.)\n\n<Point10:1> *True* (The student's answer mentions launching the software for users, which is the key aspect of the deployment phase.)\n\n<Point11:1> *True* (The student correctly identifies the final phase as \"Maintenance\".)\n\n<Point12:1> *True* (The student's answer describes the ongoing support and updates that are part of the maintenance phase, aligning with the reference.)"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of: Requirement Gathering: Collecting the requirements needed for the project. System Analysis and Design: Designing the system based on the requirements. Implementation (Coding): Writing the code for the project. Testing: Checking the software for any issues. Deployment: Releasing the final product to the users. Maintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer includes \"Requirement Gathering\" as one of the key phases, which aligns with the reference answer.)\n\n<Point2:1> *True* (Student mentions \"collecting requirements,\" which is the essence of this point in the reference answer.)\n\n<Point3:1> *True* (The student's answer includes \"System Analysis and Design\" as a phase and mentions designing the system based on requirements, which is consistent with the reference answer.)\n\n<Point4:1> *True* (Student's mention of \"designing the system based on requirements\" covers the essence of this point.)\n\n<Point5:1> *True* (The student's answer includes \"Implementation (Coding)\" as one of the key phases.)\n\n<Point6:1> *True* (Student mentions \"writing the code,\" which is the main task in this phase according to the reference answer.)\n\n<Point7:1> *True* (The student's answer includes \"Testing\" as a phase and mentions checking the software for issues, which is consistent with the reference answer.)\n\n<Point8:1> *True* (Student's mention of \"checking the software for any issues\" aligns with the verification and defect identification aspect of this point.)\n\n<Point9:1> *True* (The student's answer includes \"Deployment\" as a phase and releasing the final product to the users, which is in line with the reference answer.)\n\n<Point10:1> *True* (Student mentions \"releasing the final product to the users,\" which is the key aspect of this point.)\n\n<Point11:1> *True* (The student's answer includes \"Maintenance\" as a phase and providing support and updates, which is consistent with the ongoing support and enhancement mentioned in the reference answer.)\n\n<Point12:1> *True* (Student's mention of \"providing support and updates after release\" covers the key tasks of this phase.)"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are: Requirement Gathering: Collecting what needs to be developed from the stakeholders. System Analysis and Design: Analyzing these requirements and making a system design. Implementation (Coding): Writing the code according to the design. Testing: Verifying that the system works as intended and fixing any defects. Deployment: Making the software available to the users. Maintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student has correctly identified the first phase of SDLC as Requirement Gathering.)\n\n<Point2:1> *True* (The student's answer accurately describes the process of collecting requirements from stakeholders.)\n\n<Point3:1> *True* (System Analysis and Design is mentioned as the next phase by the student, which is correct.)\n\n<Point4:1> *True* (The student's description of analyzing requirements and creating a system design aligns with the reference answer.)\n\n<Point5:1> *True* (Implementation or Coding is correctly identified as one of the key phases by the student.)\n\n<Point6:1> *True* (The student accurately describes the process of writing code according to the design documents.)\n\n<Point7:1> *True* (Testing is mentioned as a phase in the student's answer, which is correct.)\n\n<Point8:1> *True* (The student's description of verifying the system and fixing defects aligns with the reference answer.)\n\n<Point9:1> *True* (Deployment is correctly identified as one of the key phases by the student.)\n\n<Point10:1> *True* (The student accurately describes the process of releasing the software to users.)\n\n<Point11:1> *True* (Maintenance is mentioned as the final phase in the student's answer, which is correct.)\n\n<Point12:1> *True* (The student's description of providing ongoing support and updates aligns with the reference answer.)"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are: <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes: Requirement Gathering: Understanding what the project needs. System Analysis and Design: Creating a detailed plan based on the requirements. Implementation (Coding): Writing the necessary code. Testing: Ensuring the system meets requirements and fixing any problems. Deployment: Making the software available to the end-users. Maintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student's answer includes \"Requirement Gathering\" as one of the key phases, which aligns with the reference answer.)\n\n<Point2:1> *True* (Student mentions understanding project needs, which is consistent with collecting requirements from stakeholders.)\n\n<Point3:1> *True* (System Analysis and Design is mentioned by the student, satisfying this point.)\n\n<Point4:1> *True* (The student's answer mentions creating a detailed plan based on the requirements, which aligns with analyzing and designing the system.)\n\n<Point5:1> *True* (Implementation, or coding, is correctly identified by the student as one of the key phases.)\n\n<Point6:1> *True* (Writing the necessary code is a correct interpretation of the reference answer's \"Writing the code as per the design documents.\")\n\n<Point7:1> *True* (Testing is included in the student's response, matching the reference answer.)\n\n<Point8:1> *True* (The student mentions ensuring the system meets requirements and fixing problems, which is consistent with verifying and identifying defects.)\n\n<Point9:1> *True* (Deployment is correctly identified, and the student's mention of making the software available to end-users aligns with releasing it to the production environment.)\n\n<Point11:1> *True* (Maintenance is included in the student's answer, and continuous improvement and updates fall under the scope of ongoing support and enhancement.)\n\nAll points are covered and correctly interpreted in the student's response, resulting in a full mark for this question."
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the linear and sequential nature of the Waterfall model, where phases are completed one after the other without overlapping.)\n\n<Point2:1> *True* (The student accurately explains that the Waterfall model flows in one direction, and once a phase is completed, moving to the next without the ability to easily go back and make changes.)\n\n<Point3:1> *True* (The student mentions the difficulty in implementing changes in the Waterfall model, requiring a revisit to previous phases, which aligns with the reference answer.)\n\n<Point4:2> *True* (The student provides a concise description of the Agile model, highlighting its iterative and incremental nature, and its focus on flexibility and collaboration.)\n\n<Point5:1> *True* (The student's answer includes the key aspect of development occurring in small, manageable increments or iterations, allowing for regular reassessment.)\n\n<Point6:1> *True* (The student correctly mentions the continuous feedback from stakeholders and the adaptability to changing requirements, which are key characteristics of the Agile model.)\n\n<Point7:1> *True* (The student accurately states that the Agile model accommodates changes at any stage, addressing the evolving requirements and priorities.)"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions the linear and sequential nature of the Waterfall model, where phases are completed one after the other.)\n\n<Point2:1> *True* (The student describes the unidirectional flow of the Waterfall model, where it is challenging to go back and make changes.)\n\n<Point3:1> *True* (The student highlights the difficulty in making changes, which aligns with the reference answer's point about the challenge of implementing changes once a phase is completed.)\n\n<Point4:2> *True* (The student characterizes the Agile model as flexible and iterative, emphasizing small cycles of development with ongoing feedback.)\n\n<Point5:1> *True* (The student's mention of \"small, repeated cycles of development\" aligns with the reference answer's description of manageable increments or iterations.)\n\n<Point6:1> *True* (The student's answer includes the aspect of continuous feedback from stakeholders and adaptability, which is a key feature of the Agile model.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any time, accommodating evolving requirements, which is a significant advantage of the Agile model over the Waterfall model.)"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the Waterfall model as a linear and sequential process, where each phase is completed before moving to the next.)\n\n<Point2:1> *True* (The student captures the essence of the Waterfall model's unidirectional flow, emphasizing the challenge of moving to the next phase without the ability to overlap or iterate.)\n\n<Point3:1> *True* (The student accurately mentions the difficulty in accommodating changes in the Waterfall model, requiring a revisit to previous phases, which aligns with the reference answer.)\n\n<Point4:2> *True* (The student provides a clear description of the Agile model's focus on iteration and incremental development, emphasizing collaboration and customer feedback.)\n\n<Point5:1> *True* (The student's mention of \"short cycles called iterations\" aligns with the reference answer's description of manageable increments, demonstrating a solid understanding of the Agile approach.)\n\n<Point6:1> *True* (The student captures the essence of the Agile model's adaptability, highlighting its ability to incorporate continuous feedback and adapt to changing requirements.)\n\n<Point7:1> *True* (The student's answer emphasizes the flexibility of the Agile model, allowing for changes at any stage, which is a key advantage over the Waterfall model.)"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model, where each phase is completed before moving to the next.)\n\n<Point2:1> *True* (The student captures the idea that the Waterfall model flows in one direction, without overlapping phases.)\n\n<Point3:1> *True* (The student explains the difficulty in making changes to the Waterfall model once a phase is completed, aligning with the reference answer.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student mentions that development in the Agile model occurs in small, manageable increments or iterations, enabling regular reassessment.)\n\n<Point6:1> *True* (The student's answer highlights the continuous feedback and adaptability offered by the Agile model, allowing for changing requirements throughout the process.)\n\n<Point7:1> *True* (The student correctly states that the Agile model accommodates changes at any stage, making it possible to adapt to evolving requirements and priorities.)"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the Waterfall model as a step-by-step, linear process, where each phase is completed before moving on to the next.)\n\n<Point2:1> *True* (The student accurately mentions that the Waterfall model flows in one direction, making it challenging to go back and implement changes once a phase is completed.)\n\n<Point3:1> *True* (The student's description of the difficulty in making changes in the Waterfall model aligns with the reference answer.)\n\n<Point4:2> *True* (The student correctly identifies the Agile model as an iterative and incremental approach, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student's answer mentions that the Agile model breaks work into small, manageable iterations, allowing for regular reassessment and adaptation.)\n\n<Point6:1> *True* (The student accurately describes the Agile model's focus on continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student's answer highlights the ability to accommodate changes at any stage of the development process, aligning with the reference answer.)"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the Waterfall model as having a linear and sequential approach, where phases are completed one after the other.)\n\n<Point2:1> *True* (The student captures the essence of the Waterfall model's unidirectional flow, where there is little room for overlap or iteration between phases.)\n\n<Point3:1> *True* (The student mentions the difficulty in implementing changes in the Waterfall model once a phase is completed, which aligns with the reference answer.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student's mention of short, iterative cycles in the Agile model aligns with the reference answer's description of manageable increments or iterations.)\n\n<Point6:1> *True* (The student correctly highlights the Agile model's focus on continuous feedback from stakeholders and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student's answer emphasizes the ability to accommodate changes at any stage of the development process, which is a key advantage of the Agile model.)"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer mentions the linear and sequential nature of the Waterfall model, where each phase is completed before moving to the next.)\n\n<Point2:1> *True* (The student correctly describes the unidirectional flow of the Waterfall model, where there is no overlapping or iteration between phases.)\n\n<Point3:1> *True* (The student accurately points out the difficulty in implementing changes in the Waterfall model once a phase is completed.)\n\n<Point4:2> *True* (The student's answer highlights the iterative and incremental nature of the Agile model, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student correctly mentions that development in the Agile model occurs in small, manageable increments or iterations.)\n\n<Point6:1> *True* (The student's answer emphasizes the continuous feedback and adaptability offered by the Agile model, allowing for changing requirements throughout the development process.)\n\n<Point7:1> *True* (The student correctly states that the Agile model accommodates changes at any stage of the development process, adapting to evolving requirements and priorities.)"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model, where phases are completed one after the other without overlapping.)\n\n<Point2:1> *True* (The student captures the idea that the Waterfall model flows in one direction and does not easily accommodate changes once a phase is completed.)\n\n<Point3:1> *True* (The student mentions that the Waterfall model's rigidity makes it challenging to implement changes, requiring a revisit to previous phases.)\n\n<Point4:2> *True* (The student identifies the Agile model's focus on iteration and incremental development, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student's description of \"small cycles of development\" aligns with the concept of iterations in the Agile model, enabling regular reassessment and adaptation.)\n\n<Point6:1> *True* (The student correctly mentions that the Agile model facilitates continuous feedback and adaptability to changing requirements throughout the development process.)\n\n<Point7:1> *True* (The student's answer highlights that the Agile model accommodates changes at any stage, reflecting its flexibility in adapting to evolving requirements and priorities.)"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the linear and sequential nature of the Waterfall model, where each phase is completed before moving to the next.)\n\n<Point2:1> *True* (The student captures the unidirectional flow of the Waterfall model, where there is no overlapping or iteration between phases.)\n\n<Point3:1> *True* (The student mentions the difficulty in implementing changes in the Waterfall model once a phase is completed.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as an iterative and incremental approach, emphasizing flexibility and collaboration.)\n\n<Point5:1> *True* (The student's answer mentions that the Agile model breaks the project into small, manageable increments or iterations.)\n\n<Point6:1> *True* (The student correctly states that the Agile model accommodates continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student's answer highlights that the Agile model allows for changes to be made at any stage of the development process.)"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>. <Point7:1>Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly describes the Waterfall model as a linear and sequential approach, where phases are completed one after the other.)\n\n<Point2:1> *True* (The student captures the essence of the Waterfall model's unidirectional flow, which makes progressing backwards challenging once a phase is completed.)\n\n<Point3:1> *True* (The student mentions the difficulty in implementing changes in the Waterfall model, aligning with the reference answer.)\n\n<Point4:2> *True* (The student accurately describes the Agile model as iterative and incremental, emphasizing flexibility and stakeholder collaboration.)\n\n<Point5:1> *True* (The student's answer mentions the small, manageable increments, or iterations, that are characteristic of the Agile model.)\n\n<Point6:1> *True* (The student captures the aspect of continuous feedback and adaptability to changing requirements, a key strength of the Agile model.)\n\n<Point7:1> *True* (The student's answer highlights the ability to accommodate changes at any stage, a significant advantage of the Agile model over the Waterfall model.)"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies cohesion as the measure of the bond strength between elements within a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class, which aligns with the reference answer's description of the relationship between data and the unifying purpose of the class.)\n\n<Point3:1> *True* (The student's answer implies the unifying factor by mentioning that elements in a class with high cohesion \"work together well,\" which indicates a shared purpose.)\n\n<Point4:2> *True* (The student's description of high cohesion aligns with the reference answer, indicating a close relationship between elements and a common goal.)\n\n<Point5:2> *True* (The student's description of low cohesion matches the reference answer, indicating loose relationships and a lack of clear purpose among the elements.)"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies that cohesion refers to the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class, which aligns with the concept of relationship strength between elements.)\n\n<Point3:1> *True* (The student's answer includes the idea of a unifying factor or purpose served by the class, which is consistent with the reference answer.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as having closely related elements working towards a common goal.)\n\n<Point5:2> *True* (The student's answer correctly explains that low cohesion implies loosely related elements without a clear or unified purpose.)"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies that cohesion refers to the bond strength between elements within a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class, which aligns with the concept of cohesion measuring the relationship strength.)\n\n<Point3:1> *True* (The student's answer includes the idea of a unifying factor or purpose served by the class, which is a key aspect of cohesion.)\n\n<Point4:2> *True* (The student provides a clear and accurate description of high cohesion, stating that elements are closely related and work towards a common goal.)\n\n<Point5:2> *True* (The student accurately describes low cohesion, mentioning that elements are loosely related and lack a clear, unified purpose.)"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions the bond strength between elements in a module, satisfying the point.)\n\n<Point2:1> *True* (The student's answer correctly identifies the relationship between data and methods within a class, which aligns with the point.)\n\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose served by the class, addressing this point.)\n\n<Point4:2> *True* (The student accurately describes high cohesion, mentioning the close relationship and common goal of the elements, as stated in the point.)\n\n<Point5:2> *True* (The student's description of low cohesion matches the point, explaining that elements are loosely related and lack a unified purpose.)"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies that cohesion refers to the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's response accurately mentions the relationship between data and methods within a class.)\n\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose served by the class, which aligns with the reference answer.)\n\n<Point4:2> *True* (The student's explanation of high cohesion matches the reference, indicating a clear understanding.)\n\n<Point5:2> *True* (The student accurately describes low cohesion, conveying that the elements have diverse and unclear purposes.)"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies that cohesion refers to the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between the data and methods of a class, which aligns with the concept of cohesion measuring the relationship strength.)\n\n<Point3:1> *True* (The student's answer includes the idea of a unifying factor or purpose served by the class, which is a key aspect of cohesion.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as having closely related elements working towards a common goal.)\n\n<Point5:2> *True* (The student's answer correctly explains that low cohesion implies elements are loosely related and lack a clear, unified purpose.)"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies that cohesion refers to the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods of a class, which aligns with the concept of relationship strength between elements.)\n\n<Point3:1> *True* (The student's answer includes the idea of a unifying factor or purpose served by the class, which is a key aspect of cohesion.)\n\n<Point4:2> *True* (The student's description of high cohesion matches the reference answer, indicating a clear understanding of the concept.)\n\n<Point5:2> *True* (The student accurately describes low cohesion, highlighting the loose relationship and lack of a clear purpose among the elements.)"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class, which aligns with the reference answer's point about the relationship strength between data and the class's purpose.)\n\n<Point3:1> *True* (The student's answer refers to the unifying factor or purpose served by the class, which is part of the reference answer's definition of cohesion.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as having closely related elements working towards a common goal, improving reliability and maintainability.)\n\n<Point5:2> *True* (The student's description of low cohesion as elements without a clear relationship or unified purpose aligns with the reference answer.)"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies cohesion as the bond strength between elements within a module.)\n\n<Point2:1> *True* (The student's answer mentions the relationship between data and methods within a class, which aligns with the reference answer's point about the relationship strength between data and the unifying purpose of the class.)\n\n<Point3:1> *True* (The student's answer includes the idea of evaluating the connection between data and methods, which is consistent with the reference answer's point about the unifying factor or purpose served by the class.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as having closely related elements that work towards a common goal.)\n\n<Point5:2> *True* (The student's answer correctly explains low cohesion as having loosely related elements without a clear, unified purpose.)"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1> and <Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer mentions the bond strength between elements within a module, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer correctly identifies the relationship between data and methods within a class, which is a key aspect of cohesion.)\n\n<Point3:1> *True* (The student's answer includes the unifying factor or purpose served by the class, which is an important consideration when discussing cohesion.)\n\n<Point4:2> *True* (The student's description of high cohesion matches the reference answer and provides additional insights into the benefits of high cohesion, such as improved maintainability and understandability.)\n\n<Point5:2> *True* (The student accurately describes low cohesion, explaining that loosely related elements serve multiple, unrelated purposes, making the module harder to manage and understand.)"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer includes the purpose of internal milestones, which is to indicate that the engineers are on the right path.)\n\n<Point4:2> *True* (The student mentions that internal milestones can be used to assess the development team's progress, which is correct.)\n\n<Point5:1> *True* (Identifying issues and risks is correctly identified by the student as one of the purposes of internal milestones.)\n\n<Point6:1> *True* (The student's answer correctly states that internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student mentions completing a specific feature as an example of what internal milestones can be related to.)\n\n<Point8:1> *True* (Testing and debugging the code is correctly identified by the student as an aspect that internal milestones can be related to.)\n\n<Point9:1> *True* (The student's answer includes reaching a certain level of performance or functionality as a possible focus of internal milestones.)"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are used to track progress and are indicators of the project's direction, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer indicates that internal milestones are systematic procedures by referring to them as \"checkpoints.\")\n\n<Point3:1> *True* (The student's answer mentions that internal milestones help determine if the engineers are on the right path.)\n\n<Point4:2> *True* (The student's answer mentions assessing progress, which is in line with the reference answer.)\n\n<Point5:1> *True* (The student correctly identifies that internal milestones help in identifying issues, which is one of the key aspects mentioned in the reference answer.)\n\n<Point6:1> *True* (The student's answer mentions making changes to the project plan, which is consistent with the reference answer's point about adjustments.)\n\n<Point7:1> *True* (The student's answer includes completing a feature as one of the milestones, which is an accurate example provided in the reference text.)\n\n<Point8:1> *True* (The student correctly identifies testing and debugging as one of the internal milestones, as mentioned in the reference answer.)\n\n<Point9:1> *True* (The student's reference to achieving a specific performance level as a milestone is in line with the reference answer's point about reaching a certain level of performance or functionality.)"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer mentions that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones indicate that engineers are on the right path.)\n\n<Point4:2> *True* (The student includes the point about assessing the development team's progress.)\n\n<Point5:1> *True* (The student's answer mentions identifying issues and risks as a purpose of internal milestones.)\n\n<Point6:1> *True* (The student correctly states that internal milestones are used to make adjustments to the project plan.)\n\n<Point7:1> *True* (Completing a specific feature is given as an example of an internal milestone by the student.)\n\n<Point8:1> *True* (The student's answer includes testing and debugging code as an internal milestone.)\n\n<Point9:1> *True* (The student correctly mentions reaching performance or functionality goals as potential internal milestones.)"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are measurable attributes, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer includes the phrase \"standard procedures,\" reflecting the idea of systematic procedures in the reference answer.)\n\n<Point3:1> *True* (The student's answer correctly conveys that internal milestones indicate that the engineers are on track.)\n\n<Point4:2> *True* (The student's answer mentions assessing the team's progress, which is in line with the reference answer.)\n\n<Point5:1> *True* (The student correctly identifies that internal milestones help in identifying issues and risks.)\n\n<Point6:1> *True* (The student's answer mentions adjusting the project plan, reflecting the idea conveyed in the reference answer.)\n\n<Point7:1> *True* (The student's answer includes completing a specific feature as one of the milestones, which is consistent with the reference answer.)\n\n<Point8:1> *True* (The student correctly mentions testing and debugging the code as a milestone.)\n\n<Point9:1> *True* (The student's answer includes achieving a specific level of performance or functionality, which is one of the aspects mentioned in the reference answer.)"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are measurable, which is a key attribute.)\n\n<Point2:1> *True* (The student's answer includes the idea that internal milestones are standard procedures, which aligns with the reference.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones indicate the project is on the right path or \"on track\".)\n\n<Point4:2> *True* (The student's answer mentions assessing the team's progress, which is one of the key purposes of internal milestones.)\n\n<Point5:1> *True* (The student identifies that internal milestones are useful for identifying problems, which is in line with the reference's mention of issues and risks.)\n\n<Point6:1> *True* (The student's answer states that internal milestones enable necessary changes to the project plan, reflecting the reference's point about adjustments.)\n\n<Point7:1> *True* (The student's answer includes completing a feature as one of the aspects internal milestones can be related to.)\n\n<Point8:1> *True* (The student mentions debugging as a task associated with internal milestones, which is specific and relevant.)\n\n<Point9:1> *True* (The student's reference to reaching a performance goal aligns with the reference answer's mention of reaching a certain level of performance or functionality.)"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are measurable attributes, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer describes these milestones as systematic procedures, which is correct.)\n\n<Point3:1> *True* (The student's answer correctly mentions that internal milestones indicate that the team is on the right path.)\n\n<Point4:2> *True* (The student has correctly identified that internal milestones are used to assess the team's progress.)\n\n<Point5:1> *True* (The student's answer mentions identifying issues, which is one of the key purposes of internal milestones.)\n\n<Point6:1> *True* (The student correctly states that internal milestones help adjust the project plan, showing an understanding of their flexibility.)\n\n<Point7:1> *True* (Completing a specific feature is provided as an example in the student's answer, demonstrating a grasp of the concept.)\n\n<Point8:1> *True* (While the student mentions \"testing the code\" instead of \"testing and debugging,\" it still satisfies the point and demonstrates an understanding.)\n\n<Point9:1> *True* (The student's answer includes reaching a specific performance level, which is one aspect mentioned in the reference answer.)"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are used to measure progress, which aligns with the reference answer's description of \"measurable attributes.\")\n\n<Point2:1> *True* (The student's answer describes these milestones as \"systematic procedures,\" matching the reference answer.)\n\n<Point3:1> *True* (The student's answer states that internal milestones indicate that engineers are on track, which is consistent with the reference answer.)\n\n<Point4:2> *True* (The student's answer mentions evaluating progress, which is in line with the reference answer's description of assessing the development team's progress.)\n\n<Point5:1> *True* (The student correctly identifies that internal milestones are used to identify risks, addressing the reference answer's mention of \"identifying issues and risks.\")\n\n<Point6:1> *True* (The student's answer includes making necessary changes to the project plan, reflecting the reference answer's point about adjustments.)\n\n<Point7:1> *True* (The student provides an example of completing a feature, which is one of the aspects mentioned in the reference answer.)\n\n<Point8:1> *True* (The student's mention of debugging the code aligns with the reference answer's point about testing and debugging.)\n\n<Point9:1> *True* (The student's answer includes achieving a performance level, which is consistent with the reference answer's mention of reaching a certain level of performance or functionality.)"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are indicators or measures of progress, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer includes the aspect of standard procedures, which is a key characteristic of internal milestones as per the reference answer.)\n\n<Point3:1> *True* (The student's answer correctly infers that internal milestones indicate that the project is on the right path, which is a key purpose of these milestones as mentioned in the reference answer.)\n\n<Point4:2> *True* (The student's answer mentions assessing the development team, which is in line with evaluating the development team's progress as stated in the reference answer.)\n\n<Point5:1> *True* (The student's answer includes identifying issues and risks, which is one of the key purposes of internal milestones according to the reference answer.)\n\n<Point6:1> *True* (The student correctly mentions adjusting the project plan, which is one of the key actions facilitated by internal milestones as per the reference answer.)\n\n<Point7:1> *True* (The student's answer mentions completing a specific feature as one of the tasks associated with internal milestones, which is consistent with the reference answer.)\n\n<Point8:1> *True* (The student correctly includes testing and debugging as tasks related to internal milestones, as mentioned in the reference answer.)\n\n<Point9:1> *True* (The student's answer mentions achieving a performance goal, which aligns with reaching a certain level of performance or functionality as stated in the reference answer.)"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are measurable attributes, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer describes these milestones as systematic procedures, which is correct.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones indicate that engineers are on the right path.)\n\n<Point4:2> *True* (The student provided an accurate description of how internal milestones are used to assess the team's progress.)\n\n<Point5:1> *True* (The student's answer includes identifying issues and risks as a purpose of internal milestones.)\n\n<Point6:1> *True* (The student correctly mentions that internal milestones are used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (Completing a specific feature is given as an example in the student's answer.)\n\n<Point8:1> *True* (The student's answer mentions testing and debugging as part of the internal milestones.)\n\n<Point9:1> *True* (The student provided reaching a performance level as an example, which is in line with the reference answer's \"reaching a certain level of performance or functionality.\")"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures<Point2:1> that <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer mentions that internal milestones are measurable attributes, which aligns with the reference answer.)\n\n<Point2:1> *True* (The student's answer includes the phrase \"standard procedures,\" reflecting the systematic nature of internal milestones.)\n\n<Point3:1> *True* (The student's answer correctly conveys that internal milestones indicate the project is on the right path.)\n\n<Point4:2> *True* (The student's answer mentions assessing progress, which is one of the key purposes of internal milestones.)\n\n<Point5:1> *True* (The student identifies issue identification as a purpose of internal milestones.)\n\n<Point6:1> *True* (The student's answer includes risk management, which is an important aspect of internal milestones.)\n\n<Point7:1> *True* (The student provides an example of a completed feature as an internal milestone, demonstrating their understanding of its practical application.)\n\n<Point8:1> *True* (Testing and debugging are correctly identified as potential internal milestones by the student.)\n\n<Point9:1> *True* (The student's reference to achieving a specific performance level aligns with the reference answer's mention of reaching performance or functionality milestones.)"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student correctly identifies that RAD is an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer mentions the emphasis on reduced planning time and increased focus on software development, which is a key characteristic of the RAD model.)\n\n<Point3:1> *True* (The student's answer lists the correct development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's response includes the goal of quickly delivering functional software to clients and stakeholders, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student correctly mentions that the RAD model incorporates feedback from end-users and stakeholders to improve the software.)"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer mentions that RAD is an iterative approach, which is one of the key characteristics of the model.)\n\n<Point2:1> *True* (The student correctly identifies that RAD minimizes time spent on traditional planning and emphasizes actual software development.)\n\n<Point3:1> *True* (The student's answer lists the correct development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer states the goal of quickly delivering functional software to clients and stakeholders, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student correctly mentions that the RAD model incorporates feedback from users and stakeholders to continuously improve the software.)"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer mentions that RAD is an iterative and prototyping approach, which is correct.)\n\n<Point2:1> *True* (The student's response correctly emphasizes the reduced time spent on traditional planning and increased focus on software development.)\n\n<Point3:1> *True* (The answer identifies the correct smaller development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student correctly mentions the quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the important aspect of incorporating feedback from end-users and stakeholders for refinement.)"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer mentions that RAD is an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's answer correctly emphasizes the reduced time spent on traditional planning and the focus on actual software development.)\n\n<Point3:1> *True* (The student's answer lists the correct development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer mentions the quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student's answer includes the incorporation of feedback from users and stakeholders for software refinement.)"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer mentions that RAD is an iterative and prototyping approach, which is correct.)\n\n<Point2:1> *True* (The student captures the essence of the RAD model, which is to spend less time on traditional planning and more on actual development.)\n\n<Point3:1> *True* (The student lists the correct development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer emphasizes quick delivery of functional software, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student correctly mentions that the RAD model incorporates feedback from end-users and stakeholders to improve the software.)"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer mentions that RAD is an iterative approach, which is one of the key aspects of the model.)\n\n<Point2:1> *True* (The student correctly highlights the emphasis on rapid development and reduced time spent on traditional planning.)\n\n<Point3:1> *True* (The student's answer lists the correct smaller development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer mentions the quick delivery of functional software to clients and stakeholders, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student correctly identifies that feedback from end-users and stakeholders is crucial for refining and improving the software in the RAD model.)"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies that RAD is an iterative approach to software development.)\n\n<Point2:1> *True* (The student's answer mentions the emphasis on rapid development cycles over traditional planning, which is a key characteristic of the RAD model.)\n\n<Point3:1> *True* (The student lists the correct development cycles, showing a good understanding of the RAD process.)\n\n<Point4:1> *True* (The student's answer includes the goal of quick delivery of functional software, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student correctly mentions that the RAD model incorporates feedback from end-users and stakeholders to improve the software.)"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student's response accurately emphasizes the reduced time spent on traditional planning and the focus on actual software development.)\n\n<Point3:1> *True* (The student lists the correct smaller development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer mentions the quick delivery of functional software to clients and stakeholders, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student accurately describes how the RAD model incorporates feedback from end-users and stakeholders to refine and improve the software.)"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies that RAD is an iterative approach to software development.)\n\n<Point2:1> *True* (The student's answer accurately mentions the emphasis on reduced time spent on traditional planning, favoring development instead.)\n\n<Point3:1> *True* (The student's answer lists the correct smaller development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer highlights the quick delivery of functional software to clients and stakeholders, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student recognizes the importance of end-user and stakeholder feedback, which is used to refine and improve the software.)"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:1>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer mentions that RAD is an iterative approach, which is correct.)\n\n<Point2:1> *True* (The student captures the essence of the RAD model, which is to spend less time on traditional planning and more on development, with a focus on quick delivery.)\n\n<Point3:1> *True* (The student's answer correctly identifies the smaller development cycles, including planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student's answer emphasizes the quick delivery of functional software, which is a key aspect of the RAD model.)\n\n<Point5:2> *True* (The student correctly mentions that the RAD model incorporates feedback from end-users and stakeholders to improve the software.)"
    }
}