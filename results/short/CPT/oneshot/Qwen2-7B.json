{
    "0": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n1.\tRequirement Gathering: Collecting requirements from stakeholders.\n2.\tSystem Analysis and Design: Analyzing requirements and creating a blueprint.\n3.\tImplementation: Writing the code.\n4.\tTesting: Checking the system for defects.\n5.\tDeployment: Releasing the software to users.\n6.\tMaintenance: Providing support after deployment.\n",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase and explained its purpose.)\n<Point2:1> *True* (The student correctly identified System Analysis and Design as a phase and explained its purpose.)\n<Point3:1> *True* (The student correctly identified Implementation as a phase and explained its purpose.)\n<Point4:1> *True* (The student correctly identified Testing as a phase and explained its purpose.)\n<Point5:1> *True* (The student correctly identified Deployment as a phase and explained its purpose.)\n<Point6:1> *False* (The student did not specify that coding occurs during the Implementation phase.)\n<Point7:1> *True* (The student correctly identified Testing as a phase and explained its purpose.)\n<Point8:1> *False* (The student did not explain the specific goal of testing, which is to verify the system against requirements to identify and fix defects.)\n<Point9:1> *True* (The student correctly identified Deployment as a phase and explained its purpose.)\n<Point10:1> *False* (The student did not specify that releasing the software to the production environment is part of the Deployment phase.)\n<Point11:1> *True* (The student correctly identified Maintenance as a phase and explained its purpose.)\n<Point12:1> *False* (The student did not specify that ongoing support and enhancement of the software post-deployment is part of the Maintenance phase.)"
    },
    "1": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n1.\tRequirement Gathering: Understanding what the software needs to do by talking to stakeholders.\n2.\tSystem Analysis and Design: Creating a detailed plan and design for the software.\n3.\tImplementation (Coding): Developing the software based on the design.\n4.\tTesting: Ensuring the software works correctly by finding and fixing bugs.\n5.\tDeployment: Making the software available to the users.\n6.\tMaintenance: Keeping the software running smoothly and making improvements.\n",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase and explained its purpose.)\n<Point2:1> *True* (The student accurately described System Analysis and Design as creating a blueprint for the system.)\n<Point3:1> *True* (The student correctly mentioned Implementation (Coding) as the phase where the software is developed.)\n<Point4:1> *True* (The student appropriately described Testing as the phase for verifying the software against requirements.)\n<Point5:1> *True* (The student correctly identified Deployment as the phase for releasing the software to users.)\n<Point6:1> *True* (The student accurately explained Maintenance as the ongoing support and enhancements after deployment.)\n<Point7:1> *False* (The student did not explicitly mention the fourth phase as \"Testing\" but rather described it as ensuring the software works correctly by finding and fixing bugs, which is part of the testing process.)\n<Point8:1> *False* (The student's description of Testing was not aligned with the reference answer's specific focus on verifying the system against requirements and identifying defects.)\n<Point9:1> *False* (The student did not explicitly mention the fifth phase as \"Deployment\" but rather described it as making the software available to users, which is part of the deployment process.)\n<Point10:1> *False* (The student's description of Deployment was not aligned with the reference answer's specific focus on releasing the software to the production environment for users.)\n<Point11:1> *False* (The student did not explicitly mention the sixth phase as \"Maintenance\" but rather described it as keeping the software running smoothly and making improvements, which is part of the maintenance process.)\n<Point12:1> *False* (The student's description of Maintenance was not aligned with the reference answer's specific focus on ongoing support and enhancements post-deployment.)"
    },
    "2": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the Software Development Life Cycle (SDLC) are:\n1.\tRequirement Gathering: This involves collecting requirements from stakeholders to understand what needs to be developed.\n2.\tSystem Analysis and Design: In this phase, the requirements are analyzed, and a blueprint of the system is created.\n3.\tImplementation (Coding): This phase involves writing the code according to the design documents.\n4.\tTesting: The system is verified against the requirements to identify and fix defects.\n5.\tDeployment: The software is released to the production environment for users.\n6.\tMaintenance: This phase involves ongoing support and enhancement of the software post-deployment.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase of the SDLC and explained its purpose.)\n\n<Point2:1> *True* (The student accurately described System Analysis and Design as a phase, including the process of analyzing requirements and creating a system blueprint.)\n\n<Point3:1> *True* (The student correctly mentioned Implementation (Coding) as a phase, explaining the task of coding according to design documents.)\n\n<Point4:1> *True* (The student accurately described Testing as a phase, detailing the verification of the system against requirements to identify and fix defects.)\n\n<Point5:1> *True* (The student correctly identified Deployment as a phase, explaining the release of the software to the production environment for users.)\n\n<Point6:1> *True* (The student accurately described Maintenance as a phase, explaining the ongoing support and enhancement of the software post-deployment.)\n\n<Point7:1> *False* (The student did not explicitly mention the phase \"System Analysis and Design\" as separate from \"Analysis and Design\".)\n\n<Point8:1> *False* (The student did not explicitly mention the detailed process of verifying the system against requirements during the Testing phase.)\n\n<Point9:1> *False* (The student did not explicitly mention the phase \"Deployment\" as distinct from the explanation of releasing the software to the production environment.)\n\n<Point10:1> *False* (The student did not explicitly mention the phase \"Deployment\" as distinct from the explanation of releasing the software to the production environment.)\n\n<Point11:1> *True* (The student correctly identified Maintenance as a phase, explaining the ongoing support and enhancement of the software post-deployment.)\n\n<Point12:1> *True* (The student accurately described the purpose of the Maintenance phase, emphasizing ongoing support and enhancement of the software post-deployment.)"
    },
    "3": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The main phases of the SDLC are:\n1.\tRequirement Gathering: This is where the requirements from stakeholders are collected.\n2.\tSystem Analysis and Design: The collected requirements are then analyzed and a system blueprint is created.\n3.\tImplementation (Coding): The next step is to write the code based on the design.\n4.\tTesting: After coding, the system is tested to ensure it meets the requirements and to find and fix any defects.\n5.\tDeployment: The software is then deployed to the production environment.\n6.\tMaintenance: Finally, the software is maintained, which includes ongoing support and enhancements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase of the SDLC.)\n\n<Point2:1> *True* (The student accurately described the purpose of Requirement Gathering.)\n\n<Point3:1> *True* (The student correctly mentioned System Analysis and Design as a phase.)\n\n<Point4:1> *True* (The student provided an accurate description of System Analysis and Design.)\n\n<Point5:1> *True* (The student correctly identified Implementation (Coding) as a phase.)\n\n<Point6:1> *True* (The student accurately described the purpose of Implementation (Coding).)\n\n<Point7:1> *True* (The student correctly identified Testing as a phase.)\n\n<Point8:1> *True* (The student accurately described the purpose of Testing.)\n\n<Point9:1> *True* (The student correctly identified Deployment as a phase.)\n\n<Point10:1> *True* (The student accurately described the purpose of Deployment.)\n\n<Point11:1> *True* (The student correctly identified Maintenance as a phase.)\n\n<Point12:1> *True* (The student accurately described the purpose of Maintenance.)"
    },
    "4": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC has several key phases:\n1.\tRequirement Gathering: Collecting the requirements from stakeholders.\n2.\tSystem Analysis and Design: Analyzing the requirements and designing the system.\n3.\tImplementation (Coding): Writing the code based on the design.\n4.\tTesting: Checking the system for defects.\n5.\tDeployment: Releasing the software for use.\n6.\tMaintenance: Supporting and enhancing the software after deployment.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase of the SDLC.)\n<Point2:1> *True* (The student accurately described the purpose of Requirement Gathering.)\n<Point3:1> *True* (The student correctly identified System Analysis and Design as a phase of the SDLC.)\n<Point4:1> *True* (The student accurately described the purpose of System Analysis and Design.)\n<Point5:1> *True* (The student correctly identified Implementation (Coding) as a phase of the SDLC.)\n<Point5:1> *False* (The student did not specify that coding is done based on the design documents, which is part of the Implementation phase.)\n<Point6:1> *True* (The student correctly identified Testing as a phase of the SDLC.)\n<Point7:1> *True* (The student accurately described the purpose of Testing.)\n<Point8:1> *True* (The student correctly identified Deployment as a phase of the SDLC.)\n<Point9:1> *True* (The student accurately described the purpose of Deployment.)\n<Point10:1> *True* (The student correctly identified Maintenance as a phase of the SDLC.)\n<Point11:1> *True* (The student accurately described the purpose of Maintenance.)\n<Point12:1> *False* (The student did not specify that maintenance involves ongoing support and enhancement of the software post-deployment.)"
    },
    "5": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The Software Development Life Cycle includes:\n1.\tRequirement Gathering: Gathering what is needed for the project.\n2.\tSystem Analysis and Design: Creating a design based on the requirements.\n3.\tImplementation (Coding): Coding the project.\n4.\tTesting: Testing the code.\n5.\tDeployment: Making the software available.\n6.\tMaintenance: Ongoing updates and fixes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase of the SDLC.)\n<Point2:1> *True* (The student accurately described the purpose of Requirement Gathering.)\n<Point3:1> *True* (The student correctly mentioned System Analysis and Design as a phase.)\n<Point4:1> *True* (The student provided an accurate description of System Analysis and Design.)\n<Point5:1> *True* (The student correctly identified Implementation (Coding) as a phase.)\n<Point6:1> *True* (The student accurately described the purpose of Implementation (Coding).)\n<Point7:1> *True* (The student correctly identified Testing as a phase.)\n<Point8:1> *True* (The student accurately described the purpose of Testing.)\n<Point9:1> *True* (The student correctly identified Deployment as a phase.)\n<Point10:1> *True* (The student accurately described the purpose of Deployment.)\n<Point11:1> *True* (The student correctly identified Maintenance as a phase.)\n<Point12:1> *True* (The student accurately described the purpose of Maintenance.)"
    },
    "6": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of SDLC are:\n1.\tRequirement Gathering: Understanding what the stakeholders need.\n2.\tSystem Analysis and Design: Planning how the system will be built.\n3.\tImplementation (Coding): Writing the actual code.\n4.\tTesting: Making sure the software works as expected.\n5.\tDeployment: Launching the software for users.\n6.\tMaintenance: Keeping the software updated and fixing issues.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:False>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:False>,<Point11:True>,<Point12:False>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase and explained its purpose.)\n<Point2:1> *True* (The student accurately described System Analysis and Design as planning the system's construction.)\n<Point3:1> *True* (The student mentioned Implementation (Coding) as writing the code based on the design.)\n<Point4:1> *True* (The student correctly stated Testing as verifying the software against requirements.)\n<Point5:1> *True* (The student identified Deployment as releasing the software to users.)\n<Point6:1> *True* (The student acknowledged Maintenance as ongoing support and enhancements after deployment.)\n<Point7:1> *False* (The student did not explicitly mention the detailed steps within the Testing phase.)\n<Point8:1> *False* (The student did not specify the purpose of Testing beyond ensuring the software works as expected.)\n<Point9:1> *False* (The student did not provide details about the Deployment phase beyond launching the software.)\n<Point10:1> *False* (The student did not elaborate on the specifics of the Deployment phase, such as to the production environment.)\n<Point11:1> *False* (The student did not clarify the nature of Maintenance beyond keeping the software updated.)\n<Point12:1> *False* (The student did not explain the focus of Maintenance, such as fixing issues post-deployment.)"
    },
    "7": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC consists of:\n1.\tRequirement Gathering: Collecting the requirements needed for the project.\n2.\tSystem Analysis and Design: Designing the system based on the requirements.\n3.\tImplementation (Coding): Writing the code for the project.\n4.\tTesting: Checking the software for any issues.\n5.\tDeployment: Releasing the final product to the users.\n6.\tMaintenance: Providing support and updates after release.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:False>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase of the SDLC.)\n<Point2:1> *True* (The student accurately described the purpose of Requirement Gathering.)\n<Point3:1> *True* (The student correctly mentioned System Analysis and Design as a phase.)\n<Point4:1> *True* (The student provided an accurate description of System Analysis and Design.)\n<Point5:1> *True* (The student correctly identified Implementation (Coding) as a phase.)\n<Point6:1> *True* (The student accurately described the purpose of Implementation (Coding).)\n<Point7:1> *True* (The student correctly identified Testing as a phase.)\n<Point8:1> *True* (The student accurately described the purpose of Testing.)\n<Point9:1> *True* (The student correctly identified Deployment as a phase.)\n<Point10:1> *True* (The student accurately described the purpose of Deployment.)\n<Point11:1> *True* (The student correctly identified Maintenance as a phase.)\n<Point12:1> *True* (The student accurately described the purpose of Maintenance.)"
    },
    "8": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The key phases of the SDLC are:\n1.\tRequirement Gathering: Collecting what needs to be developed from the stakeholders.\n2.\tSystem Analysis and Design: Analyzing these requirements and making a system design.\n3.\tImplementation (Coding): Writing the code according to the design.\n4.\tTesting: Verifying that the system works as intended and fixing any defects.\n5.\tDeployment: Making the software available to the users.\n6.\tMaintenance: Providing ongoing support and updates.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase and explained its purpose.)\n<Point2:1> *True* (The student accurately described System Analysis and Design as analyzing requirements and creating a system blueprint.)\n<Point3:1> *True* (The student correctly mentioned Implementation (Coding) as writing code based on the design.)\n<Point4:1> *True* (The student provided a correct explanation of Testing as verifying the system against requirements and fixing defects.)\n<Point5:1> *True* (The student accurately described Deployment as releasing the software to the production environment for users.)\n<Point6:1> *True* (The student correctly identified Maintenance as providing ongoing support and enhancements post-deployment.)\n<Point7:1> *False* (The student did not explicitly mention the specific phase name \"Implementation\" but correctly described the process involved under \"Implementation (Coding).\")\n<Point8:1> *False* (The student did not explicitly mention the specific phase name \"Testing\" but correctly described the process involved under \"Testing.\")\n<Point9:1> *False* (The student did not explicitly mention the specific phase name \"Deployment\" but correctly described the process involved under \"Deployment.\")\n<Point10:1> *False* (The student did not explicitly mention the specific phase name \"Deployment\" but correctly described the process involved under \"Deployment.\")\n<Point11:1> *False* (The student did not explicitly mention the specific phase name \"Maintenance\" but correctly described the process involved under \"Maintenance.\")\n<Point12:1> *False* (The student did not explicitly mention the specific phase name \"Maintenance\" but correctly described the process involved under \"Maintenance.\")"
    },
    "9": {
        "question_code": "CPT001",
        "question": "What are the key phases of the Software Development Life Cycle (SDLC)?",
        "fullMark": "12",
        "referenceAnswer": "The key phases of the SDLC are:\n     1. <Point1:1>Requirement Gathering<Point1:1>: <Point2:1>Collecting requirements from stakeholders to understand what needs to be developed<Point2:1>.\n     2. <Point3:1>System Analysis and Design<Point3:1>: <Point4:1>Analyzing the requirements and creating a blueprint of the system<Point4:1>.\n     3. <Point5:1>Implementation (Coding) <Point5:1>: <Point6:1>Writing the code as per the design documents<Point6:1>.\n     4. <Point7:1>Testing<Point7:1>: <Point8:1>Verifying the system against the requirements to identify and fix defects<Point8:1>.\n     5. <Point9:1>Deployment<Point9:1>: <Point10:1>Releasing the software to the production environment for users<Point10:1>.\n     6. <Point11:1>Maintenance<Point11:1>: <Point12:1>Ongoing support and enhancement of the software post-deployment<Point12:1>.\n",
        "studentAnswer": "The SDLC includes:\n1.\tRequirement Gathering: Understanding what the project needs.\n2.\tSystem Analysis and Design: Creating a detailed plan based on the requirements.\n3.\tImplementation (Coding): Writing the necessary code.\n4.\tTesting: Ensuring the system meets requirements and fixing any problems.\n5.\tDeployment: Making the software available to the end-users.\n6.\tMaintenance: Continuously improving and updating the software",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>,<Point8:True>,<Point9:True>,<Point10:True>,<Point11:True>,<Point12:True>",
        "feedback": "<Point1:1> *True* (The student correctly identified Requirement Gathering as a phase of the SDLC and explained its purpose.)\n\n<Point2:1> *True* (The student accurately described System Analysis and Design as creating a blueprint based on the collected requirements.)\n\n<Point3:1> *True* (The student mentioned Implementation (Coding) as part of the SDLC, indicating the writing of code based on the design.)\n\n<Point4:1> *True* (The student correctly included Testing as a phase, explaining it involves verifying the system against requirements and fixing defects.)\n\n<Point5:1> *True* (The student identified Deployment as a phase, which involves releasing the software to the production environment for users.)\n\n<Point6:1> *True* (The student acknowledged Maintenance as an ongoing phase of the SDLC, emphasizing continuous support and enhancements post-deployment.)\n\n<Point7:1> *False* (The student did not explicitly mention the specific details of the Implementation phase beyond \"Writing the necessary code,\" which could be more detailed.)\n\n<Point8:1> *False* (Similarly, the student did not provide specifics about the Testing phase beyond \"Ensuring the system meets requirements and fixing any problems,\" which could benefit from more detail.)\n\n<Point9:1> *False* (The student did not specify the exact nature of the Deployment phase beyond making the software available to users, potentially missing nuances like the process or considerations involved.)\n\n<Point10:1> *False* (The student's explanation for Maintenance was brief and general, lacking the emphasis on ongoing support and enhancements that characterizes this phase.)\n\n<Point11:1> *False* (The student did not provide additional context or detail for the Maintenance phase, which typically involves updates, bug fixes, and performance improvements.)\n\n<Point12:1> *False* (The student's answer did not fully capture the essence of the Maintenance phase, which is crucial for the long-term health and functionality of the software.)"
    },
    "10": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next one begins. The process flows in one direction like a waterfall, meaning that once you finish one phase, you move to the next without going back. This makes changes difficult to implement because you would have to revisit and potentially redo the previous phases.\nOn the other hand, the Agile model is iterative and incremental, focusing on flexibility, collaboration, and customer feedback. Development happens in small increments called iterations, which allows for regular reassessment and adaptation. Agile allows for continuous feedback from stakeholders, making it easier to adapt to changing requirements. Changes can be made at any stage, accommodating evolving needs and priorities.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student correctly explains the one-way flow characteristic of the Waterfall model.)\n\n<Point3:1> *False* (The student does not mention the difficulty in changes associated with the Waterfall model.)\n\n<Point4:2> *True* (The student provides an accurate description of the Agile model's iterative and incremental approach.)\n\n<Point5:1> *True* (The student correctly identifies the focus on small, manageable increments in the Agile model.)\n\n<Point6:1> *True* (The student accurately explains the importance of continuous feedback and adaptability in the Agile model.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile model.)"
    },
    "11": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a linear and sequential approach where you complete one phase before starting the next. It\u2019s like a straight path, and you can\u2019t go back easily if you need to make changes.\nAgile is more flexible and iterative. It allows for small, repeated cycles of development with ongoing feedback. This means changes can be made at any time, which helps in adapting to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>,<Point6:True>,<Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *False* (The student does not mention the inability to easily make changes in the Waterfall model after a phase is completed.)\n\n<Point3:1> *False* (The student does not provide the specific characteristic of the Waterfall model being a \"straight path\" or \"one-directional flow.\")\n\n<Point4:2> *True* (The student accurately captures the essence of the Agile model being iterative and incremental.)\n\n<Point5:1> *True* (The student correctly identifies the Agile model's focus on small, manageable increments called iterations.)\n\n<Point6:1> *True* (The student correctly highlights the Agile model's emphasis on continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student appropriately explains that changes can be made at any stage in the Agile model, facilitating adaptability.)"
    },
    "12": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional method where you go through each phase step by step. It\u2019s linear and sequential, meaning you finish one phase before starting the next, like a waterfall flowing down. This model doesn\u2019t handle changes well because you have to go back to the earlier stages to make any modifications.The Agile model is more modern and flexible. It\u2019s iterative and incremental, so you work in short cycles called iterations, getting feedback and making improvements as you go. Agile is all about collaboration and being able to adapt to changes at any point, which makes it very responsive to customer feedback and new requirements.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the linear and sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student accurately explains the Waterfall model's flow, comparing it to a waterfall.)\n\n<Point3:1> *True* (The student identifies the difficulty in handling changes within the Waterfall model.)\n\n<Point4:2> *True* (The student provides a clear explanation of the Agile model's iterative and incremental approach.)\n\n<Point5:1> *True* (The student correctly mentions the Agile model's focus on small, manageable increments called iterations.)\n\n<Point6:1> *True* (The student accurately describes Agile's emphasis on continuous feedback and adaptability.)\n\n<Point7:1> *True* (The student correctly states that the Agile model allows for changes at any stage of the development process.)"
    },
    "13": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model follows a linear sequence where each phase is completed before moving on to the next one. This means the process flows in a single direction, without any overlap. It is difficult to make changes once a phase is finished, as it would require going back and redoing previous work. In contrast, the Agile model is iterative and incremental, focusing on flexibility and continuous feedback. Development is done in small increments called iterations, which makes it easy to adapt to changes and incorporate feedback from stakeholders throughout the process. Changes can be made at any point, allowing for evolving requirements to be accommodated.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student accurately describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student correctly explains the difficulty in making changes within the Waterfall model.)\n\n<Point3:1> *False* (The student did not mention the lack of overlap in the Waterfall model's phases.)\n\n<Point4:2> *True* (The student provides an accurate description of the Agile model's iterative and incremental approach.)\n\n<Point5:1> *True* (The student correctly identifies the focus on small, manageable increments in the Agile model.)\n\n<Point6:1> *True* (The student accurately describes the Agile model's emphasis on continuous feedback and adaptability.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile model.)"
    },
    "14": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step approach where one phase is completed before starting the next. It moves in a single direction, making it hard to go back and make changes. The Agile model is different because it uses an iterative process, breaking the work into small cycles or iterations. This approach allows for ongoing feedback and makes it easier to make changes throughout the project. Agile also promotes collaboration and flexibility, adapting to new requirements as they come up.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly identifies the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student accurately describes the difficulty in making changes within the Waterfall model.)\n\n<Point3:1> *False* (The student does not mention the lack of overlap or iteration in the Waterfall model.)\n\n<Point4:2> *True* (The student correctly identifies the iterative nature of the Agile model.)\n\n<Point5:1> *True* (The student accurately describes the use of iterations in the Agile model.)\n\n<Point6:1> *True* (The student correctly identifies the focus on flexibility, collaboration, and feedback in the Agile model.)\n\n<Point7:1> *True* (The student correctly explains the ease of making changes in the Agile model.)"
    },
    "15": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "Waterfall is a traditional model where each phase must be finished before the next one begins, creating a linear flow. This makes it challenging to implement changes later in the process. Agile, on the other hand, uses short, iterative cycles that allow for regular reassessment and adaptation. It emphasizes flexibility, collaboration, and continuous feedback from stakeholders. This means changes can be made at any time, which makes it easier to adjust to evolving requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student accurately explains the non-overlapping aspect of the Waterfall model.)\n\n<Point3:1> *True* (The student identifies the difficulty in implementing changes in the Waterfall model.)\n\n<Point4:2> *True* (The student provides an accurate description of the Agile model's iterative and incremental approach.)\n\n<Point5:1> *True* (The student correctly mentions the Agile model's focus on small, manageable increments.)\n\n<Point6:1> *True* (The student accurately describes the Agile model's emphasis on continuous feedback and adaptability.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile model.)"
    },
    "16": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a straightforward approach where you complete each phase before moving to the next. This model is linear and doesn\u2019t allow for changes easily once a phase is done. Agile is a modern approach where development is done in iterations. This means small parts of the project are developed and reviewed regularly, allowing for changes based on feedback. Agile is flexible and adapts to new requirements as they come.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly identifies the Waterfall model as a linear and sequential approach.)\n\n<Point2:1> *True* (The student accurately describes the difficulty in making changes within the Waterfall model after a phase is completed.)\n\n<Point3:1> *False* (The student does not mention the sequential nature of the Waterfall model, focusing instead on its linearity.)\n\n<Point4:2> *True* (The student correctly identifies Agile as an iterative and incremental approach.)\n\n<Point5:1> *True* (The student accurately describes Agile development occurring in small, manageable increments called iterations.)\n\n<Point6:1> *True* (The student correctly explains that Agile allows for continuous feedback from stakeholders and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student correctly states that Agile enables changes at any stage of the development process, accommodating evolving requirements and priorities.)"
    },
    "17": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a process where each phase must be finished before the next one starts. It flows in one direction and doesn\u2019t allow for changes easily after a phase is completed. Agile is different because it uses iterations, which are small cycles of development. This allows for continuous feedback and changes throughout the project. Agile is more flexible and collaborative, making it easier to adapt to new requirements.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student accurately explains the difficulty in implementing changes within the Waterfall model.)\n\n<Point3:1> *False* (The student does not mention the sequential flow of the Waterfall model as described in the reference answer.)\n\n<Point4:2> *True* (The student provides a correct description of the Agile model's use of iterations.)\n\n<Point5:1> *True* (The student correctly identifies the focus on flexibility and collaboration in the Agile model.)\n\n<Point6:1> *True* (The student accurately describes the Agile model's ability to accommodate evolving requirements through continuous feedback.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile model.)"
    },
    "18": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a step-by-step process where each phase must be finished before the next one starts. It\u2019s difficult to go back and make changes once a phase is completed. Agile is an iterative process that breaks the project into small parts called iterations. This allows for constant feedback and makes it easy to adapt to changes.",
        "teacherMark": "<Point1:True>,<Point2:False>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:False>, <Point7:False>",
        "feedback": "<Point1:2> *True* (The student correctly describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student accurately highlights the difficulty in making changes within the Waterfall model after a phase is completed.)\n\n<Point3:1> *False* (The student does not mention the sequential flow characteristic of the Waterfall model, which is a key aspect.)\n\n<Point4:2> *True* (The student provides a correct description of the Agile model as an iterative and incremental approach.)\n\n<Point5:1> *True* (The student correctly identifies that Agile development occurs in small, manageable increments called iterations.)\n\n<Point6:1> *True* (The student accurately explains that Agile allows for continuous feedback and adaptability to changing requirements.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage of the development process in Agile, which is a significant advantage.)"
    },
    "19": {
        "question_code": "CPT002",
        "question": "What is the difference between the Waterfall model and the Agile model?",
        "fullMark": "9",
        "referenceAnswer": "Waterfall Model:<Point1:2>A linear and sequential approach where each phase must be completed before the next begins<Point1:2>. <Point2:1> The process flows in one direction like a waterfall, moving from one phase to the next without overlapping or iteration<Point2:1>. <Point3:1>Difficulty in Changes: Changes are difficult to implement once a phase is completed, as it requires revisiting and potentially redoing previous phases<Point3:1>.\nAgile Model: <Point4:2>An iterative and incremental approach that focuses on flexibility, collaboration, and customer feedback<Point4:2>. <Point5:1> Development occurs in small, manageable increments called iterations<Point5:1>, which allow for regular reassessment and adaptation. <Point6:1> Agile allows for continuous feedback from stakeholders and adaptability to changing requirements throughout the development process<Point6:1>.\n<Point7:1> Changes can be made at any stage of the development process, accommodating evolving requirements and priorities<Point7:1>.\n",
        "studentAnswer": "The Waterfall model is a traditional approach where each phase must be completed before the next one starts. This model is linear and flows in one direction, which makes it difficult to go back and make changes once a phase is finished. The Agile model, however, is iterative and allows for development in small, manageable increments called iterations. Agile emphasizes flexibility and continuous feedback from stakeholders, allowing changes to be made at any stage of the development process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>,<Point6:True>, <Point7:True>",
        "feedback": "<Point1:2> *True* (The student correctly describes the sequential nature of the Waterfall model.)\n\n<Point2:1> *True* (The student accurately explains the difficulty in making changes within the Waterfall model.)\n\n<Point3:1> *False* (The student does not mention the lack of overlap or iteration in the Waterfall model.)\n\n<Point4:2> *True* (The student provides a correct definition of the Agile model as an iterative and incremental approach.)\n\n<Point5:1> *True* (The student correctly identifies the focus on small, manageable increments in the Agile model.)\n\n<Point6:1> *True* (The student accurately describes the importance of continuous feedback and adaptability in the Agile model.)\n\n<Point7:1> *True* (The student correctly states that changes can be made at any stage in the Agile model.)"
    },
    "20": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion indicates how closely related the elements within a module are. It measures the strength of the relationship between the data and the methods in a class. High cohesion means that the elements in a module are related and work together well. Low cohesion means that the elements are not closely related and do not have a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer accurately describes the relationship strength between the data of a class and its methods.)\n\n<Point3:1> *True* (The student's answer correctly explains that cohesion measures the unifying factor or purpose the class serves.)\n\n<Point4:2> *True* (The student's answer appropriately states that high cohesion means elements within a module are closely related and work together towards a common goal.)\n\n<Point5:2> *True* (The student's answer accurately identifies that low cohesion implies elements are loosely related and do not have a clear or unified purpose.)"
    },
    "21": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is about how strongly related the parts of a module are. It shows how well the data and methods in a class are connected and their shared purpose. High cohesion means everything in the module works together towards a common goal, while low cohesion means the elements are not well connected and don't serve a clear purpose.",
        "teacherMark": "<Point1:True>, <Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer accurately describes the relationship between the data of a class and its methods in terms of cohesion.)\n\n<Point3:1> *True* (The student's answer appropriately explains the purpose served by a class in relation to cohesion.)\n\n<Point4:2> *True* (The student's answer correctly identifies high cohesion as elements within a module working closely together towards a common goal.)\n\n<Point5:2> *True* (The student's answer accurately contrasts high and low cohesion by explaining that low cohesion involves elements that are not well connected and lack a clear purpose.)"
    },
    "22": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements within a module. It evaluates how well the data and methods in a class are connected. High cohesion indicates that the elements in a module are closely related and work together towards a specific goal, while low cohesion means the elements are loosely related and lack a unified purpose. For example, if a class has methods that are not related to each other, it would have low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer correctly mentions that cohesion evaluates the relationship between data and methods in a class.)\n\n<Point3:1> *True* (The student's answer correctly states that cohesion is related to the unifying factor or purpose of a class.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as elements within a module being closely related and working together towards a common goal.)\n\n<Point5:2> *True* (The student's answer correctly explains low cohesion as elements being loosely related and lacking a clear or unified purpose.)"
    },
    "23": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to the measure of the relationship strength between the elements within a module, such as the data and methods in a class. High cohesion means that the elements are closely related and work together to achieve a common goal. This results in better maintainability and understandability of the module. On the other hand, low cohesion implies that the elements are not well-connected and do not serve a clear or unified purpose, making the module harder to manage. For instance, if a class has methods that handle various unrelated tasks, it exhibits low cohesion.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer accurately describes the relationship strength between the data of a class and its methods.)\n\n<Point3:1> *True* (The student's answer correctly explains the unifying factor or purpose a class serves in relation to its cohesion.)\n\n<Point4:2> *True* (The student's answer appropriately characterizes high cohesion as elements within a module being closely related and working together towards a common goal.)\n\n<Point5:2> *True* (The student's answer accurately contrasts high and low cohesion by describing low cohesion as elements being loosely related and not having a clear or unified purpose.)"
    },
    "24": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is a measure of how strongly related and focused the various elements of a module are. It evaluates the strength of the relationship between the data and the methods within a class. High cohesion means that all elements within the module are related and work together towards a single goal, which makes the module easier to maintain and understand. On the other hand, low cohesion indicates that the elements are not well connected and serve multiple, often unrelated purposes, which can complicate maintenance and understanding of the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer accurately describes the relationship strength between the data of a class and its methods.)\n\n<Point3:1> *True* (The student's answer correctly identifies that cohesion measures the unifying factor or purpose the class serves.)\n\n<Point4:2> *True* (The student's answer appropriately explains high cohesion as elements within a module being closely related and working together towards a common goal.)\n\n<Point5:2> *True* (The student's answer accurately describes low cohesion as elements being loosely related and serving multiple, often unrelated purposes.)"
    },
    "25": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures the bond strength between elements in a module. It is an indicator of how closely related the methods and data within a class are. High cohesion means the module's elements are focused on a single task, making the system more reliable and easier to understand. Conversely, low cohesion means the elements are not closely related and may perform different tasks, leading to a lack of clear purpose and making the module difficult to maintain.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student acknowledges that cohesion relates to the relationship between data and methods within a class.)\n\n<Point3:1> *True* (The student understands that cohesion is also related to the unifying factor or purpose of a class.)\n\n<Point4:2> *True* (The student accurately describes high cohesion as elements within a module being closely related and working towards a common goal.)\n\n<Point5:2> *True* (The student correctly contrasts high and low cohesion by explaining that low cohesion involves elements that are loosely related and lack a clear purpose.)"
    },
    "26": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how strongly elements within a module are connected. It assesses the relationship between the data and methods of a class and their common purpose. High cohesion means that all elements within the module are related and work together towards a common goal, enhancing the module's maintainability. Low cohesion indicates that the elements are loosely connected and lack a clear purpose, making the module harder to understand and manage",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer correctly mentions the relationship between the data of a class/methods and their unifying factor or purpose.)\n\n<Point3:1> *True* (The student's answer accurately describes the purpose served by a class in relation to its cohesion.)\n\n<Point4:2> *True* (The student's answer correctly explains high cohesion as elements within a module being closely related and working together towards a common goal, enhancing maintainability.)\n\n<Point5:2> *True* (The student's answer accurately describes low cohesion as elements being loosely connected and lacking a clear purpose, making the module harder to understand and manage.)"
    },
    "27": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion refers to how closely related the parts of a module are. It measures the strength of the connection between the data and methods in a class. High cohesion means the elements within the module are closely related and work towards a single objective, which improves the module's reliability and maintainability. Low cohesion means the elements do not have a clear relationship and purpose, making the module more complex and difficult to manage.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer correctly mentions the relationship strength between the data of a class and its methods.)\n\n<Point3:1> *True* (The student's answer correctly includes the unifying factor or purpose the class serves.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as elements within a module being closely related and working towards a common goal.)\n\n<Point5:2> *True* (The student's answer appropriately explains low cohesion as elements lacking a clear relationship and purpose, making the module more complex and difficult to manage.)"
    },
    "28": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion is the measure of how well the elements within a module are related to each other. It evaluates the connection between the data and the methods within a class. High cohesion means that all elements are closely related and serve a single purpose, making the module easier to maintain and understand. Low cohesion means the elements are loosely related and do not have a clear, unified purpose, which can lead to difficulties in managing the module.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer correctly identifies that cohesion measures the relationship strength between data and methods.)\n\n<Point3:1> *True* (The student's answer accurately explains that cohesion relates to the unifying factor or purpose of a class.)\n\n<Point4:2> *True* (The student's answer correctly states that high cohesion involves elements within a module being closely related and working towards a common goal.)\n\n<Point5:2> *True* (The student's answer accurately describes low cohesion as involving elements that are loosely related and lack a clear, unified purpose.)"
    },
    "29": {
        "question_code": "CPT003",
        "question": "What is cohesion? And what is high and low",
        "fullMark": "8",
        "referenceAnswer": "Cohesion indicates the <Point1:2>bond strength between elements in a module<Point1:2>. It measures the <Point2:1>relationship strength between the data of a class/methods<Point2:1>and<Point3:1>the unifying factor or purpose the class serves<Point3:1>. High cohesion means that <Point4:2>the elements within a module are closely related and work together towards a common goal<Point4:2>, while low cohesion implies that <Point5:2>the elements are loosely related and do not have a clear or unified purpose<Point5:2>.",
        "studentAnswer": "Cohesion measures how well the elements within a module are related to each other. It is an indicator of the bond strength between these elements. In software engineering, cohesion assesses how closely related the data and the methods in a class are. High cohesion means that the elements within a module are highly related and work together towards a single purpose, which improves the maintainability and understandability of the module. Low cohesion, on the other hand, implies that the elements are not well connected and serve multiple, unrelated purposes, making the module harder to manage and understand.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:False>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly defines cohesion as the bond strength between elements in a module.)\n\n<Point2:1> *True* (The student's answer correctly mentions that cohesion measures the relationship strength between the data of a class and its methods.)\n\n<Point3:1> *True* (The student's answer correctly includes the unifying factor or purpose the class serves in the context of cohesion.)\n\n<Point4:2> *True* (The student's answer accurately describes high cohesion as elements within a module being closely related and working together towards a common goal.)\n\n<Point5:2> *True* (The student's answer correctly explains low cohesion as elements being loosely related and not having a clear or unified purpose.)"
    },
    "30": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable and important attributes of processes. They are standard systematic procedures that indicate that the engineers are on the right path. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. They can be related to various aspects of the project, such as completing a specific feature, testing and debugging the code, or reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>,<Point6:True>,<Point7:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable and important attributes of processes.)\n\n<Point2:1> *True* (The student's answer correctly states that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer accurately conveys that internal milestones indicate the engineers are on the right path.)\n\n<Point4:2> *True* (The student's answer appropriately explains that internal milestones can be used to assess the development team's progress.)\n\n<Point5:1> *True* (The student's answer correctly mentions that internal milestones help in identifying issues and risks.)\n\n<Point6:1> *True* (The student's answer accurately reflects that internal milestones allow for necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student's answer includes one example of an aspect related to internal milestones, i.e., completing a specific feature.)\n\n<Point8:1> *True* (The student's answer includes another example of an aspect related to internal milestones, i.e., testing and debugging the code.)\n\n<Point9:1> *False* (The student's answer lacks an example of an aspect related to internal milestones, specifically reaching a certain level of performance or functionality.)"
    },
    "31": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are checkpoints that help track the progress of a project. These are important indicators to see if the engineers are on track. They help assess progress, identify problems, and make changes to the project plan if needed. Milestones can include finishing a feature, testing and debugging, or achieving a specific performance level.",
        "teacherMark": "<Point1:False>,<Point2:False>,<Point3:True>,<Point4:True>,<Point5:False>,<Point6:True>, <Point7:True>,<Point8:True>,<Point8:True>,<Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student acknowledges that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student understands that these milestones indicate progress and alignment with the project goals.)\n\n<Point4:2> *True* (The student correctly mentions using milestones to assess the development team's progress.)\n\n<Point5:1> *True* (The student recognizes the role of internal milestones in identifying issues and risks.)\n\n<Point6:1> *True* (The student understands that milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student includes finishing a feature as an example of a milestone.)\n\n<Point8:1> *True* (The student includes testing and debugging as another example of a milestone.)\n\n<Point9:1> *False* (The student does not mention achieving a specific performance level or functionality as an example of a milestone.)"
    },
    "32": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are measurable indicators of progress within the development process. They are standard procedures that show the engineers are on track. These milestones can be used to assess the development team's progress, identify issues and risks, and make necessary adjustments to the project plan. Examples of internal milestones include completing a specific feature, testing and debugging the code, and reaching a certain level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable indicators of progress.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as standard procedures indicating progress.)\n\n<Point3:1> *True* (The student's answer captures the role of internal milestones in assessing the development team's progress.)\n\n<Point4:2> *True* (The student's answer acknowledges the use of internal milestones for assessing progress.)\n\n<Point5:1> *True* (The student's answer includes the identification of issues and risks through internal milestones.)\n\n<Point6:1> *True* (The student's answer highlights the adjustment of the project plan based on internal milestones.)\n\n<Point7:1> *True* (The student's answer provides an example of an internal milestone: completing a specific feature.)\n\n<Point8:1> *True* (The student's answer gives another example of an internal milestone: testing and debugging the code.)\n\n<Point9:1> *True* (The student's answer includes a third example of an internal milestone: reaching a certain level of performance or functionality.)"
    },
    "33": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are key indicators in software engineering that help measure the progress of the project. These are standard procedures indicating that the engineers are on the right path. They can be used to assess the team's progress, identify issues and risks, and adjust the project plan as needed. Milestones can include completing a specific feature, testing and debugging the code, or achieving a specific level of performance or functionality.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer acknowledges that internal milestones are standard procedures.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones indicate the project is proceeding correctly.)\n\n<Point4:2> *True* (The student's answer includes the use of internal milestones to assess the development team's progress.)\n\n<Point5:1> *True* (The student's answer mentions using internal milestones to identify issues and risks.)\n\n<Point6:1> *True* (The student's answer explains how internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student's answer lists completing a specific feature as an example of an internal milestone.)\n\n<Point8:1> *True* (The student's answer includes testing and debugging the code as another example of an internal milestone.)\n\n<Point9:1> *True* (The student's answer also mentions reaching a specific level of performance or functionality as an internal milestone.)"
    },
    "34": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable steps that show progress in the development process. They are standard procedures that indicate that the project is on track. These milestones are useful for assessing the team's progress, identifying problems, and making necessary changes to the project plan. They can be related to tasks such as completing a feature, debugging, or reaching a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of the development process.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as standard procedures indicating progress.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones help assess the team's progress.)\n\n<Point4:2> *True* (The student's answer appropriately mentions using milestones to evaluate progress.)\n\n<Point5:1> *True* (The student's answer correctly includes identifying issues as a purpose of internal milestones.)\n\n<Point6:1> *True* (The student's answer accurately reflects the use of milestones for adjusting the project plan.)\n\n<Point7:1> *True* (The student's answer correctly lists completing a feature as an example of an internal milestone.)\n\n<Point8:1> *True* (The student's answer appropriately includes debugging as another example of an internal milestone.)\n\n<Point9:1> *True* (The student's answer correctly mentions reaching a performance goal as a relevant internal milestone.)"
    },
    "35": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering refer to measurable checkpoints that indicate progress. These systematic procedures ensure that the development team is on the right path. They can help assess progress, identify issues, and adjust the project plan if needed. Examples include completing a feature, testing the code, and reaching a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer acknowledges that internal milestones are standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer conveys that these milestones indicate the development team is on the right path.)\n\n<Point4:2> *True* (The student's answer appropriately explains that internal milestones can be used to assess the development team's progress.)\n\n<Point5:1> *True* (The student's answer highlights the role of internal milestones in identifying issues and risks.)\n\n<Point6:1> *True* (The student's answer mentions that internal milestones can lead to necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student's answer includes an example of completing a feature as a milestone.)\n\n<Point8:1> *True* (The student's answer includes another example of testing and debugging the code as a milestone.)\n\n<Point9:1> *False* (The student's answer does not mention reaching a specific performance or functionality level as an example of an internal milestone.)"
    },
    "36": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints used in software engineering to measure progress. These are systematic procedures indicating that engineers are on the right path. They are used to evaluate progress, identify risks, and make necessary changes to the project plan. Examples include completing a feature, debugging the code, or achieving a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:False>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer captures the essence of internal milestones indicating progress in the development process.)\n\n<Point4:2> *True* (The student's answer acknowledges the use of internal milestones for assessing the development team's progress.)\n\n<Point5:1> *True* (The student's answer highlights the role of internal milestones in identifying issues and risks.)\n\n<Point6:1> *True* (The student's answer explains how internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student's answer provides an example of a milestone related to completing a specific feature.)\n\n<Point8:1> *True* (The student's answer includes another example of a milestone related to debugging the code.)\n\n<Point9:1> *False* (The student's answer does not mention the milestone related to reaching a certain level of performance or functionality.)"
    },
    "37": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones in software engineering are key indicators that measure progress. They consist of standard procedures that show the project is on the right path. These milestones can be used to assess the development team, identify issues and risks, and adjust the project plan. They can involve tasks like completing a specific feature, testing, and debugging, or achieving a performance goal.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer acknowledges that internal milestones are standard procedures indicating progress.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones help assess the development team's progress.)\n\n<Point4:2> *True* (The student's answer accurately reflects the use of internal milestones for assessing progress.)\n\n<Point5:1> *True* (The student's answer correctly mentions using internal milestones to identify issues and risks.)\n\n<Point6:1> *True* (The student's answer appropriately explains how internal milestones can be used to make necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student's answer includes one example of a task associated with internal milestones, completing a specific feature.)\n\n<Point8:1> *True* (The student's answer includes another example of a task associated with internal milestones, testing and debugging the code.)\n\n<Point9:1> *False* (The student's answer does not provide an example of achieving a performance goal as an internal milestone.)"
    },
    "38": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "In software engineering, internal milestones are measurable attributes that indicate progress in the development process. These are systematic procedures showing that the engineers are on the right path. They are used to assess progress, identify issues and risks, and make necessary adjustments. Examples include completing a feature, testing, and debugging the code, or reaching a performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:False>, <Point9:False>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes indicating progress in the development process.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as systematic procedures showing that the engineers are on the right path.)\n\n<Point3:1> *True* (The student's answer correctly states that internal milestones are used to assess progress, identify issues and risks, and make necessary adjustments.)\n\n<Point4:2> *True* (The student's answer appropriately includes the use of internal milestones to assess the development team's progress.)\n\n<Point5:1> *True* (The student's answer correctly highlights the role of internal milestones in identifying issues and risks.)\n\n<Point6:1> *True* (The student's answer accurately mentions the adjustment of the project plan based on internal milestones.)\n\n<Point7:1> *True* (The student's answer provides an example of completing a feature as an internal milestone.)\n\n<Point8:1> *True* (The student's answer includes testing and debugging the code as another example of an internal milestone.)\n\n<Point9:1> *False* (The student's answer does not explicitly mention reaching a certain level of performance or functionality as an example of an internal milestone.)"
    },
    "39": {
        "question_code": "CPT004",
        "question": "What are internal milestones in software engineering?",
        "fullMark": "11",
        "referenceAnswer": "Internal milestones are <Point1:2>measurable and important attributes of processes<Point1:2>. They are <Point2:1>standard systematic procedures <Point2:1> that  <Point3:1>indicate that the engineers are on the right path<Point3:1>. These milestones can be used to <Point4:2>assess the development team's progress<Point4:2>, <Point5:1>identify issues and risks<Point5:1>, and <Point6:1>make necessary adjustments to the project plan<Point6:1>. They can be related to various aspects of the project, such as <Point7:1>completing a specific feature<Point7:1>, <Point8:1>testing and debugging the code<Point8:1>, or <Point9:1>reaching a certain level of performance or functionality<Point9:1>.",
        "studentAnswer": "Internal milestones are checkpoints in software engineering that help measure project progress. They consist of standard procedures that indicate engineers are on the right path. These milestones can be used to assess progress, identify issues and risks, and make necessary adjustments to the project plan. Examples include completing a feature, testing and debugging the code, and achieving a specific performance level.",
        "teacherMark": "<Point1:True>, <Point2:True>, <Point3:True>, <Point4:True>, <Point5:True>, <Point6:True>, <Point7:True>, <Point8:True>, <Point9:True>",
        "feedback": "<Point1:2> *True* (The student's answer correctly identifies internal milestones as measurable attributes of processes.)\n\n<Point2:1> *True* (The student's answer accurately describes internal milestones as standard systematic procedures.)\n\n<Point3:1> *True* (The student's answer captures the essence of internal milestones indicating progress.)\n\n<Point4:2> *True* (The student's answer correctly explains the use of internal milestones for assessing progress.)\n\n<Point5:1> *True* (The student's answer acknowledges the role of internal milestones in identifying issues and risks.)\n\n<Point6:1> *True* (The student's answer highlights the importance of using internal milestones for making necessary adjustments to the project plan.)\n\n<Point7:1> *True* (The student's answer includes an example of completing a feature as a milestone.)\n\n<Point8:1> *True* (The student's answer includes another example of testing and debugging the code as a milestone.)\n\n<Point9:1> *False* (The student's answer does not mention reaching a certain level of performance or functionality as an example of an internal milestone.)"
    },
    "40": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an iterative and prototyping method used in software development. It focuses on reducing the time spent on planning and emphasizes quick development. The model involves a series of smaller development cycles such as planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. The RAD model also uses feedback from end-users and stakeholders to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately highlights the emphasis on reducing planning time and focusing on development speed.)\n\n<Point3:1> *True* (The student correctly outlines the series of development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately mentions the goal of delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the use of feedback from end-users and stakeholders for continuous improvement, though it could be more detailed.)"
    },
    "41": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a software development approach that emphasizes speed and flexibility. It is iterative and involves creating prototypes. The model minimizes the time spent on detailed planning and focuses more on the actual development. It includes multiple short development cycles such as planning, design, construction, and testing. The aim is to quickly deliver functional software to clients and stakeholders. The RAD model relies heavily on feedback from users to improve and refine the software continuously.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately notes that the RAD model emphasizes less time on traditional planning phases and more on development.)\n\n<Point3:1> *True* (The student correctly describes the series of smaller development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately highlights the goal of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of user feedback in refining and improving the software, aligning with the RAD model's emphasis on iterative development.)"
    },
    "42": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The Rapid Application Development (RAD) model is an approach to software development that emphasizes quick development and iteration. It uses an iterative and prototyping approach, focusing on developing software faster and with fewer planning phases. The RAD model involves smaller development cycles such as planning, design, construction, and testing, aiming to deliver functional software quickly to clients and stakeholders. Feedback from end-users and stakeholders is crucial for refining and improving the software throughout the process.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> *True* (The student accurately highlights the focus on reducing planning phases and emphasizing development speed.)\n\n<Point3:1> *True* (The student correctly mentions the series of smaller development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately notes the goal of delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of feedback from end-users and stakeholders in the RAD model.)"
    },
    "43": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is a method of software development that focuses on quick development through iterative processes and prototyping. It spends less time on traditional planning and more on actual software development. The model involves several small development cycles, including planning, design, construction, and testing, to quickly deliver functional software to clients and stakeholders. The RAD model also incorporates continuous feedback from users and stakeholders to refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately notes the emphasis on less planning and more development in the RAD model.)\n\n<Point3:1> *True* (The student correctly describes the series of development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately highlights the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the incorporation of feedback from end-users and stakeholders in the RAD model.)"
    },
    "44": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a software development model that emphasizes quick delivery and flexibility. It uses iterative and prototyping approaches to reduce time spent on planning. RAD involves multiple smaller development cycles such as planning, design, construction, and testing. Its main focus is on delivering functional software quickly to clients and stakeholders, incorporating feedback from end-users to refine the software continually.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> *True* (The student accurately mentions the emphasis on reducing planning time in the RAD model.)\n\n<Point3:1> *True* (The student correctly describes the series of smaller development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately highlights the focus on quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of feedback from end-users and stakeholders in refining the software, aligning with the RAD model's principles.)"
    },
    "45": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, or Rapid Application Development model, is a software development methodology that focuses on quick development and iteration through prototyping. It minimizes time spent on traditional planning phases and emphasizes rapid development. The RAD model involves smaller development cycles like planning, design, construction, and testing, with the primary aim of delivering functional software quickly to clients and stakeholders. Feedback from end-users is crucial in this model as it helps in refining and improving the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> *True* (The student accurately highlights the emphasis on reducing time spent on traditional planning phases.)\n\n<Point3:1> *True* (The student correctly mentions the series of smaller development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately notes the primary aim of delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of feedback from end-users and stakeholders in refining and improving the software.)"
    },
    "46": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model stands for Rapid Application Development and is characterized by its iterative approach and use of prototyping. It places less emphasis on traditional planning phases and more on rapid development cycles such as planning, design, construction, and testing. This model aims to deliver functional software quickly to clients and stakeholders, using feedback from end-users to continuously improve the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as an iterative and prototyping approach to software development.)\n\n<Point2:1> *True* (The student accurately highlights the emphasis on rapid development cycles over traditional planning phases.)\n\n<Point3:1> *True* (The student correctly lists the development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately mentions the goal of delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of feedback from end-users and stakeholders in refining and improving the software.)"
    },
    "47": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model is an iterative and prototyping approach to software development. It focuses on reducing the time spent on planning and emphasizes actual development. The model includes smaller development cycles such as planning, design, construction, and testing, aiming for quick delivery of functional software to clients and stakeholders. RAD also incorporates feedback from end-users and stakeholders to continuously refine the software.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:True>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the RAD model as an iterative and prototyping approach to software development.)\n\n<Point2:1> *True* (The student accurately highlights the emphasis on development over planning in the RAD model.)\n\n<Point3:1> *True* (The student correctly lists the four main development cycles in the RAD model.)\n\n<Point4:1> *True* (The student appropriately mentions the goal of quick delivery of functional software to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of incorporating feedback from end-users and stakeholders in the RAD model.)"
    },
    "48": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "The RAD model, which stands for Rapid Application Development, is an iterative software development approach that focuses on quick prototyping. It emphasizes less time on traditional planning phases and more on development. The model involves smaller development cycles like planning, design, construction, and testing. Its main goal is to deliver functional software quickly to clients and stakeholders. Feedback from end-users is crucial for continuous improvement.",
        "teacherMark": "<Point1:True>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student correctly identifies the RAD model as an iterative and prototyping approach.)\n\n<Point2:1> *True* (The student accurately notes the emphasis on development over planning in the RAD model.)\n\n<Point3:1> *True* (The student correctly lists the four main stages of the RAD model: planning, design, construction, and testing.)\n\n<Point4:1> *True* (The student correctly states the primary goal of the RAD model is to deliver functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the importance of feedback from end-users and stakeholders in the RAD model for continuous improvement.)"
    },
    "49": {
        "question_code": "CPT005",
        "question": "What is the Rapid Application Development (RAD) model?",
        "fullMark": "6",
        "referenceAnswer": "The RAD model is an <Point1:>iterative and prototyping approach<Point1:1> to software development that<Point2:1>emphasizes less time spent on traditional planning phases and more on software development<Point2:1>. It involves a <Point3:1>series of smaller development cycles, including planning, design, construction, and testing<Point3:1>, with a focus on <Point4:1>quick delivery of functional software to clients and stakeholders<Point4:1>. The RAD model incorporates <Point5:2>feedback from end-users and stakeholders to refine and improve the software<Point5:2>.",
        "studentAnswer": "Rapid Application Development (RAD) is a model in software development that emphasizes fast delivery and prototyping. It reduces time spent on detailed planning and focuses on smaller development cycles like planning, design, construction, and testing. The goal is to deliver functional software quickly to clients and stakeholders. RAD uses feedback from end-users to refine and improve the software continuously.",
        "teacherMark": "<Point1:False>,<Point2:True>,<Point3:True>,<Point4:True>,<Point5:False>",
        "feedback": "<Point1:1> *True* (The student's answer correctly identifies the iterative and prototyping nature of the RAD model.)\n\n<Point2:1> *True* (The student accurately highlights the emphasis on reducing time spent on traditional planning phases.)\n\n<Point3:1> *True* (The student correctly mentions the series of smaller development cycles involved in the RAD model.)\n\n<Point4:1> *True* (The student appropriately states the goal of delivering functional software quickly to clients and stakeholders.)\n\n<Point5:2> *True* (The student acknowledges the use of feedback from end-users and stakeholders for refining and improving the software.)"
    }
}